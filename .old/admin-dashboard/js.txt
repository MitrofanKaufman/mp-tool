// admin-dashboard/components/ideas.js
// –û–ø–∏—Å–∞–Ω–∏–µ: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–¥–µ—è–º–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å–∏—Å—Ç–µ–º—ã
// –õ–æ–≥–∏–∫–∞: –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è
// –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: HTMLElement, fetch API
// –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: –†–µ–∞–ª–∏–∑—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ, –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–¥–µ—è–º–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏

class IdeasPanel extends HTMLElement {
    constructor() {
        super();
        this.ideas = [];
        this.filters = {
            status: 'all',
            priority: 'all',
            category: 'all',
            search: ''
        };
        this.sortBy = 'created-desc';
    }

    connectedCallback() {
        this.render();
        this.loadIdeas();
    }

    render() {
        this.innerHTML = `
            <div class="card">
                <div class="ideas-header">
                    <h2>üí° –°–∏—Å—Ç–µ–º–∞ –∏–¥–µ–π</h2>
                    <button class="btn btn-primary" id="new-idea-btn">
                        ‚ûï –ù–æ–≤–∞—è –∏–¥–µ—è
                    </button>
                </div>
                <p>–ü—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ –∏ –æ–±—Å—É–∂–¥–∞–π—Ç–µ —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã</p>

                <div class="ideas-controls">
                    <div class="filters-grid">
                        <div class="form-group">
                            <label>–°—Ç–∞—Ç—É—Å:</label>
                            <select class="form-control" id="status-filter">
                                <option value="all">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
                                <option value="new">–ù–æ–≤—ã–µ</option>
                                <option value="in-progress">–í —Ä–∞–±–æ—Ç–µ</option>
                                <option value="completed">–ó–∞–≤–µ—Ä—à–µ–Ω—ã</option>
                                <option value="rejected">–û—Ç–∫–ª–æ–Ω–µ–Ω—ã</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</label>
                            <select class="form-control" id="priority-filter">
                                <option value="all">–í—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã</option>
                                <option value="critical">–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π</option>
                                <option value="high">–í—ã—Å–æ–∫–∏–π</option>
                                <option value="medium">–°—Ä–µ–¥–Ω–∏–π</option>
                                <option value="low">–ù–∏–∑–∫–∏–π</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</label>
                            <select class="form-control" id="category-filter">
                                <option value="all">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
                                <option value="feature">–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª</option>
                                <option value="improvement">–£–ª—É—á—à–µ–Ω–∏–µ</option>
                                <option value="bugfix">–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</option>
                                <option value="ui-ux">UI/UX</option>
                                <option value="performance">–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:</label>
                            <select class="form-control" id="sort-by">
                                <option value="created-desc">–ù–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞</option>
                                <option value="created-asc">–°—Ç–∞—Ä—ã–µ —Å–Ω–∞—á–∞–ª–∞</option>
                                <option value="priority-desc">–ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É</option>
                                <option value="votes-desc">–ü–æ –≥–æ–ª–æ—Å–∞–º</option>
                            </select>
                        </div>
                    </div>
                    <div class="search-box">
                        <input type="text" id="search-ideas" class="form-control" placeholder="üîç –ü–æ–∏—Å–∫ –ø–æ –∏–¥–µ—è–º...">
                    </div>
                </div>

                <div class="ideas-stats">
                    <div class="stat-card">
                        <span class="stat-number">${this.getStats().total}</span>
                        <span class="stat-label">–í—Å–µ–≥–æ –∏–¥–µ–π</span>
                    </div>
                    <div class="stat-card">
                        <span class="stat-number">${this.getStats().inProgress}</span>
                        <span class="stat-label">–í —Ä–∞–±–æ—Ç–µ</span>
                    </div>
                    <div class="stat-card">
                        <span class="stat-number">${this.getStats().completed}</span>
                        <span class="stat-label">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</span>
                    </div>
                    <div class="stat-card">
                        <span class="stat-number">${this.getStats().highPriority}</span>
                        <span class="stat-label">–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç</span>
                    </div>
                </div>

                <div id="ideas-list" class="ideas-list">
                    <div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –∏–¥–µ–π...</div>
                </div>
            </div>

            <!-- Modal for new idea -->
            <div id="new-idea-modal" class="modal" style="display: none;">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3>üí° –ù–æ–≤–∞—è –∏–¥–µ—è</h3>
                        <button class="close-modal">&times;</button>
                    </div>
                    <div class="modal-body">
                        <form id="new-idea-form">
                            <div class="form-group">
                                <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</label>
                                <input type="text" class="form-control" name="title" required 
                                       placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–¥–µ–∏">
                            </div>
                            <div class="form-group">
                                <label>–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</label>
                                <textarea class="form-control" name="description" rows="4" 
                                          placeholder="–û–ø–∏—à–∏—Ç–µ –∏–¥–µ—é –ø–æ–¥—Ä–æ–±–Ω–æ..."></textarea>
                            </div>
                            <div class="form-grid">
                                <div class="form-group">
                                    <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</label>
                                    <select class="form-control" name="category" required>
                                        <option value="feature">–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª</option>
                                        <option value="improvement">–£–ª—É—á—à–µ–Ω–∏–µ</option>
                                        <option value="bugfix">–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</option>
                                        <option value="ui-ux">UI/UX</option>
                                        <option value="performance">–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</option>
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</label>
                                    <select class="form-control" name="priority" required>
                                        <option value="low">–ù–∏–∑–∫–∏–π</option>
                                        <option value="medium">–°—Ä–µ–¥–Ω–∏–π</option>
                                        <option value="high">–í—ã—Å–æ–∫–∏–π</option>
                                        <option value="critical">–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π</option>
                                    </select>
                                </div>
                            </div>
                            <div class="form-group">
                                <label>–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):</label>
                                <input type="text" class="form-control" name="tags" 
                                       placeholder="frontend, backend, ui, ...">
                            </div>
                            <div class="form-group">
                                <label>–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ (—á–∞—Å—ã):</label>
                                <input type="number" class="form-control" name="estimatedHours" 
                                       min="1" max="200" value="8">
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" id="cancel-idea">–û—Ç–º–µ–Ω–∞</button>
                        <button class="btn btn-primary" id="submit-idea">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–¥–µ—é</button>
                    </div>
                </div>
            </div>
        `;

        this.setupEventListeners();
    }

    setupEventListeners() {
        // Filters
        this.querySelector('#status-filter').addEventListener('change', (e) => {
            this.filters.status = e.target.value;
            this.renderIdeas();
        });
        
        this.querySelector('#priority-filter').addEventListener('change', (e) => {
            this.filters.priority = e.target.value;
            this.renderIdeas();
        });
        
        this.querySelector('#category-filter').addEventListener('change', (e) => {
            this.filters.category = e.target.value;
            this.renderIdeas();
        });
        
        this.querySelector('#sort-by').addEventListener('change', (e) => {
            this.sortBy = e.target.value;
            this.renderIdeas();
        });
        
        this.querySelector('#search-ideas').addEventListener('input', (e) => {
            this.filters.search = e.target.value;
            this.renderIdeas();
        });

        // New idea modal
        this.querySelector('#new-idea-btn').addEventListener('click', () => this.showNewIdeaModal());
        this.querySelector('.close-modal').addEventListener('click', () => this.hideModal());
        this.querySelector('#cancel-idea').addEventListener('click', () => this.hideModal());
        this.querySelector('#submit-idea').addEventListener('click', () => this.submitIdea());
    }

    async loadIdeas() {
        try {
            const response = await fetch(`${window.adminDashboard.apiBase}/admin/ideas`);
            const data = await response.json();
            this.ideas = data.ideas;
            this.renderIdeas();
        } catch (error) {
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–¥–µ–π: ' + error.message);
        }
    }

    renderIdeas() {
        const filteredIdeas = this.filterAndSortIdeas();
        const ideasList = this.querySelector('#ideas-list');
        
        if (filteredIdeas.length === 0) {
            ideasList.innerHTML = '<div class="no-data">–ò–¥–µ–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
            return;
        }

        ideasList.innerHTML = filteredIdeas.map(idea => `
            <div class="idea-item" data-id="${idea.id}">
                <div class="idea-header">
                    <div class="idea-title">
                        <h4>${idea.title}</h4>
                        <div class="idea-meta">
                            <span class="badge category-${idea.category}">${this.getCategoryLabel(idea.category)}</span>
                            <span class="badge priority-${idea.priority}">${this.getPriorityLabel(idea.priority)}</span>
                            <span class="badge status-${idea.status}">${this.getStatusLabel(idea.status)}</span>
                        </div>
                    </div>
                    <div class="idea-actions">
                        <button class="btn-icon" title="–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å">üëç ${idea.votes}</button>
                        <button class="btn-icon" title="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏">üí¨ ${idea.comments}</button>
                        <button class="btn-icon" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
                    </div>
                </div>
                <div class="idea-body">
                    <p>${idea.description}</p>
                    <div class="idea-details">
                        <span>‚è±Ô∏è ${idea.estimatedHours}—á</span>
                        <span>üë§ ${idea.createdBy}</span>
                        <span>üìÖ ${new Date(idea.createdAt).toLocaleDateString()}</span>
                        ${idea.assignedTo ? `<span>üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–æ: ${idea.assignedTo}</span>` : ''}
                    </div>
                    ${idea.tags && idea.tags.length > 0 ? `
                        <div class="idea-tags">
                            ${idea.tags.map(tag => `<span class="tag">${tag}</span>`).join('')}
                        </div>
                    ` : ''}
                </div>
            </div>
        `).join('');
    }

    filterAndSortIdeas() {
        let filtered = this.ideas.filter(idea => {
            const matchesStatus = this.filters.status === 'all' || idea.status === this.filters.status;
            const matchesPriority = this.filters.priority === 'all' || idea.priority === this.filters.priority;
            const matchesCategory = this.filters.category === 'all' || idea.category === this.filters.category;
            const matchesSearch = !this.filters.search || 
                idea.title.toLowerCase().includes(this.filters.search.toLowerCase()) ||
                idea.description.toLowerCase().includes(this.filters.search.toLowerCase());
            
            return matchesStatus && matchesPriority && matchesCategory && matchesSearch;
        });

        // Sort ideas
        filtered.sort((a, b) => {
            switch (this.sortBy) {
                case 'created-desc':
                    return new Date(b.createdAt) - new Date(a.createdAt);
                case 'created-asc':
                    return new Date(a.createdAt) - new Date(b.createdAt);
                case 'priority-desc':
                    return this.getPriorityValue(b.priority) - this.getPriorityValue(a.priority);
                case 'votes-desc':
                    return b.votes - a.votes;
                default:
                    return 0;
            }
        });

        return filtered;
    }

    getPriorityValue(priority) {
        const values = { 'critical': 4, 'high': 3, 'medium': 2, 'low': 1 };
        return values[priority] || 0;
    }

    getCategoryLabel(category) {
        const labels = {
            'feature': '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª',
            'improvement': '–£–ª—É—á—à–µ–Ω–∏–µ', 
            'bugfix': '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
            'ui-ux': 'UI/UX',
            'performance': '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'
        };
        return labels[category] || category;
    }

    getPriorityLabel(priority) {
        const labels = {
            'critical': '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π',
            'high': '–í—ã—Å–æ–∫–∏–π',
            'medium': '–°—Ä–µ–¥–Ω–∏–π', 
            'low': '–ù–∏–∑–∫–∏–π'
        };
        return labels[priority] || priority;
    }

    getStatusLabel(status) {
        const labels = {
            'new': '–ù–æ–≤–∞—è',
            'in-progress': '–í —Ä–∞–±–æ—Ç–µ',
            'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞',
            'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞'
        };
        return labels[status] || status;
    }

    getStats() {
        return {
            total: this.ideas.length,
            inProgress: this.ideas.filter(i => i.status === 'in-progress').length,
            completed: this.ideas.filter(i => i.status === 'completed').length,
            highPriority: this.ideas.filter(i => i.priority === 'high' || i.priority === 'critical').length
        };
    }

    showNewIdeaModal() {
        this.querySelector('#new-idea-modal').style.display = 'block';
    }

    hideModal() {
        this.querySelector('#new-idea-modal').style.display = 'none';
        this.querySelector('#new-idea-form').reset();
    }

    async submitIdea() {
        const form = this.querySelector('#new-idea-form');
        const formData = new FormData(form);
        
        const ideaData = {
            title: formData.get('title'),
            description: formData.get('description'),
            category: formData.get('category'),
            priority: formData.get('priority'),
            tags: formData.get('tags').split(',').map(tag => tag.trim()).filter(tag => tag),
            estimatedHours: parseInt(formData.get('estimatedHours'))
        };

        try {
            const response = await fetch(`${window.adminDashboard.apiBase}/admin/ideas`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(ideaData)
            });
            
            if (response.ok) {
                this.hideModal();
                this.loadIdeas(); // Reload ideas
                this.showSuccess('–ò–¥–µ—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!');
            }
        } catch (error) {
            this.showError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–¥–µ–∏: ' + error.message);
        }
    }

    showSuccess(message) {
        alert('‚úÖ ' + message);
    }

    showError(message) {
        alert('‚ùå ' + message);
    }
}

customElements.define('ideas-panel', IdeasPanel);

---

// admin-dashboard/components/messages.js
// –û–ø–∏—Å–∞–Ω–∏–µ: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –º–µ–∂–¥—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
// –õ–æ–≥–∏–∫–∞: –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è
// –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: HTMLElement, fetch API
// –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: –†–µ–∞–ª–∏–∑—É–µ—Ç –æ–±–º–µ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

class MessagesPanel extends HTMLElement {
    constructor() {
        super();
        this.messages = [];
        this.currentUser = {
            id: 'alex',
            name: '–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤', 
            role: 'director',
            specialization: ['management']
        };
        this.filters = {
            type: 'all',
            priority: 'all',
            specialization: 'all',
            search: ''
        };
        this.specializations = ['frontend', 'backend', 'design', 'devops', 'analytics', 'management'];
    }

    connectedCallback() {
        this.render();
        this.loadMessages();
    }

    render() {
        this.innerHTML = `
            <div class="card">
                <div class="messages-header">
                    <h2>üí¨ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è</h2>
                    <button class="btn btn-primary" id="new-message-btn">
                        ‚úâÔ∏è –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    </button>
                </div>
                <p>–û–±—â–µ–Ω–∏–µ –º–µ–∂–¥—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã</p>

                <div class="messages-controls">
                    <div class="filters-grid">
                        <div class="form-group">
                            <label>–¢–∏–ø:</label>
                            <select class="form-control" id="type-filter">
                                <option value="all">–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è</option>
                                <option value="incoming">–í—Ö–æ–¥—è—â–∏–µ</option>
                                <option value="outgoing">–ò—Å—Ö–æ–¥—è—â–∏–µ</option>
                                <option value="unread">–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</label>
                            <select class="form-control" id="priority-filter">
                                <option value="all">–í—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã</option>
                                <option value="urgent">–°—Ä–æ—á–Ω—ã–π</option>
                                <option value="high">–í—ã—Å–æ–∫–∏–π</option>
                                <option value="normal">–û–±—ã—á–Ω—ã–π</option>
                                <option value="low">–ù–∏–∑–∫–∏–π</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</label>
                            <select class="form-control" id="specialization-filter">
                                <option value="all">–í—Å–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è</option>
                                ${this.specializations.map(spec => 
                                    `<option value="${spec}">${this.getSpecializationLabel(spec)}</option>` 
                                ).join('')}
                            </select>
                        </div>
                    </div>
                    <div class="search-box">
                        <input type="text" id="search-messages" class="form-control" placeholder="üîç –ü–æ–∏—Å–∫ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º...">
                    </div>
                </div>

                <div class="messages-stats">
                    <div class="stat-card">
                        <span class="stat-number">${this.getStats().total}</span>
                        <span class="stat-label">–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π</span>
                    </div>
                    <div class="stat-card">
                        <span class="stat-number">${this.getStats().unread}</span>
                        <span class="stat-label">–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ</span>
                    </div>
                    <div class="stat-card">
                        <span class="stat-number">${this.getStats().highPriority}</span>
                        <span class="stat-label">–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç</span>
                    </div>
                    <div class="stat-card">
                        <span class="stat-number">${this.getStats().toMe}</span>
                        <span class="stat-label">–ê–¥—Ä–µ—Å–æ–≤–∞–Ω—ã –º–Ω–µ</span>
                    </div>
                </div>

                <div class="messages-container">
                    <div id="messages-list" class="messages-list">
                        <div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...</div>
                    </div>
                </div>
            </div>

            <!-- New Message Modal -->
            <div id="new-message-modal" class="modal" style="display: none;">
                <div class="modal-content large">
                    <div class="modal-header">
                        <h3>‚úâÔ∏è –ù–æ–≤–æ–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</h3>
                        <button class="close-modal">&times;</button>
                    </div>
                    <div class="modal-body">
                        <form id="new-message-form">
                            <div class="form-grid">
                                <div class="form-group">
                                    <label>–ö–æ–º—É (—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è):</label>
                                    <select class="form-control" name="toSpecialization" required>
                                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é</option>
                                        ${this.specializations.map(spec => 
                                            `<option value="${spec}">${this.getSpecializationLabel(spec)}</option>` 
                                        ).join('')}
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label>–ò–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∞–¥–º–∏–Ω—É:</label>
                                    <select class="form-control" name="toAdmin">
                                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</option>
                                        <option value="maria">–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞ (Frontend/Backend)</option>
                                        <option value="ivan">–ò–≤–∞–Ω –°–∏–¥–æ—Ä–æ–≤ (Backend)</option>
                                        <option value="olga">–û–ª—å–≥–∞ –ö—É–∑–Ω–µ—Ü–æ–≤–∞ (Design)</option>
                                        <option value="dmitry">–î–º–∏—Ç—Ä–∏–π –°–º–∏—Ä–Ω–æ–≤ (Analytics)</option>
                                        <option value="serg">–°–µ—Ä–≥–µ–π –í–∞—Å–∏–ª—å–µ–≤ (DevOps)</option>
                                    </select>
                                </div>
                            </div>
                            <div class="form-group">
                                <label>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</label>
                                <select class="form-control" name="priority" required>
                                    <option value="low">–ù–∏–∑–∫–∏–π</option>
                                    <option value="normal" selected>–û–±—ã—á–Ω—ã–π</option>
                                    <option value="high">–í—ã—Å–æ–∫–∏–π</option>
                                    <option value="urgent">–°—Ä–æ—á–Ω—ã–π</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label>–¢–µ–º–∞:</label>
                                <input type="text" class="form-control" name="subject" required 
                                       placeholder="–ö—Ä–∞—Ç–∫–∞—è —Ç–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏—è">
                            </div>
                            <div class="form-group">
                                <label>–°–æ–æ–±—â–µ–Ω–∏–µ:</label>
                                <textarea class="form-control" name="message" rows="6" 
                                          placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è..." required></textarea>
                            </div>
                            <div class="form-group">
                                <label>
                                    <input type="checkbox" name="important">
                                    ‚ùó –í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤—ã–¥–µ–ª–µ–Ω–∏–µ)
                                </label>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" id="cancel-message">–û—Ç–º–µ–Ω–∞</button>
                        <button class="btn btn-primary" id="send-message">üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</button>
                    </div>
                </div>
            </div>
        `;

        this.setupEventListeners();
    }

    setupEventListeners() {
        // Filters
        this.querySelector('#type-filter').addEventListener('change', (e) => {
            this.filters.type = e.target.value;
            this.renderMessages();
        });
        
        this.querySelector('#priority-filter').addEventListener('change', (e) => {
            this.filters.priority = e.target.value;
            this.renderMessages();
        });
        
        this.querySelector('#specialization-filter').addEventListener('change', (e) => {
            this.filters.specialization = e.target.value;
            this.renderMessages();
        });
        
        this.querySelector('#search-messages').addEventListener('input', (e) => {
            this.filters.search = e.target.value;
            this.renderMessages();
        });

        // New message modal
        this.querySelector('#new-message-btn').addEventListener('click', () => this.showNewMessageModal());
        this.querySelector('.close-modal').addEventListener('click', () => this.hideModal());
        this.querySelector('#cancel-message').addEventListener('click', () => this.hideModal());
        this.querySelector('#send-message').addEventListener('click', () => this.sendMessage());
    }

    async loadMessages() {
        try {
            const response = await fetch(`${window.adminDashboard.apiBase}/admin/messages/internal`);
            const data = await response.json();
            this.messages = data.messages;
            this.renderMessages();
        } catch (error) {
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: ' + error.message);
        }
    }

    renderMessages() {
        const filteredMessages = this.filterMessages();
        const messagesList = this.querySelector('#messages-list');
        
        if (filteredMessages.length === 0) {
            messagesList.innerHTML = '<div class="no-data">–°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
            return;
        }

        messagesList.innerHTML = filteredMessages.map(msg => `
            <div class="message-item ${!msg.read ? 'unread' : ''} ${msg.priority === 'urgent' ? 'urgent' : ''}" data-id="${msg.id}">
                <div class="message-header">
                    <div class="message-sender">
                        <strong>${msg.from.name}</strong>
                        <span class="message-role">${this.getRoleLabel(msg.from.role)}</span>
                    </div>
                    <div class="message-meta">
                        <span class="badge priority-${msg.priority}">${this.getPriorityLabel(msg.priority)}</span>
                        <span class="badge specialization-${msg.toSpecialization}">${this.getSpecializationLabel(msg.toSpecialization)}</span>
                        ${msg.toAdmin ? `<span class="badge">üë§ ${msg.toAdmin.name}</span>` : ''}
                        <span class="message-time">${new Date(msg.createdAt).toLocaleString()}</span>
                    </div>
                </div>
                <div class="message-subject">
                    <h4>${msg.subject}</h4>
                    ${!msg.read ? '<span class="unread-indicator">‚óè</span>' : ''}
                </div>
                <div class="message-body">
                    <p>${msg.message}</p>
                    ${msg.attachments && msg.attachments.length > 0 ? `
                        <div class="message-attachments">
                            <strong>–í–ª–æ–∂–µ–Ω–∏—è:</strong>
                            ${msg.attachments.map(att => 
                                `<span class="attachment">üìé ${att.name} (${att.size})</span>` 
                            ).join('')}
                        </div>
                    ` : ''}
                </div>
                <div class="message-footer">
                    <div class="message-actions">
                        ${!msg.read ? `
                            <button class="btn-link mark-read">–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º</button>
                        ` : ` 
                            <span class="read-info">üëÅÔ∏è –ü—Ä–æ—á–∏—Ç–∞–Ω–æ ${new Date(msg.readAt).toLocaleString()}</span>
                        `}
                        <button class="btn-link reply-btn">‚Ü©Ô∏è –û—Ç–≤–µ—Ç–∏—Ç—å</button>
                        <button class="btn-link">üí¨ ${msg.replies || 0} –æ—Ç–≤–µ—Ç–æ–≤</button>
                    </div>
                </div>
            </div>
        `).join('');

        // Add event listeners
        messagesList.querySelectorAll('.mark-read').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                const messageId = e.target.closest('.message-item').dataset.id;
                this.markAsRead(messageId);
            });
        });

        messagesList.querySelectorAll('.reply-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                const messageId = e.target.closest('.message-item').dataset.id;
                this.replyToMessage(messageId);
            });
        });
    }

    filterMessages() {
        return this.messages.filter(msg => {
            const matchesType = this.filters.type === 'all' || 
                (this.filters.type === 'incoming' && msg.from.id !== this.currentUser.id) ||
                (this.filters.type === 'outgoing' && msg.from.id === this.currentUser.id) ||
                (this.filters.type === 'unread' && !msg.read);
                
            const matchesPriority = this.filters.priority === 'all' || msg.priority === this.filters.priority;
            const matchesSpecialization = this.filters.specialization === 'all' || msg.toSpecialization === this.filters.specialization;
            const matchesSearch = !this.filters.search || 
                (msg.subject && msg.subject.toLowerCase().includes(this.filters.search.toLowerCase())) ||
                (msg.message && msg.message.toLowerCase().includes(this.filters.search.toLowerCase()));
            
            // Check if user has access to this message based on role
            const hasAccess = this.checkMessageAccess(msg);
            
            return matchesType && matchesPriority && matchesSpecialization && matchesSearch && hasAccess;
        });
    }

    checkMessageAccess(message) {
        const roleHierarchy = {
            'director': ['frontend', 'backend', 'design', 'devops', 'analytics', 'management'],
            'team-lead': ['frontend', 'backend', 'design'],
            'developer': ['frontend', 'backend'],
            'designer': ['design'],
            'analyst': ['analytics'],
            'devops': ['devops']
        };

        // Director can read everything
        if (this.currentUser.role === 'director') return true;
        
        // Check if user's role has access to this specialization
        const userSpecializations = roleHierarchy[this.currentUser.role] || [];
        return userSpecializations.includes(message.toSpecialization) ||
               (message.from && message.from.id === this.currentUser.id);
    }

    getSpecializationLabel(spec) {
        const labels = {
            'frontend': 'Frontend',
            'backend': 'Backend', 
            'design': '–î–∏–∑–∞–π–Ω',
            'devops': 'DevOps',
            'analytics': '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
            'management': '–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç'
        };
        return labels[spec] || spec;
    }

    getRoleLabel(role) {
        const labels = {
            'director': '–î–∏—Ä–µ–∫—Ç–æ—Ä',
            'team-lead': '–¢–∏–º–ª–∏–¥',
            'developer': '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
            'designer': '–î–∏–∑–∞–π–Ω–µ—Ä',
            'analyst': '–ê–Ω–∞–ª–∏—Ç–∏–∫',
            'devops': 'DevOps'
        };
        return labels[role] || role;
    }

    getPriorityLabel(priority) {
        const labels = {
            'urgent': '–°—Ä–æ—á–Ω—ã–π',
            'high': '–í—ã—Å–æ–∫–∏–π',
            'normal': '–û–±—ã—á–Ω—ã–π',
            'low': '–ù–∏–∑–∫–∏–π'
        };
        return labels[priority] || priority;
    }

    getStats() {
        const accessibleMessages = this.messages.filter(msg => this.checkMessageAccess(msg));
        return {
            total: accessibleMessages.length,
            unread: accessibleMessages.filter(msg => !msg.read).length,
            highPriority: accessibleMessages.filter(msg => 
                msg.priority === 'high' || msg.priority === 'urgent'
            ).length,
            toMe: accessibleMessages.filter(msg => 
                (msg.toAdmin && msg.toAdmin.id === this.currentUser.id) ||
                (msg.toSpecialization && this.currentUser.specialization?.includes(msg.toSpecialization))
            ).length
        };
    }

    showNewMessageModal() {
        this.querySelector('#new-message-modal').style.display = 'block';
    }

    hideModal() {
        this.querySelector('#new-message-modal').style.display = 'none';
        this.querySelector('#new-message-form').reset();
    }

    async sendMessage() {
        const form = this.querySelector('#new-message-form');
        const formData = new FormData(form);
        
        const messageData = {
            toSpecialization: formData.get('toSpecialization'),
            toAdmin: formData.get('toAdmin') ? { 
                id: formData.get('toAdmin'),
                name: this.getAdminName(formData.get('toAdmin'))
            } : null,
            priority: formData.get('priority'),
            subject: formData.get('subject'),
            message: formData.get('message'),
            important: formData.get('important') === 'on',
            from: {
                id: this.currentUser.id,
                name: this.currentUser.name,
                role: this.currentUser.role
            },
            createdAt: new Date().toISOString()
        };

        try {
            const response = await fetch(`${window.adminDashboard.apiBase}/admin/messages/internal`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(messageData)
            });
            
            if (response.ok) {
                this.hideModal();
                this.loadMessages(); // Reload messages
                this.showSuccess('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
            } else {
                const error = await response.json();
                throw new Error(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
            }
        } catch (error) {
            this.showError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ' + error.message);
        }
    }

    getAdminName(adminId) {
        const admins = {
            'maria': '–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞',
            'ivan': '–ò–≤–∞–Ω –°–∏–¥–æ—Ä–æ–≤',
            'olga': '–û–ª—å–≥–∞ –ö—É–∑–Ω–µ—Ü–æ–≤–∞',
            'dmitry': '–î–º–∏—Ç—Ä–∏–π –°–º–∏—Ä–Ω–æ–≤',
            'serg': '–°–µ—Ä–≥–µ–π –í–∞—Å–∏–ª—å–µ–≤',
            'alex': '–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤'
        };
        return admins[adminId] || adminId;
    }

    markAsRead(messageId) {
        const message = this.messages.find(m => m.id == messageId);
        if (message) {
            message.read = true;
            message.readAt = new Date().toISOString();
            this.renderMessages();
            this.showSuccess('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ');
            
            // Update server
            fetch(`${window.adminDashboard.apiBase}/admin/messages/${messageId}/read`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ read: true })
            }).catch(error => {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏—è:', error);
            });
        }
    }

    replyToMessage(messageId) {
        const message = this.messages.find(m => m.id == messageId);
        if (message) {
            this.showNewMessageModal();
            const form = this.querySelector('#new-message-form');
            form.querySelector('[name="toSpecialization"]').value = message.from.specialization?.[0] || '';
            form.querySelector('[name="toAdmin"]').value = message.from.id || '';
            form.querySelector('[name="subject"]').value = `Re: ${message.subject.replace(/^Re:\s*/i, '')}`;
            form.querySelector('[name="message"]').value = `\n\n--- Original Message ---\n${message.message}`;
            form.querySelector('[name="message"]').focus();
        }
    }

    showSuccess(message) {
        // –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const toast = document.createElement('div');
        toast.className = 'toast success';
        toast.textContent = message;
        document.body.appendChild(toast);
        setTimeout(() => toast.remove(), 3000);
    }

    showError(message) {
        // –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const toast = document.createElement('div');
        toast.className = 'toast error';
        toast.textContent = message;
        document.body.appendChild(toast);
        setTimeout(() => toast.remove(), 5000);
    }
}

// Register the custom element
if (!customElements.get('messages-panel')) {
    customElements.define('messages-panel', MessagesPanel);
}

---

// admin-dashboard/components/metrics.js
// –û–ø–∏—Å–∞–Ω–∏–µ: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã
// –õ–æ–≥–∏–∫–∞: –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è
// –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: HTMLElement, Chart.js, fetch API
// –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏, –≥—Ä–∞—Ñ–∏–∫–∏ –∏ —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

class MetricsPanel extends HTMLElement {
    constructor() {
        super();
        this.metrics = {};
        this.chart = null;
        this.updateInterval = null;
        this.lastNetworkData = { received: 0, sent: 0 };
    }

    connectedCallback() {
        this.render();
        this.loadMetrics();
        this.startAutoUpdate();
    }

    disconnectedCallback() {
        this.stopAutoUpdate();
        if (this.chart) {
            this.chart.destroy();
        }
    }

    render() {
        this.innerHTML = `
            <div class="card">
                <div class="metrics-header">
                    <h2>üìä –ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã</h2>
                    <div class="metrics-controls">
                        <button class="btn btn-secondary" id="refresh-metrics">
                            üîÑ –û–±–Ω–æ–≤–∏—Ç—å
                        </button>
                        <label class="auto-refresh">
                            <input type="checkbox" id="auto-refresh" checked>
                            –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (10 —Å–µ–∫)
                        </label>
                    </div>
                </div>
                <p>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</p>

                <!-- System Health Cards -->
                <div class="metrics-grid">
                    <div class="metric-card health">
                        <div class="metric-icon">üñ•Ô∏è</div>
                        <div class="metric-content">
                            <div class="metric-value" id="cpu-usage">0%</div>
                            <div class="metric-label">–ó–∞–≥—Ä—É–∑–∫–∞ CPU</div>
                            <div class="metric-trend" id="cpu-trend">‚Üí</div>
                        </div>
                    </div>
                    
                    <div class="metric-card health">
                        <div class="metric-icon">üß†</div>
                        <div class="metric-content">
                            <div class="metric-value" id="memory-usage">0%</div>
                            <div class="metric-label">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏</div>
                            <div class="metric-trend" id="memory-trend">‚Üí</div>
                        </div>
                    </div>
                    
                    <div class="metric-card health">
                        <div class="metric-icon">üíæ</div>
                        <div class="metric-content">
                            <div class="metric-value" id="disk-usage">0%</div>
                            <div class="metric-label">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞</div>
                            <div class="metric-trend" id="disk-trend">‚Üí</div>
                        </div>
                    </div>
                    
                    <div class="metric-card health">
                        <div class="metric-icon">üåê</div>
                        <div class="metric-content">
                            <div class="metric-value" id="network-usage">0 KB/s</div>
                            <div class="metric-label">–°–µ—Ç—å</div>
                            <div class="metric-trend" id="network-trend">‚Üí</div>
                        </div>
                    </div>
                </div>

                <!-- Application Metrics -->
                <div class="metrics-grid">
                    <div class="metric-card app">
                        <div class="metric-icon">üë•</div>
                        <div class="metric-content">
                            <div class="metric-value" id="users-online">0</div>
                            <div class="metric-label">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–Ω–ª–∞–π–Ω</div>
                            <div class="metric-detail" id="users-detail">0 –¥–µ—Å–∫—Ç–æ–ø / 0 –º–æ–±–∏–ª—å–Ω—ã–µ</div>
                        </div>
                    </div>
                    
                    <div class="metric-card app">
                        <div class="metric-icon">üìã</div>
                        <div class="metric-content">
                            <div class="metric-value" id="queue-waiting">0</div>
                            <div class="metric-label">–ó–∞–¥–∞–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏</div>
                            <div class="metric-detail">
                                <span id="queue-active">0</span> –∞–∫—Ç–∏–≤–Ω—ã—Ö / 
                                <span id="queue-completed">0</span> –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
                            </div>
                        </div>
                    </div>
                    
                    <div class="metric-card app">
                        <div class="metric-icon">üìà</div>
                        <div class="metric-content">
                            <div class="metric-value" id="requests-today">0</div>
                            <div class="metric-label">–ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è</div>
                            <div class="metric-detail" id="requests-rate">0/–º–∏–Ω</div>
                        </div>
                    </div>
                    
                    <div class="metric-card app">
                        <div class="metric-icon">üîÑ</div>
                        <div class="metric-content">
                            <div class="metric-value" id="uptime">0–¥ 0—á</div>
                            <div class="metric-label">–ê–ø—Ç–∞–π–º —Å–∏—Å—Ç–µ–º—ã</div>
                            <div class="metric-detail" id="last-restart">–°–µ–≥–æ–¥–Ω—è</div>
                        </div>
                    </div>
                </div>

                <!-- Charts Section -->
                <div class="charts-section">
                    <div class="chart-container">
                        <h3>üìà –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å</h3>
                        <canvas id="system-chart" width="400" height="200"></canvas>
                    </div>
                    
                    <div class="chart-container">
                        <h3>üë• –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h3>
                        <canvas id="users-chart" width="400" height="200"></canvas>
                    </div>
                </div>

                <!-- Services Status -->
                <div class="services-section">
                    <h3>üîß –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤</h3>
                    <div class="services-grid" id="services-status">
                        <div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...</div>
                    </div>
                </div>

                <!-- Alerts -->
                <div class="alerts-section" id="alerts-container" style="display: none;">
                    <h3>‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è</h3>
                    <div id="alerts-list"></div>
                </div>
            </div>
        `;

        this.setupEventListeners();
        this.initializeCharts();
    }

    setupEventListeners() {
        this.querySelector('#refresh-metrics').addEventListener('click', () => this.loadMetrics());
        
        this.querySelector('#auto-refresh').addEventListener('change', (e) => {
            if (e.target.checked) {
                this.startAutoUpdate();
            } else {
                this.stopAutoUpdate();
            }
        });
    }

    initializeCharts() {
        // Check if Chart is available
        if (typeof Chart === 'undefined') {
            console.warn('Chart.js is not loaded. Charts will not be displayed.');
            return;
        }

        const systemCtx = this.querySelector('#system-chart')?.getContext('2d');
        const usersCtx = this.querySelector('#users-chart')?.getContext('2d');

        if (!systemCtx || !usersCtx) {
            console.warn('Could not initialize charts: canvas elements not found');
            return;
        }

        // System metrics chart
        this.systemChart = new Chart(systemCtx, {
            type: 'line',
            data: {
                labels: Array(12).fill('').map((_, i) => {
                    const d = new Date();
                    d.setMinutes(d.getMinutes() - (60 - i * 5));
                    return d.getHours() + ':' + d.getMinutes().toString().padStart(2, '0');
                }),
                datasets: [
                    {
                        label: 'CPU %',
                        data: Array(12).fill(0),
                        borderColor: '#3b82f6',
                        backgroundColor: 'rgba(59, 130, 246, 0.1)',
                        tension: 0.4,
                        fill: true,
                        borderWidth: 2,
                        pointRadius: 0
                    },
                    {
                        label: '–ü–∞–º—è—Ç—å %',
                        data: Array(12).fill(0),
                        borderColor: '#10b981',
                        backgroundColor: 'rgba(16, 185, 129, 0.1)',
                        tension: 0.4,
                        fill: true,
                        borderWidth: 2,
                        pointRadius: 0
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'top',
                        labels: {
                            usePointStyle: true,
                            padding: 20
                        }
                    },
                    tooltip: {
                        mode: 'index',
                        intersect: false
                    }
                },
                scales: {
                    x: {
                        grid: {
                            display: false
                        },
                        ticks: {
                            maxRotation: 0,
                            autoSkipPadding: 20
                        }
                    },
                    y: {
                        beginAtZero: true,
                        max: 100,
                        grid: {
                            color: 'rgba(0, 0, 0, 0.05)'
                        },
                        ticks: {
                            callback: function(value) {
                                return value + '%';
                            }
                        }
                    }
                },
                interaction: {
                    intersect: false,
                    mode: 'index'
                },
                animation: {
                    duration: 0
                },
                elements: {
                    line: {
                        borderJoinStyle: 'round'
                    }
                }
            }
        });

        // Users activity chart
        this.usersChart = new Chart(usersCtx, {
            type: 'bar',
            data: {
                labels: ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'],
                datasets: [
                    {
                        label: '–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
                        data: [65, 59, 80, 81, 56, 55, 40],
                        backgroundColor: 'rgba(59, 130, 246, 0.8)',
                        borderRadius: 4,
                        borderSkipped: false
                    },
                    {
                        label: '–ù–æ–≤—ã–µ –∑–∞–¥–∞—á–∏',
                        data: [28, 48, 40, 19, 86, 27, 90],
                        backgroundColor: 'rgba(16, 185, 129, 0.8)',
                        borderRadius: 4,
                        borderSkipped: false
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'top',
                        labels: {
                            usePointStyle: true,
                            padding: 20
                        }
                    },
                    tooltip: {
                        mode: 'index',
                        intersect: false
                    }
                },
                scales: {
                    x: {
                        grid: {
                            display: false
                        }
                    },
                    y: {
                        beginAtZero: true,
                        grid: {
                            color: 'rgba(0, 0, 0, 0.05)'
                        },
                        ticks: {
                            precision: 0
                        }
                    }
                },
                interaction: {
                    intersect: false,
                    mode: 'index'
                }
            }
        });
    }

    startAutoUpdate() {
        this.stopAutoUpdate();
        this.updateInterval = setInterval(() => {
            this.loadMetrics();
        }, 10000); // Update every 10 seconds
    }

    stopAutoUpdate() {
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
            this.updateInterval = null;
        }
    }

    async loadMetrics() {
        try {
            const [metricsResponse, servicesResponse] = await Promise.all([
                fetch(`${window.adminDashboard.apiBase}/admin/metrics`),
                fetch(`${window.adminDashboard.apiBase}/admin/services`)
            ]);
            
            if (!metricsResponse.ok || !servicesResponse.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç—Ä–∏–∫');
            }
            
            const metrics = await metricsResponse.json();
            const services = await servicesResponse.json();
            
            this.metrics = { ...metrics, services };
            this.updateMetricsDisplay();
            this.updateCharts();
            this.updateServicesStatus();
            this.checkAlerts();
            
        } catch (error) {
            console.error('Error loading metrics:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç—Ä–∏–∫: ' + error.message);
        }
    }

    updateMetricsDisplay() {
        // System health metrics
        if (this.metrics.cpu) {
            this.querySelector('#cpu-usage').textContent = 
                Math.round(this.metrics.cpu.usage) + '%';
        }

        if (this.metrics.memory) {
            const memoryUsed = (this.metrics.memory.used / this.metrics.memory.total * 100).toFixed(1);
            this.querySelector('#memory-usage').textContent = memoryUsed + '%';
        }

        if (this.metrics.disk) {
            const diskUsed = (this.metrics.disk.used / this.metrics.disk.total * 100).toFixed(1);
            this.querySelector('#disk-usage').textContent = diskUsed + '%';
        }

        // Network usage
        if (this.metrics.network) {
            const now = Date.now();
            const elapsed = (now - (this.lastNetworkTime || now)) / 1000; // in seconds
            
            if (this.lastNetworkTime) {
                const receivedDiff = this.metrics.network.received - this.lastNetworkData.received;
                const sentDiff = this.metrics.network.sent - this.lastNetworkData.sent;
                
                const receivedSpeed = (receivedDiff / elapsed).toFixed(1);
                const sentSpeed = (sentDiff / elapsed).toFixed(1);
                
                this.querySelector('#network-usage').textContent = 
                    `‚ñº${this.formatBytes(receivedDiff)}/s ‚ñ≤${this.formatBytes(sentDiff)}/s`;
            }
            
            this.lastNetworkData = {
                received: this.metrics.network.received,
                sent: this.metrics.network.sent
            };
            this.lastNetworkTime = now;
        }

        // Application metrics
        if (this.metrics.users) {
            this.querySelector('#users-online').textContent = this.metrics.users.online || 0;
            this.querySelector('#users-detail').textContent = 
                `${this.metrics.users.devices?.desktop || 0} –¥–µ—Å–∫—Ç–æ–ø / ${this.metrics.users.devices?.mobile || 0} –º–æ–±–∏–ª—å–Ω—ã–µ`;
        }

        if (this.metrics.queue) {
            this.querySelector('#queue-waiting').textContent = this.metrics.queue.waiting || 0;
            this.querySelector('#queue-active').textContent = this.metrics.queue.active || 0;
            this.querySelector('#queue-completed').textContent = this.metrics.queue.completed || 0;
        }

        if (this.metrics.requests) {
            this.querySelector('#requests-today').textContent = this.metrics.requests.today || 0;
            this.querySelector('#requests-rate').textContent = 
                `${Math.round((this.metrics.requests.today || 0) / 24 / 60)}/–º–∏–Ω`;
        }

        // Uptime
        if (this.metrics.uptime) {
            const days = Math.floor(this.metrics.uptime / 86400);
            const hours = Math.floor((this.metrics.uptime % 86400) / 3600);
            this.querySelector('#uptime').textContent = `${days}–¥ ${hours}—á`;
            
            if (this.metrics.lastRestart) {
                const lastRestart = new Date(this.metrics.lastRestart);
                this.querySelector('#last-restart').textContent = 
                    lastRestart.toLocaleDateString() + ' ' + lastRestart.toLocaleTimeString();
            }
        }

        // Update trends
        this.updateTrends();
    }

    formatBytes(bytes, decimals = 1) {
        if (bytes === 0) return '0 B';
        const k = 1024;
        const dm = decimals < 0 ? 0 : decimals;
        const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
    }

    updateTrends() {
        // Simulate trend indicators
        const trends = ['‚ÜóÔ∏è', '‚ÜòÔ∏è', '‚Üí'];
        const randomTrend = () => trends[Math.floor(Math.random() * trends.length)];
        
        this.querySelector('#cpu-trend').textContent = randomTrend();
        this.querySelector('#memory-trend').textContent = randomTrend();
        this.querySelector('#disk-trend').textContent = randomTrend();
        this.querySelector('#network-trend').textContent = randomTrend();
    }

    updateCharts() {
        if (!this.systemChart || !this.usersChart) return;

        // Update system chart with new data point
        const now = new Date();
        const timeLabel = now.getHours() + ':' + now.getMinutes().toString().padStart(2, '0');
        
        // Shift data to the left
        this.systemChart.data.labels.shift();
        this.systemChart.data.labels.push(timeLabel);
        
        // Add new data points
        this.systemChart.data.datasets[0].data.shift();
        this.systemChart.data.datasets[1].data.shift();
        
        this.systemChart.data.datasets[0].data.push(
            this.metrics.cpu?.usage || Math.random() * 30 + 20
        );
        this.systemChart.data.datasets[1].data.push(
            this.metrics.memory ? (this.metrics.memory.used / this.metrics.memory.total * 100) : (Math.random() * 30 + 20)
        );
        
        this.systemChart.update('none');
    }

    updateServicesStatus() {
        const servicesContainer = this.querySelector('#services-status');
        
        if (!this.metrics.services?.length) {
            servicesContainer.innerHTML = '<div class="no-data">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ—Ä–≤–∏—Å–∞—Ö</div>';
            return;
        }

        servicesContainer.innerHTML = this.metrics.services.map(service => `
            <div class="service-item ${service.status === 'running' ? 'running' : 'stopped'}">
                <div class="service-icon">
                    ${service.status === 'running' ? 'üü¢' : 'üî¥'}
                </div>
                <div class="service-info">
                    <div class="service-name">${service.name || service.id}</div>
                    <div class="service-status">${this.getServiceStatusLabel(service.status)}</div>
                    <div class="service-uptime">${service.uptime ? '–ê–ø—Ç–∞–π–º: ' + service.uptime : ''}</div>
                </div>
                <div class="service-actions">
                    <button class="btn-icon" data-service-id="${service.id}" data-action="restart">
                        üîÑ
                    </button>
                </div>
            </div>
        `).join('');

        // Add event listeners to service action buttons
        servicesContainer.querySelectorAll('.service-actions .btn-icon').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const serviceId = e.currentTarget.dataset.serviceId;
                const action = e.currentTarget.dataset.action;
                if (action === 'restart') {
                    this.restartService(serviceId);
                }
            });
        });
    }

    getServiceStatusLabel(status) {
        const labels = {
            'running': '–ó–∞–ø—É—â–µ–Ω',
            'stopped': '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
            'restarting': '–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è',
            'starting': '–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è',
            'error': '–û—à–∏–±–∫–∞',
            'degraded': '–†–∞–±–æ—Ç–∞–µ—Ç —Å –æ—à–∏–±–∫–∞–º–∏'
        };
        return labels[status] || status;
    }

    checkAlerts() {
        const alerts = [];
        const alertsContainer = this.querySelector('#alerts-container');
        const alertsList = this.querySelector('#alerts-list');

        // Check CPU usage
        if (this.metrics.cpu?.usage > 90) {
            alerts.push({
                type: 'critical',
                message: '–í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU',
                details: `–¢–µ–∫—É—â–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: ${Math.round(this.metrics.cpu.usage)}%`
            });
        } else if (this.metrics.cpu?.usage > 75) {
            alerts.push({
                type: 'warning',
                message: '–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU',
                details: `–¢–µ–∫—É—â–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: ${Math.round(this.metrics.cpu.usage)}%`
            });
        }

        // Check memory usage
        if (this.metrics.memory) {
            const memoryUsage = (this.metrics.memory.used / this.metrics.memory.total) * 100;
            if (memoryUsage > 90) {
                alerts.push({
                    type: 'critical',
                    message: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏',
                    details: `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${Math.round(memoryUsage)}%`
                });
            } else if (memoryUsage > 80) {
                alerts.push({
                    type: 'warning',
                    message: '–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏',
                    details: `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${Math.round(memoryUsage)}%`
                });
            }
        }

        // Check disk space
        if (this.metrics.disk) {
            const diskUsage = (this.metrics.disk.used / this.metrics.disk.total) * 100;
            if (diskUsage > 90) {
                alerts.push({
                    type: 'critical',
                    message: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ',
                    details: `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${Math.round(diskUsage)}%`
                });
            } else if (diskUsage > 80) {
                alerts.push({
                    type: 'warning',
                    message: '–ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ',
                    details: `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${Math.round(diskUsage)}%`
                });
            }
        }

        // Check for stopped services
        if (Array.isArray(this.metrics.services)) {
            const stoppedServices = this.metrics.services.filter(s => s.status !== 'running');
            if (stoppedServices.length > 0) {
                alerts.push({
                    type: stoppedServices.some(s => s.critical) ? 'critical' : 'warning',
                    message: `–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–µ—Ä–≤–∏—Å–æ–≤: ${stoppedServices.length}`,
                    details: stoppedServices.map(s => s.name || s.id).join(', ')
                });
            }
        }

        // Display alerts
        if (alerts.length > 0) {
            alertsList.innerHTML = alerts.map(alert => `
                <div class="alert alert-${alert.type}">
                    <div class="alert-icon">${alert.type === 'critical' ? 'üö®' : '‚ö†Ô∏è'}</div>
                    <div class="alert-content">
                        <div class="alert-title">${alert.message}</div>
                        ${alert.details ? `<div class="alert-details">${alert.details}</div>` : ''}
                    </div>
                </div>
            `).join('');
            alertsContainer.style.display = 'block';
        } else {
            alertsContainer.style.display = 'none';
        }
    }

    async restartService(serviceId) {
        if (!serviceId) return;
        
        try {
            // Show loading state
            const serviceElement = this.querySelector(`[data-service-id="${serviceId}"]`).closest('.service-item');
            if (serviceElement) {
                serviceElement.classList.add('restarting');
            }
            
            const response = await fetch(`${window.adminDashboard.apiBase}/admin/services/${serviceId}/restart`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            });
            
            if (response.ok) {
                this.showMessage(`–°–µ—Ä–≤–∏—Å ${serviceId} –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...`, 'success');
                // Reload metrics after a short delay
                setTimeout(() => this.loadMetrics(), 2000);
            } else {
                throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
            }
        } catch (error) {
            console.error(`Error restarting service ${serviceId}:`, error);
            this.showMessage(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: ${error.message}`, 'error');
            
            // Reset loading state
            const serviceElement = this.querySelector(`[data-service-id="${serviceId}"]`)?.closest('.service-item');
            if (serviceElement) {
                serviceElement.classList.remove('restarting');
            }
        }
    }

    showMessage(text, type = 'info') {
        // Remove existing toast if any
        const existingToast = document.querySelector('.toast-message');
        if (existingToast) {
            document.body.removeChild(existingToast);
        }

        // Create new toast
        const toast = document.createElement('div');
        toast.className = `toast-message toast-${type}`;
        toast.textContent = text;
        
        // Style the toast
        toast.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 12px 20px;
            background: ${type === 'success' ? '#10b981' : type === 'error' ? '#ef4444' : '#3b82f6'};
            color: white;
            border-radius: 6px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            z-index: 1000;
            max-width: 320px;
            animation: slideIn 0.3s ease-out;
        `;
        
        // Add keyframe animation
        const style = document.createElement('style');
        style.textContent = `
            @keyframes slideIn {
                from { transform: translateX(100%); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
            }
            @keyframes fadeOut {
                from { opacity: 1; }
                to { opacity: 0; }
            }
        `;
        document.head.appendChild(style);
        
        document.body.appendChild(toast);
        
        // Auto-remove after delay
        setTimeout(() => {
            toast.style.animation = 'fadeOut 0.3s ease-out';
            toast.addEventListener('animationend', () => {
                if (document.body.contains(toast)) {
                    document.body.removeChild(toast);
                }
                if (document.head.contains(style)) {
                    document.head.removeChild(style);
                }
            }, { once: true });
        }, 3000);
    }

    showError(message) {
        this.showMessage(message, 'error');
    }
}

// Register the custom element
if (!customElements.get('metrics-panel')) {
    customElements.define('metrics-panel', MetricsPanel);
}

---

// admin-dashboard/components/tickets.js
// –û–ø–∏—Å–∞–Ω–∏–µ: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
// –õ–æ–≥–∏–∫–∞: –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è
// –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: HTMLElement, fetch API
// –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: –†–µ–∞–ª–∏–∑—É–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞–º–∏, –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏

class TicketsPanel extends HTMLElement {
    constructor() {
        super();
        this.tickets = [];
        this.categories = [];
        this.filters = {
            type: 'all',
            status: 'all', 
            priority: 'all',
            category: 'all',
            search: ''
        };
        this.currentUser = 'admin'; // –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    }

    connectedCallback() {
        this.render();
        this.loadData();
    }

    render() {
        this.innerHTML = `
            <div class="card">
                <div class="tickets-header">
                    <h2>üé´ –û–±—Ä–∞—â–µ–Ω–∏—è –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</h2>
                    <div class="header-actions">
                        <button class="btn btn-secondary" id="manage-categories">
                            üè∑Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
                        </button>
                        <button class="btn btn-primary" id="new-ticket">
                            ‚úâÔ∏è –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
                        </button>
                    </div>
                </div>
                <p>–û–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</p>

                <div class="tickets-controls">
                    <div class="filters-grid">
                        <div class="form-group">
                            <label>–¢–∏–ø:</label>
                            <select class="form-control" id="type-filter">
                                <option value="all">–í—Å–µ —Ç–∏–ø—ã</option>
                                <option value="user">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ</option>
                                <option value="system">–°–∏—Å—Ç–µ–º–Ω—ã–µ</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>–°—Ç–∞—Ç—É—Å:</label>
                            <select class="form-control" id="status-filter">
                                <option value="all">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
                                <option value="open">–û—Ç–∫—Ä—ã—Ç—ã–µ</option>
                                <option value="in-progress">–í —Ä–∞–±–æ—Ç–µ</option>
                                <option value="resolved">–†–µ—à–µ–Ω—ã</option>
                                <option value="closed">–ó–∞–∫—Ä—ã—Ç—ã</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</label>
                            <select class="form-control" id="priority-filter">
                                <option value="all">–í—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã</option>
                                <option value="urgent">–°—Ä–æ—á–Ω—ã–π</option>
                                <option value="high">–í—ã—Å–æ–∫–∏–π</option>
                                <option value="medium">–°—Ä–µ–¥–Ω–∏–π</option>
                                <option value="low">–ù–∏–∑–∫–∏–π</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</label>
                            <select class="form-control" id="category-filter">
                                <option value="all">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
                            </select>
                        </div>
                    </div>
                    <div class="search-box">
                        <input type="text" id="search-tickets" class="form-control" placeholder="üîç –ü–æ–∏—Å–∫ –ø–æ –æ–±—Ä–∞—â–µ–Ω–∏—è–º...">
                    </div>
                </div>

                <div class="tickets-stats">
                    <div class="stat-card">
                        <span class="stat-number">${this.getStats().total}</span>
                        <span class="stat-label">–í—Å–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏–π</span>
                    </div>
                    <div class="stat-card">
                        <span class="stat-number">${this.getStats().unread}</span>
                        <span class="stat-label">–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ</span>
                    </div>
                    <div class="stat-card">
                        <span class="stat-number">${this.getStats().open}</span>
                        <span class="stat-label">–û—Ç–∫—Ä—ã—Ç—ã–µ</span>
                    </div>
                    <div class="stat-card">
                        <span class="stat-number">${this.getStats().assignedToMe}</span>
                        <span class="stat-label">–ù–∞–∑–Ω–∞—á–µ–Ω—ã –º–Ω–µ</span>
                    </div>
                </div>

                <div id="tickets-list" class="tickets-list">
                    <div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π...</div>
                </div>
            </div>

            <!-- Categories Modal -->
            <div id="categories-modal" class="modal" style="display: none;">
                <div class="modal-content large">
                    <div class="modal-header">
                        <h3>üè∑Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π</h3>
                        <button class="close-modal">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="categories-list" id="categories-list">
                            <!-- Categories will be rendered here -->
                        </div>
                        <button class="btn btn-primary" id="add-category">‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é</button>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" id="close-categories">–ó–∞–∫—Ä—ã—Ç—å</button>
                    </div>
                </div>
            </div>
        `;

        this.setupEventListeners();
    }

    setupEventListeners() {
        // Filters
        ['type-filter', 'status-filter', 'priority-filter', 'category-filter'].forEach(id => {
            this.querySelector(`#${id}`).addEventListener('change', (e) => {
                this.filters[e.target.id.replace('-filter', '')] = e.target.value;
                this.renderTickets();
            });
        });
        
        this.querySelector('#search-tickets').addEventListener('input', (e) => {
            this.filters.search = e.target.value;
            this.renderTickets();
        });

        // Modals
        this.querySelector('#manage-categories').addEventListener('click', () => this.showCategoriesModal());
        this.querySelector('.close-modal').addEventListener('click', () => this.hideCategoriesModal());
        this.querySelector('#close-categories').addEventListener('click', () => this.hideCategoriesModal());
        this.querySelector('#add-category').addEventListener('click', () => this.addCategory());
    }

    async loadData() {
        try {
            const [ticketsResponse, categoriesResponse] = await Promise.all([
                fetch(`${window.adminDashboard.apiBase}/admin/tickets`),
                fetch(`${window.adminDashboard.apiBase}/admin/tickets/categories`)
            ]);
            
            const ticketsData = await ticketsResponse.json();
            const categoriesData = await categoriesResponse.json();
            
            this.tickets = ticketsData.tickets;
            this.categories = categoriesData.categories;
            
            this.renderCategoryFilter();
            this.renderTickets();
        } catch (error) {
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
        }
    }

    renderCategoryFilter() {
        const categoryFilter = this.querySelector('#category-filter');
        categoryFilter.innerHTML = '<option value="all">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>' +
            this.categories.filter(cat => cat.enabled).map(cat => 
                `<option value="${cat.id}">${cat.name}</option>`
            ).join('');
    }

    renderTickets() {
        const filteredTickets = this.filterTickets();
        const ticketsList = this.querySelector('#tickets-list');
        
        if (filteredTickets.length === 0) {
            ticketsList.innerHTML = '<div class="no-data">–û–±—Ä–∞—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
            return;
        }

        ticketsList.innerHTML = filteredTickets.map(ticket => `
            <div class="ticket-item ${!ticket.readBy.includes(this.currentUser) ? 'unread' : ''}" data-id="${ticket.id}">
                <div class="ticket-header">
                    <div class="ticket-title">
                        <h4>${ticket.subject}</h4>
                        <div class="ticket-meta">
                            <span class="badge type-${ticket.type}">${ticket.type === 'system' ? 'üîî –°–∏—Å—Ç–µ–º–Ω–æ–µ' : 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</span>
                            <span class="badge" style="background: ${ticket.category?.color || '#6b7280'}">${ticket.category?.name || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}</span>
                            <span class="badge priority-${ticket.priority}">${this.getPriorityLabel(ticket.priority)}</span>
                            <span class="badge status-${ticket.status}">${this.getStatusLabel(ticket.status)}</span>
                        </div>
                    </div>
                    <div class="ticket-actions">
                        ${!ticket.readBy.includes(this.currentUser) ? `
                            <button class="btn-icon mark-read" title="–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º">üëÅÔ∏è</button>
                        ` : ''}
                        <button class="btn-icon" title="–û—Ç–≤–µ—Ç–∏—Ç—å">‚Ü©Ô∏è</button>
                        <button class="btn-icon" title="–ù–∞–∑–Ω–∞—á–∏—Ç—å">üë§</button>
                        <button class="btn-icon" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
                    </div>
                </div>
                <div class="ticket-body">
                    <p>${ticket.message}</p>
                    <div class="ticket-details">
                        <span>üìÖ ${new Date(ticket.createdAt).toLocaleString()}</span>
                        <span>üë§ ${ticket.fromUser === 'system' ? '–°–∏—Å—Ç–µ–º–∞' : ticket.fromUser}</span>
                        ${ticket.assignedTo ? `<span>üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–æ: ${ticket.assignedTo}</span>` : ''}
                        ${ticket.readBy && ticket.readBy.length > 0 ? `<span>üëÅÔ∏è –ü—Ä–æ—á–∏—Ç–∞–ª–∏: ${ticket.readBy.join(', ')}</span>` : ''}
                    </div>
                    ${ticket.attachments && ticket.attachments.length > 0 ? `
                        <div class="ticket-attachments">
                            <strong>–í–ª–æ–∂–µ–Ω–∏—è:</strong>
                            ${ticket.attachments.map(att => 
                                `<span class="attachment">üìé ${att.name} (${att.size})</span>` 
                            ).join('')}
                        </div>
                    ` : ''}
                </div>
            </div>
        `).join('');

        // Add event listeners for mark as read
        ticketsList.querySelectorAll('.mark-read').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                const ticketId = e.target.closest('.ticket-item').dataset.id;
                this.markAsRead(ticketId);
            });
        });
    }

    filterTickets() {
        return this.tickets.filter(ticket => {
            const matchesType = this.filters.type === 'all' || ticket.type === this.filters.type;
            const matchesStatus = this.filters.status === 'all' || ticket.status === this.filters.status;
            const matchesPriority = this.filters.priority === 'all' || ticket.priority === this.filters.priority;
            const matchesCategory = this.filters.category === 'all' || 
                                 (ticket.category && ticket.category.id == this.filters.category);
            const matchesSearch = !this.filters.search || 
                (ticket.subject && ticket.subject.toLowerCase().includes(this.filters.search.toLowerCase())) ||
                (ticket.message && ticket.message.toLowerCase().includes(this.filters.search.toLowerCase()));
            
            return matchesType && matchesStatus && matchesPriority && matchesCategory && matchesSearch;
        });
    }

    getPriorityLabel(priority) {
        const labels = {
            'urgent': '–°—Ä–æ—á–Ω—ã–π',
            'high': '–í—ã—Å–æ–∫–∏–π',
            'medium': '–°—Ä–µ–¥–Ω–∏–π',
            'low': '–ù–∏–∑–∫–∏–π'
        };
        return labels[priority] || priority;
    }

    getStatusLabel(status) {
        const labels = {
            'open': '–û—Ç–∫—Ä—ã—Ç–æ',
            'in-progress': '–í —Ä–∞–±–æ—Ç–µ',
            'resolved': '–†–µ—à–µ–Ω–æ',
            'closed': '–ó–∞–∫—Ä—ã—Ç–æ'
        };
        return labels[status] || status;
    }

    getStats() {
        return {
            total: this.tickets.length,
            unread: this.tickets.filter(t => !t.readBy?.includes(this.currentUser)).length,
            open: this.tickets.filter(t => t.status === 'open').length,
            assignedToMe: this.tickets.filter(t => t.assignedTo === this.currentUser).length
        };
    }

    showCategoriesModal() {
        this.renderCategoriesList();
        this.querySelector('#categories-modal').style.display = 'block';
    }

    hideCategoriesModal() {
        this.querySelector('#categories-modal').style.display = 'none';
    }

    renderCategoriesList() {
        const categoriesList = this.querySelector('#categories-list');
        categoriesList.innerHTML = this.categories.map(category => `
            <div class="category-item" data-id="${category.id}">
                <div class="category-info">
                    <span class="category-color" style="background: ${category.color}"></span>
                    <div class="category-details">
                        <strong>${category.name}</strong>
                        <p>${category.description || ''}</p>
                    </div>
                </div>
                <div class="category-actions">
                    <label class="toggle">
                        <input type="checkbox" ${category.enabled ? 'checked' : ''} 
                               onchange="this.closest('tickets-panel').toggleCategory(${category.id}, this.checked)">
                        <span class="slider"></span>
                    </label>
                    <button class="btn-icon" onclick="this.closest('tickets-panel').editCategory(${category.id})">‚úèÔ∏è</button>
                    ${category.id > 5 ? 
                        `<button class="btn-icon" 
                                onclick="this.closest('tickets-panel').deleteCategory(${category.id})">
                            üóëÔ∏è
                        </button>` : 
                        ''
                    }
                </div>
            </div>
        `).join('');
    }

    async toggleCategory(categoryId, enabled) {
        try {
            const response = await fetch(`${window.adminDashboard.apiBase}/admin/tickets/categories` , {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ id: categoryId, enabled })
            });
            
            if (response.ok) {
                const category = this.categories.find(c => c.id === categoryId);
                if (category) category.enabled = enabled;
                this.renderCategoryFilter();
                this.showSuccess('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
            }
        } catch (error) {
            this.showError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ' + error.message);
        }
    }

    addCategory() {
        const name = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:');
        if (name) {
            const newCategory = {
                id: Math.max(0, ...this.categories.map(c => c.id)) + 1,
                name: name,
                color: '#6b7280',
                description: '–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
                enabled: true
            };
            this.categories.push(newCategory);
            this.renderCategoriesList();
            this.renderCategoryFilter();
            this.showSuccess('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞');
        }
    }

    editCategory(categoryId) {
        const category = this.categories.find(c => c.id === categoryId);
        if (category) {
            const newName = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:', category.name);
            if (newName) {
                category.name = newName;
                this.renderCategoriesList();
                this.renderCategoryFilter();
                this.showSuccess('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
            }
        }
    }

    deleteCategory(categoryId) {
        if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é?')) {
            this.categories = this.categories.filter(c => c.id !== categoryId);
            this.renderCategoriesList();
            this.renderCategoryFilter();
            this.showSuccess('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞');
        }
    }

    async markAsRead(ticketId) {
        try {
            const response = await fetch(`${window.adminDashboard.apiBase}/admin/tickets/mark-read` , {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ ticketId })
            });
            
            if (response.ok) {
                const ticket = this.tickets.find(t => t.id == ticketId);
                if (ticket && !ticket.readBy.includes(this.currentUser)) {
                    if (!ticket.readBy) ticket.readBy = [];
                    ticket.readBy.push(this.currentUser);
                }
                this.renderTickets();
                this.showSuccess('–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ');
            }
        } catch (error) {
            this.showError('–û—à–∏–±–∫–∞: ' + error.message);
        }
    }

    showSuccess(message) {
        console.log('‚úÖ ' + message);
    }

    showError(message) {
        console.error('‚ùå ' + message);
    }
}

customElements.define('tickets-panel', TicketsPanel);

---

class TestRunner extends HTMLElement {
    constructor() {
        super();
        this.tests = [
            { id: 'api-connectivity', name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API', description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API —Å–µ—Ä–≤–µ—Ä–∞' },
            { id: 'database-connection', name: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î', description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö' },
            { id: 'queue-status', name: '–°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏', description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞–Ω–∏–π' },
            { id: 'module-suggest', name: '–ú–æ–¥—É–ª—å –ø–æ–¥—Å–∫–∞–∑–æ–∫', description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫' },
            { id: 'module-search', name: '–ú–æ–¥—É–ª—å –ø–æ–∏—Å–∫–∞', description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤' },
            { id: 'module-product', name: '–ú–æ–¥—É–ª—å —Ç–æ–≤–∞—Ä–æ–≤', description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏' },
            { id: 'module-brand', name: '–ú–æ–¥—É–ª—å –±—Ä–µ–Ω–¥–æ–≤', description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—Ä–µ–Ω–¥–∞–º–∏' },
            { id: 'module-seller', name: '–ú–æ–¥—É–ª—å –ø—Ä–æ–¥–∞–≤—Ü–æ–≤', description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–¥–∞–≤—Ü–∞–º–∏' },
            { id: 'full-collection', name: '–ü–æ–ª–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö', description: '–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö' },
            { id: 'performance', name: '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', description: '–ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã' }
        ];
    }

    connectedCallback() {
        this.render();
        this.setupEventListeners();
    }

    render() {
        this.innerHTML = `
            <div class="card">
                <h2>üß™ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</h2>
                <p>–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã</p>
                
                <div class="control-panel">
                    <div class="form-group">
                        <label>–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</label>
                        <div class="mode-selector">
                            <label class="mode-option">
                                <input type="radio" name="test-mode" value="t" checked>
                                <span class="mode-badge test">–¢–µ—Å—Ç–æ–≤—ã–π (t1)</span>
                            </label>
                            <label class="mode-option">
                                <input type="radio" name="test-mode" value="v">
                                <span class="mode-badge prod">–ë–æ–µ–≤–æ–π (v1)</span>
                            </label>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label>–î–µ–π—Å—Ç–≤–∏—è:</label>
                        <div class="test-actions">
                            <button id="run-all-tests" class="btn btn-primary">
                                üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
                            </button>
                            <button id="run-selected-tests" class="btn btn-secondary">
                                ‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
                            </button>
                            <button id="stop-tests" class="btn btn-warning" disabled>
                                ‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                            </button>
                            <button id="export-results" class="btn btn-secondary">
                                üìä –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                            </button>
                        </div>
                    </div>
                </div>
                
                <div class="test-filters">
                    <div class="form-group">
                        <input type="text" id="test-search" class="form-control" placeholder="–ü–æ–∏—Å–∫ —Ç–µ—Å—Ç–æ–≤...">
                    </div>
                    <div class="test-categories">
                        <label><input type="checkbox" name="test-category" value="api" checked> API</label>
                        <label><input type="checkbox" name="test-category" value="database" checked> –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö</label>
                        <label><input type="checkbox" name="test-category" value="modules" checked> –ú–æ–¥—É–ª–∏</label>
                        <label><input type="checkbox" name="test-category" value="performance" checked> –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</label>
                    </div>
                </div>
                
                <div class="test-list">
                    ${this.tests.map(test => `
                        <div class="test-card" data-test-id="${test.id}" data-category="${this.getTestCategory(test.id)}">
                            <div class="test-header">
                                <label class="test-selector">
                                    <input type="checkbox" checked>
                                    <span class="test-name">${test.name}</span>
                                </label>
                                <span class="test-status" id="status-${test.id}">‚è≥ –ù–µ –∑–∞–ø—É—Å–∫–∞–ª—Å—è</span>
                            </div>
                            <div class="test-description">
                                ${test.description}
                            </div>
                            <div class="test-details" id="details-${test.id}" style="display: none;">
                                <div class="test-output" id="output-${test.id}"></div>
                                <div class="test-metrics" id="metrics-${test.id}"></div>
                            </div>
                        </div>
                    `).join('')}
                </div>
                
                <div class="test-summary">
                    <div class="summary-stats">
                        <div class="stat">
                            <span class="stat-value" id="total-tests">${this.tests.length}</span>
                            <span class="stat-label">–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤</span>
                        </div>
                        <div class="stat">
                            <span class="stat-value" id="passed-tests">0</span>
                            <span class="stat-label">–ü—Ä–æ–π–¥–µ–Ω–æ</span>
                        </div>
                        <div class="stat">
                            <span class="stat-value" id="failed-tests">0</span>
                            <span class="stat-label">–ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ</span>
                        </div>
                        <div class="stat">
                            <span class="stat-value" id="success-rate">0%</span>
                            <span class="stat-label">–£—Å–ø–µ—à–Ω–æ—Å—Ç—å</span>
                        </div>
                        <div class="stat">
                            <span class="stat-value" id="execution-time">0s</span>
                            <span class="stat-label">–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</span>
                        </div>
                    </div>
                    
                    <div class="test-log" id="test-log">
                        <div class="log-header">
                            <h4>–ñ—É—Ä–Ω–∞–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h4>
                            <button id="clear-log" class="btn btn-sm btn-secondary">–û—á–∏—Å—Ç–∏—Ç—å</button>
                        </div>
                        <div class="log-entries" id="log-entries"></div>
                    </div>
                </div>
            </div>
        `;
    }

    getTestCategory(testId) {
        if (testId.includes('api')) return 'api';
        if (testId.includes('database')) return 'database';
        if (testId.includes('module')) return 'modules';
        if (testId.includes('performance')) return 'performance';
        return 'other';
    }

    setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞–º–∏
        this.querySelector('#run-all-tests').addEventListener('click', () => this.runTests());
        this.querySelector('#run-selected-tests').addEventListener('click', () => this.runTests(true));
        this.querySelector('#stop-tests').addEventListener('click', () => this.stopTests());
        this.querySelector('#export-results').addEventListener('click', () => this.exportResults());
        this.querySelector('#clear-log').addEventListener('click', () => this.clearLog());
        
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
        this.querySelector('#test-search').addEventListener('input', (e) => this.filterTests(e.target.value));
        this.querySelectorAll('input[name="test-category"]').forEach(checkbox => {
            checkbox.addEventListener('change', () => this.filterTests());
        });
        
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ç–µ—Å—Ç–∞
        this.querySelectorAll('.test-card').forEach(card => {
            card.addEventListener('click', (e) => {
                if (!e.target.closest('input[type="checkbox"]')) {
                    const details = card.querySelector('.test-details');
                    details.style.display = details.style.display === 'none' ? 'block' : 'none';
                }
            });
        });
    }

    filterTests(searchTerm = '') {
        const selectedCategories = Array.from(this.querySelectorAll('input[name="test-category"]:checked')).map(cb => cb.value);
        const searchQuery = searchTerm.toLowerCase();
        
        this.querySelectorAll('.test-card').forEach(card => {
            const testId = card.dataset.testId;
            const testName = card.querySelector('.test-name').textContent.toLowerCase();
            const testCategory = card.dataset.category;
            
            const matchesSearch = testName.includes(searchQuery) || 
                                this.tests.find(t => t.id === testId)?.description.toLowerCase().includes(searchQuery);
            const matchesCategory = selectedCategories.includes(testCategory);
            
            if (matchesSearch && matchesCategory) {
                card.style.display = 'block';
            } else {
                card.style.display = 'none';
            }
        });
    }

    async runTests(onlySelected = false) {
        this.isRunning = true;
        this.testResults = [];
        this.startTime = Date.now();
        this.passedCount = 0;
        this.failedCount = 0;
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
        this.updateTestControls(true);
        this.clearLog();
        this.log('–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...', 'info');
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        const testsToRun = [];
        this.querySelectorAll('.test-card').forEach(card => {
            const testId = card.dataset.testId;
            const isSelected = !onlySelected || card.querySelector('input[type="checkbox"]').checked;
            
            if (isSelected && card.style.display !== 'none') {
                testsToRun.push(testId);
                this.updateTestStatus(testId, 'pending', '‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...');
            }
        });
        
        if (testsToRun.length === 0) {
            this.log('–ù–µ—Ç —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞', 'warning');
            this.updateTestControls(false);
            this.isRunning = false;
            return;
        }
        
        // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        for (const testId of testsToRun) {
            if (!this.isRunning) break;
            
            try {
                this.log(`–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: ${this.getTestName(testId)}`, 'info');
                const result = await this.runSingleTest(testId);
                this.testResults.push(result);
                
                if (result.success) {
                    this.passedCount++;
                    this.updateTestStatus(testId, 'success', '‚úÖ –£—Å–ø–µ—à–Ω–æ');
                    this.log(`–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: ${testId} (${result.duration}–º—Å)`, 'success');
                } else {
                    this.failedCount++;
                    this.updateTestStatus(testId, 'error', `‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
                    this.log(`–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: ${testId} - ${result.error}`, 'error');
                }
                
                this.updateTestOutput(testId, result);
                this.updateSummary();
                
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ ${testId}:`, error);
                this.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ ${testId}: ${error.message}`, 'error');
            }
        }
        
        // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        this.isRunning = false;
        this.updateTestControls(false);
        this.log(`–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –£—Å–ø–µ—à–Ω–æ: ${this.passedCount}, –ù–µ—É–¥–∞—á–Ω–æ: ${this.failedCount}`, 
                 this.failedCount === 0 ? 'success' : 'error');
    }

    async runSingleTest(testId) {
        const startTime = Date.now();
        const mode = this.querySelector('input[name="test-mode"]:checked').value;
        
        try {
            const response = await fetch(`${window.adminDashboard.apiBase}/api/${mode}1/test/${testId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const result = await response.json();
            const duration = Date.now() - startTime;
            
            return {
                id: testId,
                name: this.getTestName(testId),
                success: result.success,
                duration: duration,
                timestamp: new Date().toISOString(),
                ...result
            };
            
        } catch (error) {
            return {
                id: testId,
                name: this.getTestName(testId),
                success: false,
                error: error.message,
                duration: Date.now() - startTime,
                timestamp: new Date().toISOString()
            };
        }
    }

    stopTests() {
        this.isRunning = false;
        this.log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º', 'warning');
        this.updateTestControls(false);
    }

    updateTestControls(isRunning) {
        this.querySelector('#run-all-tests').disabled = isRunning;
        this.querySelector('#run-selected-tests').disabled = isRunning;
        this.querySelector('#stop-tests').disabled = !isRunning;
        this.querySelector('#export-results').disabled = isRunning;
    }

    updateTestStatus(testId, status, message) {
        const statusElement = this.querySelector(`#status-${testId}`);
        if (statusElement) {
            statusElement.textContent = message;
            statusElement.className = `test-status status-${status}`;
        }
    }

    updateTestOutput(testId, result) {
        const outputElement = this.querySelector(`#output-${testId}`);
        const metricsElement = this.querySelector(`#metrics-${testId}`);
        
        if (outputElement) {
            outputElement.innerHTML = `
                <h5>–í—ã–≤–æ–¥ —Ç–µ—Å—Ç–∞:</h5>
                <pre>${result.output || '–ù–µ—Ç –≤—ã–≤–æ–¥–∞'}</pre>
                ${result.error ? `<div class="error-message">${result.error}</div>` : ''}
            `;
        }
        
        if (metricsElement && result.metrics) {
            metricsElement.innerHTML = `
                <h5>–ú–µ—Ç—Ä–∏–∫–∏:</h5>
                <div class="metrics-grid">
                    ${Object.entries(result.metrics).map(([key, value]) => `
                        <div class="metric">
                            <span class="metric-label">${this.formatMetricName(key)}:</span>
                            <span class="metric-value">${this.formatMetricValue(key, value)}</span>
                        </div>
                    `).join('')}
                </div>
            `;
        }
    }

    updateSummary() {
        const totalTests = this.passedCount + this.failedCount;
        const successRate = totalTests > 0 ? Math.round((this.passedCount / totalTests) * 100) : 0;
        const duration = Math.round((Date.now() - this.startTime) / 1000);
        
        this.querySelector('#passed-tests').textContent = this.passedCount;
        this.querySelector('#failed-tests').textContent = this.failedCount;
        this.querySelector('#success-rate').textContent = `${successRate}%`;
        this.querySelector('#execution-time').textContent = `${duration}s`;
    }

    log(message, level = 'info') {
        const logEntries = this.querySelector('#log-entries');
        const logEntry = document.createElement('div');
        logEntry.className = `log-entry log-${level}`;
        
        const time = new Date().toLocaleTimeString();
        logEntry.innerHTML = `
            <span class="log-time">[${time}]</span>
            <span class="log-message">${message}</span>
        `;
        
        logEntries.appendChild(logEntry);
        logEntries.scrollTop = logEntries.scrollHeight;
    }

    clearLog() {
        this.querySelector('#log-entries').innerHTML = '';
    }

    exportResults() {
        if (!this.testResults || this.testResults.length === 0) {
            alert('–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
            return;
        }
        
        const data = {
            summary: {
                total: this.testResults.length,
                passed: this.passedCount,
                failed: this.failedCount,
                successRate: Math.round((this.passedCount / this.testResults.length) * 100),
                duration: Math.round((Date.now() - this.startTime) / 1000)
            },
            tests: this.testResults
        };
        
        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        
        const a = document.createElement('a');
        a.href = url;
        a.download = `test-results-${new Date().toISOString().replace(/[:.]/g, '-')}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }

    getTestName(testId) {
        const test = this.tests.find(t => t.id === testId);
        return test ? test.name : testId;
    }

    formatMetricName(name) {
        return name
            .replace(/([A-Z])/g, ' $1')
            .replace(/^./, str => str.toUpperCase())
            .trim();
    }

    formatMetricValue(name, value) {
        if (typeof value === 'number') {
            if (name.includes('time') || name.includes('duration')) {
                return `${value.toFixed(2)}ms`;
            }
            if (name.includes('size') || name.includes('memory')) {
                const sizes = ['B', 'KB', 'MB', 'GB'];
                const i = Math.floor(Math.log(value) / Math.log(1024));
                return `${(value / Math.pow(1024, i)).toFixed(2)} ${sizes[i]}`;
            }
            return value.toLocaleString();
        }
        return value;
    }
}

customElements.define('test-runner', TestRunner);


---

// admin-dashboard/components/settings.js
// –û–ø–∏—Å–∞–Ω–∏–µ: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã
// –õ–æ–≥–∏–∫–∞: –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è
// –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: HTMLElement, fetch API
// –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: –†–µ–∞–ª–∏–∑—É–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π

class SettingsPanel extends HTMLElement {
    constructor() {
        super();
        this.settings = {};
        this.originalSettings = {};
    }

    connectedCallback() {
        this.render();
        this.loadSettings();
    }

    render() {
        this.innerHTML = `
            <div class="card">
                <h2>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</h2>
                <p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π —Å–∏—Å—Ç–µ–º—ã</p>

                <div class="settings-grid">
                    <div class="settings-section">
                        <h3>üîå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API</h3>
                        <div class="form-group">
                            <label>–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (–º—Å):</label>
                            <input type="number" class="form-control" id="api-timeout" min="1000" max="30000">
                        </div>
                        <div class="form-group">
                            <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤:</label>
                            <input type="number" class="form-control" id="api-retry-count" min="1" max="10">
                        </div>
                        <div class="form-group">
                            <label>–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É:</label>
                            <input type="number" class="form-control" id="api-rate-limit" min="10" max="1000">
                        </div>
                    </div>

                    <div class="settings-section">
                        <h3>üóÑÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</h3>
                        <div class="form-group">
                            <label>–†–∞–∑–º–µ—Ä –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:</label>
                            <input type="number" class="form-control" id="db-pool-size" min="1" max="50">
                        </div>
                        <div class="form-group">
                            <label>–¢–∞–π–º–∞—É—Ç –ë–î (–º—Å):</label>
                            <input type="number" class="form-control" id="db-timeout" min="1000" max="30000">
                        </div>
                        <div class="form-group">
                            <label>–ê–≤—Ç–æ-–±—ç–∫–∞–ø:</label>
                            <select class="form-control" id="db-backup">
                                <option value="disabled">–û—Ç–∫–ª—é—á–µ–Ω</option>
                                <option value="daily">–ï–∂–µ–¥–Ω–µ–≤–Ω–æ</option>
                                <option value="weekly">–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ</option>
                                <option value="monthly">–ï–∂–µ–º–µ—Å—è—á–Ω–æ</option>
                            </select>
                        </div>
                    </div>

                    <div class="settings-section">
                        <h3>üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è</h3>
                        <div class="form-group">
                            <label>–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:</label>
                            <select class="form-control" id="log-level">
                                <option value="debug">Debug</option>
                                <option value="info">Info</option>
                                <option value="warning">Warning</option>
                                <option value="error">Error</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>–°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤:</label>
                            <select class="form-control" id="log-retention">
                                <option value="7d">7 –¥–Ω–µ–π</option>
                                <option value="30d">30 –¥–Ω–µ–π</option>
                                <option value="90d">90 –¥–Ω–µ–π</option>
                                <option value="1y">1 –≥–æ–¥</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>
                                <input type="checkbox" id="log-verbose">
                                –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                            </label>
                        </div>
                    </div>

                    <div class="settings-section">
                        <h3>üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h3>
                        <div class="form-group">
                            <label>
                                <input type="checkbox" id="notifications-enabled" checked>
                                –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                            </label>
                        </div>
                        <div class="form-group">
                            <label>Email –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</label>
                            <input type="email" class="form-control" id="notification-email" placeholder="admin@example.com">
                        </div>
                        <div class="form-group">
                            <label>Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</label>
                            <input type="text" class="form-control" id="telegram-chat" placeholder="ID —á–∞—Ç–∞ Telegram">
                        </div>
                        <div class="form-group">
                            <label>–£–≤–µ–¥–æ–º–ª—è—Ç—å –æ –æ—à–∏–±–∫–∞—Ö:</label>
                            <select class="form-control" id="error-notifications">
                                <option value="all">–í—Å–µ –æ—à–∏–±–∫–∏</option>
                                <option value="critical">–¢–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ</option>
                                <option value="none">–ù–µ —É–≤–µ–¥–æ–º–ª—è—Ç—å</option>
                            </select>
                        </div>
                    </div>

                    <div class="settings-section">
                        <h3>üí¨ –°–∏—Å—Ç–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</h3>
                        <div class="form-group">
                            <label>
                                <input type="checkbox" id="auto-assign" checked>
                                –ê–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏–π
                            </label>
                        </div>
                        <div class="form-group">
                            <label>
                                <input type="checkbox" id="notify-new-tickets" checked>
                                –£–≤–µ–¥–æ–º–ª—è—Ç—å –æ –Ω–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏—è—Ö
                            </label>
                        </div>
                        <div class="form-group">
                            <label>–†–∞–±–æ—á–∏–µ —á–∞—Å—ã:</label>
                            <input type="text" class="form-control" id="working-hours" placeholder="09:00-18:00">
                        </div>
                        <div class="form-group">
                            <label>–¢–∞–π–º–∞—É—Ç –æ—Ç–≤–µ—Ç–∞ (—á–∞—Å—ã):</label>
                            <input type="number" class="form-control" id="response-timeout" min="1" max="168">
                        </div>
                    </div>

                    <div class="settings-section">
                        <h3>üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</h3>
                        <div class="form-group">
                            <label>–¢—Ä–µ–±–æ–≤–∞—Ç—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é:</label>
                            <select class="form-control" id="two-factor">
                                <option value="disabled">–û—Ç–∫–ª—é—á–µ–Ω–∞</option>
                                <option value="admins">–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤</option>
                                <option value="all">–î–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Å—Å–∏–∏ (—á–∞—Å—ã):</label>
                            <input type="number" class="form-control" id="session-timeout" min="1" max="720">
                        </div>
                        <div class="form-group">
                            <label>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞:</label>
                            <input type="number" class="form-control" id="max-login-attempts" min="1" max="10">
                        </div>
                        <div class="form-group">
                            <label>
                                <input type="checkbox" id="password-complexity" checked>
                                –¢—Ä–µ–±–æ–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –ø–∞—Ä–æ–ª–∏
                            </label>
                        </div>
                    </div>
                </div>

                <div class="settings-actions">
                    <button class="btn btn-secondary" id="reset-settings">üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω—ã–º</button>
                    <button class="btn btn-primary" id="save-settings">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</button>
                </div>

                <div id="settings-message" style="display: none; margin-top: 1rem;"></div>
            </div>
        `;

        this.setupEventListeners();
    }

    setupEventListeners() {
        this.querySelector('#save-settings').addEventListener('click', () => this.saveSettings());
        this.querySelector('#reset-settings').addEventListener('click', () => this.resetSettings());
        
        // Real-time validation
        this.querySelectorAll('.form-control').forEach(input => {
            input.addEventListener('change', () => this.validateField(input));
        });
    }

    async loadSettings() {
        try {
            const response = await fetch(`${window.adminDashboard.apiBase}/admin/settings`);
            const data = await response.json();
            this.settings = data.settings || {};
            this.originalSettings = JSON.parse(JSON.stringify(this.settings));
            this.populateForm();
        } catch (error) {
            console.error('Error loading settings:', error);
            this.showMessage('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: ' + error.message, 'error');
        }
    }

    populateForm() {
        // API Settings
        if (this.settings.api) {
            this.setValueIfExists('api-timeout', this.settings.api.timeout, 10000);
            this.setValueIfExists('api-retry-count', this.settings.api.retryCount, 3);
            this.setValueIfExists('api-rate-limit', this.settings.api.rateLimit, 100);
        }
        
        // Database Settings
        if (this.settings.database) {
            this.setValueIfExists('db-pool-size', this.settings.database.poolSize, 10);
            this.setValueIfExists('db-timeout', this.settings.database.timeout, 5000);
            this.setValueIfExists('db-backup', this.settings.database.backup, 'daily');
        }
        
        // Logging Settings
        if (this.settings.logging) {
            this.setValueIfExists('log-level', this.settings.logging.level, 'info');
            this.setValueIfExists('log-retention', this.settings.logging.retention, '30d');
            this.setCheckedIfExists('log-verbose', this.settings.logging.verbose, false);
        }
        
        // Notification Settings
        if (this.settings.notifications) {
            this.setCheckedIfExists('notifications-enabled', this.settings.notifications.enabled, true);
            this.setValueIfExists('notification-email', this.settings.notifications.email, 'admin@example.com');
            this.setValueIfExists('telegram-chat', this.settings.notifications.telegramChat, '');
            this.setValueIfExists('error-notifications', this.settings.notifications.errorLevel, 'all');
        }
        
        // Messaging Settings
        if (this.settings.messaging) {
            this.setCheckedIfExists('auto-assign', this.settings.messaging.autoAssign, true);
            this.setCheckedIfExists('notify-new-tickets', this.settings.messaging.notifyNewTickets, true);
            this.setValueIfExists('working-hours', this.settings.messaging.workingHours, '09:00-18:00');
            this.setValueIfExists('response-timeout', this.settings.messaging.responseTimeout, 24);
        }
        
        // Security Settings
        if (this.settings.security) {
            this.setValueIfExists('two-factor', this.settings.security.twoFactor, 'admins');
            this.setValueIfExists('session-timeout', this.settings.security.sessionTimeout, 24);
            this.setValueIfExists('max-login-attempts', this.settings.security.maxLoginAttempts, 5);
            this.setCheckedIfExists('password-complexity', this.settings.security.passwordComplexity, true);
        }
    }

    setValueIfExists(elementId, value, defaultValue = '') {
        const element = this.querySelector(`#${elementId}`);
        if (element) {
            element.value = value !== undefined ? value : defaultValue;
        }
    }

    setCheckedIfExists(elementId, value, defaultValue = false) {
        const element = this.querySelector(`#${elementId}`);
        if (element) {
            element.checked = value !== undefined ? value : defaultValue;
        }
    }

    validateField(field) {
        const value = field.value;
        let isValid = true;
        let message = '';

        switch (field.id) {
            case 'api-timeout':
                if (value < 1000 || value > 30000) {
                    isValid = false;
                    message = '–¢–∞–π–º–∞—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 1000 –∏ 30000 –º—Å';
                }
                break;
            case 'api-rate-limit':
                if (value < 10 || value > 1000) {
                    isValid = false;
                    message = '–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 10 –∏ 1000';
                }
                break;
            case 'notification-email':
                if (value) {
                    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                    if (!emailRegex.test(value)) {
                        isValid = false;
                        message = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å';
                    }
                }
                break;
            case 'working-hours':
                if (value) {
                    const timeRegex = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]-([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;
                    if (!timeRegex.test(value)) {
                        isValid = false;
                        message = '–§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú-–ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00-18:00)';
                    }
                }
                break;
        }

        if (!isValid) {
            field.classList.add('error');
            this.showTooltip(field, message);
        } else {
            field.classList.remove('error');
            this.hideTooltip(field);
        }

        return isValid;
    }

    showTooltip(element, message) {
        let tooltip = element.parentNode.querySelector('.tooltip');
        if (!tooltip) {
            tooltip = document.createElement('div');
            tooltip.className = 'tooltip';
            element.parentNode.appendChild(tooltip);
        }
        tooltip.textContent = message;
        tooltip.style.display = 'block';
    }

    hideTooltip(element) {
        const tooltip = element.parentNode.querySelector('.tooltip');
        if (tooltip) {
            tooltip.style.display = 'none';
        }
    }

    collectFormData() {
        return {
            api: {
                timeout: parseInt(this.querySelector('#api-timeout').value) || 10000,
                retryCount: parseInt(this.querySelector('#api-retry-count').value) || 3,
                rateLimit: parseInt(this.querySelector('#api-rate-limit').value) || 100
            },
            database: {
                poolSize: parseInt(this.querySelector('#db-pool-size').value) || 10,
                timeout: parseInt(this.querySelector('#db-timeout').value) || 5000,
                backup: this.querySelector('#db-backup').value || 'daily'
            },
            logging: {
                level: this.querySelector('#log-level').value || 'info',
                retention: this.querySelector('#log-retention').value || '30d',
                verbose: this.querySelector('#log-verbose').checked
            },
            notifications: {
                enabled: this.querySelector('#notifications-enabled').checked,
                email: this.querySelector('#notification-email').value || 'admin@example.com',
                telegramChat: this.querySelector('#telegram-chat').value || '',
                errorLevel: this.querySelector('#error-notifications').value || 'all'
            },
            messaging: {
                autoAssign: this.querySelector('#auto-assign').checked,
                notifyNewTickets: this.querySelector('#notify-new-tickets').checked,
                workingHours: this.querySelector('#working-hours').value || '09:00-18:00',
                responseTimeout: parseInt(this.querySelector('#response-timeout').value) || 24
            },
            security: {
                twoFactor: this.querySelector('#two-factor').value || 'admins',
                sessionTimeout: parseInt(this.querySelector('#session-timeout').value) || 24,
                maxLoginAttempts: parseInt(this.querySelector('#max-login-attempts').value) || 5,
                passwordComplexity: this.querySelector('#password-complexity').checked
            }
        };
    }

    async saveSettings() {
        // Validate all fields
        const fields = this.querySelectorAll('.form-control');
        let allValid = true;
        
        fields.forEach(field => {
            if (!this.validateField(field)) {
                allValid = false;
                // Scroll to first error
                if (allValid) {
                    field.scrollIntoView({ behavior: 'smooth', block: 'center' });
                }
            }
        });

        if (!allValid) {
            this.showMessage('‚ùå –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º', 'error');
            return;
        }

        const settings = this.collectFormData();

        try {
            const response = await fetch(`${window.adminDashboard.apiBase}/admin/settings`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(settings)
            });
            
            if (response.ok) {
                this.showMessage('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', 'success');
                this.originalSettings = JSON.parse(JSON.stringify(settings));
                
                // Reload settings to get any server-side defaults
                setTimeout(() => this.loadSettings(), 1000);
            } else {
                const error = await response.json();
                throw new Error(error.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
            }
        } catch (error) {
            console.error('Error saving settings:', error);
            this.showMessage(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${error.message}`, 'error');
        }
    }

    resetSettings() {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º?')) {
            this.settings = JSON.parse(JSON.stringify(this.originalSettings));
            this.populateForm();
            this.showMessage('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º', 'info');
        }
    }

    showMessage(text, type = 'info') {
        const messageEl = this.querySelector('#settings-message');
        if (!messageEl) return;
        
        messageEl.textContent = text;
        messageEl.className = type;
        messageEl.style.display = 'block';
        
        // Auto-hide after 5 seconds
        clearTimeout(this.messageTimer);
        this.messageTimer = setTimeout(() => {
            messageEl.style.display = 'none';
        }, 5000);
    }
}

// Register the custom element
if (!customElements.get('settings-panel')) {
    customElements.define('settings-panel', SettingsPanel);
}

---

class ServerStatus extends HTMLElement {
    connectedCallback() {
        this.render();
        this.setupEventListeners();
        this.startMonitoring();
    }

    render() {
        this.innerHTML = `
            <div class="card">
                <h2>üñ• –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞</h2>
                <p>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</p>
                
                <div class="grid grid-3">
                    <div class="card">
                        <h3>üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏</h3>
                        <div id="memory-stats">
                            <div class="stat-item">
                                <span class="stat-label">RSS:</span>
                                <span class="stat-value" id="memory-rss">0 MB</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-label">Heap Total:</span>
                                <span class="stat-value" id="memory-heap-total">0 MB</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-label">Heap Used:</span>
                                <span class="stat-value" id="memory-heap-used">0 MB</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-label">External:</span>
                                <span class="stat-value" id="memory-external">0 MB</span>
                            </div>
                        </div>
                        <div class="chart-container">
                            <canvas id="memory-chart" width="400" height="200"></canvas>
                        </div>
                    </div>

                    <div class="card">
                        <h3>‚ö° –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä</h3>
                        <div id="cpu-stats">
                            <div class="stat-item">
                                <span class="stat-label">–ó–∞–≥—Ä—É–∑–∫–∞ CPU:</span>
                                <span class="stat-value" id="cpu-usage">0%</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-label">–ê–ø—Ç–∞–π–º:</span>
                                <span class="stat-value" id="uptime">00:00:00</span>
                            </div>
                        </div>
                        <div class="chart-container">
                            <canvas id="cpu-chart" width="400" height="200"></canvas>
                        </div>
                    </div>

                    <div class="card">
                        <h3>üåê –°–µ—Ç—å</h3>
                        <div id="network-stats">
                            <div class="stat-item">
                                <span class="stat-label">–í—Ö–æ–¥—è—â–∏–π —Ç—Ä–∞—Ñ–∏–∫:</span>
                                <span class="stat-value" id="network-rx">0 B/s</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-label">–ò—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–∞—Ñ–∏–∫:</span>
                                <span class="stat-value" id="network-tx">0 B/s</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-label">–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤:</span>
                                <span class="stat-value" id="total-requests">0</span>
                            </div>
                        </div>
                        <div class="chart-container">
                            <canvas id="network-chart" width="400" height="200"></canvas>
                        </div>
                    </div>
                </div>

                <div class="card">
                    <h3>üìä –ú–µ—Ç—Ä–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</h3>
                    <div class="grid grid-3">
                        <div class="metric-card">
                            <div class="metric-value" id="request-rate">0</div>
                            <div class="metric-label">–ó–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω</div>
                        </div>
                        <div class="metric-card">
                            <div class="metric-value" id="avg-response-time">0ms</div>
                            <div class="metric-label">–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞</div>
                        </div>
                        <div class="metric-card">
                            <div class="metric-value" id="error-rate">0%</div>
                            <div class="metric-label">–û—à–∏–±–æ–∫</div>
                        </div>
                    </div>
                </div>

                <div class="card">
                    <h3>üìù –õ–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞</h3>
                    <div class="log-controls">
                        <button class="btn btn-primary" id="refresh-logs">–û–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏</button>
                        <button class="btn btn-secondary" id="clear-logs">–û—á–∏—Å—Ç–∏—Ç—å</button>
                        <div class="log-level-filter">
                            <label><input type="checkbox" name="log-level" value="error" checked> –û—à–∏–±–∫–∏</label>
                            <label><input type="checkbox" name="log-level" value="warn" checked> –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è</label>
                            <label><input type="checkbox" name="log-level" value="info" checked> –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</label>
                            <label><input type="checkbox" name="log-level" value="debug"> –û—Ç–ª–∞–¥–∫–∞</label>
                        </div>
                    </div>
                    <div id="server-logs" class="log-container">
                        –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤...
                    </div>
                </div>
            </div>
        `;
    }

    setupEventListeners() {
        this.querySelector('#refresh-logs').addEventListener('click', () => {
            this.loadServerLogs();
        });

        this.querySelector('#clear-logs').addEventListener('click', () => {
            this.clearLogs();
        });

        this.querySelectorAll('input[name="log-level"]').forEach(checkbox => {
            checkbox.addEventListener('change', () => {
                this.filterLogs();
            });
        });

        this.loadServerStatus();
        this.loadServerLogs();
    }

    startMonitoring() {
        this.loadServerStatus();
        this.statusInterval = setInterval(() => {
            this.loadServerStatus();
        }, 5000);

        this.logsInterval = setInterval(() => {
            this.loadServerLogs(true);
        }, 10000);
    }

    formatBytes(bytes, decimals = 2) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const dm = decimals < 0 ? 0 : decimals;
        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
    }

    formatUptime(seconds) {
        const days = Math.floor(seconds / (3600 * 24));
        const hours = Math.floor((seconds % (3600 * 24)) / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        const secs = Math.floor(seconds % 60);
        
        let result = [];
        if (days > 0) result.push(`${days}–¥`);
        if (hours > 0 || days > 0) result.push(`${hours}—á`);
        if (minutes > 0 || hours > 0 || days > 0) result.push(`${minutes}–º`);
        result.push(`${secs}—Å`);
        
        return result.join(' ');
    }

    async loadServerStatus() {
        try {
            const response = await fetch(`${window.adminDashboard.apiBase}/api/v1/status`);
            const data = await response.json();
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–º—è—Ç–∏
            this.querySelector('#memory-rss').textContent = this.formatBytes(data.memory.rss);
            this.querySelector('#memory-heap-total').textContent = this.formatBytes(data.memory.heapTotal);
            this.querySelector('#memory-heap-used').textContent = this.formatBytes(data.memory.heapUsed);
            this.querySelector('#memory-external').textContent = this.formatBytes(data.memory.external);
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ CPU
            this.querySelector('#cpu-usage').textContent = `${Math.round(data.cpu.usage * 100)}%`;
            this.querySelector('#uptime').textContent = this.formatUptime(data.uptime);
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ç–∏
            this.querySelector('#network-rx').textContent = this.formatBytes(data.network.rx) + '/s';
            this.querySelector('#network-tx').textContent = this.formatBytes(data.network.tx) + '/s';
            this.querySelector('#total-requests').textContent = data.requests.total.toLocaleString();
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
            this.querySelector('#request-rate').textContent = data.metrics.requestRate.toFixed(1);
            this.querySelector('#avg-response-time').textContent = `${data.metrics.avgResponseTime.toFixed(2)}ms`;
            this.querySelector('#error-rate').textContent = `${(data.metrics.errorRate * 100).toFixed(1)}%`;
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
            this.updateCharts(data.history);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        }
    }

    updateCharts(history) {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
        this.updateMemoryChart(history);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CPU
        this.updateCpuChart(history);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å–µ—Ç–∏
        this.updateNetworkChart(history);
    }

    updateMemoryChart(history) {
        const ctx = this.querySelector('#memory-chart')?.getContext('2d');
        if (!ctx) return;

        if (this.memoryChart) {
            this.memoryChart.destroy();
        }

        const labels = history.map((_, i) => {
            const d = new Date();
            d.setMinutes(d.getMinutes() - (history.length - i - 1));
            return d.toLocaleTimeString();
        });

        this.memoryChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [
                    {
                        label: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ (Heap)',
                        data: history.map(h => (h.memory.heapUsed / (1024 * 1024)).toFixed(2)),
                        borderColor: '#3b82f6',
                        backgroundColor: 'rgba(59, 130, 246, 0.1)',
                        tension: 0.4,
                        fill: true
                    },
                    {
                        label: '–í—Å–µ–≥–æ (Heap)',
                        data: history.map(h => (h.memory.heapTotal / (1024 * 1024)).toFixed(2)),
                        borderColor: '#10b981',
                        backgroundColor: 'rgba(16, 185, 129, 0.1)',
                        tension: 0.4,
                        fill: true
                    }
                ]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ (MB)'
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    }

    updateCpuChart(history) {
        const ctx = this.querySelector('#cpu-chart')?.getContext('2d');
        if (!ctx) return;

        if (this.cpuChart) {
            this.cpuChart.destroy();
        }

        const labels = history.map((_, i) => {
            const d = new Date();
            d.setMinutes(d.getMinutes() - (history.length - i - 1));
            return d.toLocaleTimeString();
        });

        this.cpuChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [
                    {
                        label: '–ó–∞–≥—Ä—É–∑–∫–∞ CPU',
                        data: history.map(h => (h.cpu.usage * 100).toFixed(2)),
                        borderColor: '#f59e0b',
                        backgroundColor: 'rgba(245, 158, 11, 0.1)',
                        tension: 0.4,
                        fill: true
                    }
                ]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: '–ó–∞–≥—Ä—É–∑–∫–∞ CPU (%)'
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        max: 100
                    }
                }
            }
        });
    }

    updateNetworkChart(history) {
        const ctx = this.querySelector('#network-chart')?.getContext('2d');
        if (!ctx) return;

        if (this.networkChart) {
            this.networkChart.destroy();
        }

        const labels = history.map((_, i) => {
            const d = new Date();
            d.setMinutes(d.getMinutes() - (history.length - i - 1));
            return d.toLocaleTimeString();
        });

        this.networkChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [
                    {
                        label: '–í—Ö–æ–¥—è—â–∏–π —Ç—Ä–∞—Ñ–∏–∫ (KB/s)',
                        data: history.map(h => (h.network.rx / 1024).toFixed(2)),
                        borderColor: '#8b5cf6',
                        backgroundColor: 'rgba(139, 92, 246, 0.1)',
                        tension: 0.4,
                        fill: true,
                        yAxisID: 'y'
                    },
                    {
                        label: '–ò—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–∞—Ñ–∏–∫ (KB/s)',
                        data: history.map(h => (h.network.tx / 1024).toFixed(2)),
                        borderColor: '#ec4899',
                        backgroundColor: 'rgba(236, 72, 153, 0.1)',
                        tension: 0.4,
                        fill: true,
                        yAxisID: 'y1'
                    }
                ]
            },
            options: {
                responsive: true,
                interaction: {
                    mode: 'index',
                    intersect: false,
                },
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: '–°–µ—Ç–µ–≤–æ–π —Ç—Ä–∞—Ñ–∏–∫ (KB/s)'
                    }
                },
                scales: {
                    y: {
                        type: 'linear',
                        display: true,
                        position: 'left',
                        title: {
                            display: true,
                            text: '–í—Ö–æ–¥—è—â–∏–π'
                        }
                    },
                    y1: {
                        type: 'linear',
                        display: true,
                        position: 'right',
                        grid: {
                            drawOnChartArea: false,
                        },
                        title: {
                            display: true,
                            text: '–ò—Å—Ö–æ–¥—è—â–∏–π'
                        }
                    }
                }
            }
        });
    }

    async loadServerLogs(silent = false) {
        if (!silent) {
            const logsContainer = this.querySelector('#server-logs');
            logsContainer.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤...';
        }

        try {
            const response = await fetch(`${window.adminDashboard.apiBase}/api/v1/logs`);
            const logs = await response.json();
            this.displayLogs(logs);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–≥–æ–≤:', error);
            if (!silent) {
                this.querySelector('#server-logs').textContent = `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–≥–æ–≤: ${error.message}`;
            }
        }
    }

    displayLogs(logs) {
        const logsContainer = this.querySelector('#server-logs');
        logsContainer.innerHTML = '';

        logs.forEach(log => {
            const logElement = document.createElement('div');
            logElement.className = `log-entry log-${log.level}`;
            
            const time = new Date(log.timestamp).toLocaleTimeString();
            
            logElement.innerHTML = `
                <span class="log-time">[${time}]</span>
                <span class="log-level">${log.level.toUpperCase()}</span>
                <span class="log-message">${log.message}</span>
            `;
            
            logsContainer.appendChild(logElement);
        });

        // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ª–æ–≥—É
        logsContainer.scrollTop = logsContainer.scrollHeight;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
        this.filterLogs();
    }

    filterLogs() {
        const visibleLevels = Array.from(this.querySelectorAll('input[name="log-level"]:checked')).map(cb => cb.value);
        const logEntries = this.querySelectorAll('.log-entry');
        
        logEntries.forEach(entry => {
            const logLevel = entry.classList[1].replace('log-', '');
            if (visibleLevels.includes(logLevel)) {
                entry.style.display = 'flex';
            } else {
                entry.style.display = 'none';
            }
        });
    }

    clearLogs() {
        this.querySelector('#server-logs').innerHTML = '';
    }

    disconnectedCallback() {
        if (this.statusInterval) {
            clearInterval(this.statusInterval);
        }
        if (this.logsInterval) {
            clearInterval(this.logsInterval);
        }
    }
}

customElements.define('server-status', ServerStatus);

---

 class QueueMonitor extends HTMLElement {
    connectedCallback() {
        this.render();
        this.setupEventListeners();
        this.startMonitoring();
    }

    render() {
        this.innerHTML = `
            <div class="card">
                <h2>üìã –û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞–Ω–∏–π</h2>
                <p>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—å—é –∑–∞–¥–∞–Ω–∏–π</p>
                
                <div class="control-panel">
                    <div class="form-group">
                        <label>–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:</label>
                        <div class="mode-selector">
                            <label class="mode-option">
                                <input type="radio" name="queue-mode" value="t" checked>
                                <span class="mode-badge test">–¢–µ—Å—Ç–æ–≤—ã–π (t1)</span>
                            </label>
                            <label class="mode-option">
                                <input type="radio" name="queue-mode" value="v">
                                <span class="mode-badge prod">–ë–æ–µ–≤–æ–π (v1)</span>
                            </label>
                        </div>
                    </div>
                </div>

                <div class="grid grid-3">
                    <div class="card">
                        <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏</h3>
                        <div id="queue-stats">
                            <div class="stat-item">
                                <span class="stat-label">–û–∂–∏–¥–∞—é—Ç:</span>
                                <span class="stat-value" id="waiting-count">0</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-label">–ê–∫—Ç–∏–≤–Ω—ã–µ:</span>
                                <span class="stat-value" id="active-count">0</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-label">–ó–∞–≤–µ—Ä—à–µ–Ω–æ:</span>
                                <span class="stat-value" id="completed-count">0</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-label">–û—à–∏–±–∫–∏:</span>
                                <span class="stat-value" id="failed-count">0</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-label">–í–æ—Ä–∫–µ—Ä—ã:</span>
                                <span class="stat-value" id="workers-count">0</span>
                            </div>
                        </div>
                        <button class="btn btn-primary" id="refresh-stats">
                            –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                        </button>
                    </div>

                    <div class="card">
                        <h3>‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>
                        <div class="quick-actions">
                            <button class="btn btn-warning" id="pause-queue">
                                –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—á–µ—Ä–µ–¥—å
                            </button>
                            <button class="btn btn-success" id="resume-queue">
                                –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –æ—á–µ—Ä–µ–¥—å
                            </button>
                            <button class="btn btn-secondary" id="clean-completed">
                                –û—á–∏—Å—Ç–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
                            </button>
                            <button class="btn btn-secondary" id="clean-failed">
                                –û—á–∏—Å—Ç–∏—Ç—å –æ—à–∏–±–∫–∏
                            </button>
                        </div>
                    </div>

                    <div class="card">
                        <h3>üìà –ì—Ä–∞—Ñ–∏–∫ –Ω–∞–≥—Ä—É–∑–∫–∏</h3>
                        <div class="chart-container">
                            <canvas id="queue-chart" width="400" height="200"></canvas>
                        </div>
                    </div>
                </div>

                <div class="card">
                    <h3>üìù –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è</h3>
                    <div id="active-jobs" class="result-container">
                        –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π...
                    </div>
                </div>
            </div>
        `;
    }

    setupEventListeners() {
        this.querySelector('#refresh-stats').addEventListener('click', () => {
            this.loadQueueStats();
        });

        this.querySelectorAll('#pause-queue, #resume-queue, #clean-completed, #clean-failed').forEach(btn => {
            btn.addEventListener('click', (e) => {
                this.handleQueueAction(e.target.id);
            });
        });

        this.loadQueueStats();
    }

    startMonitoring() {
        this.loadQueueStats();
        this.interval = setInterval(() => {
            this.loadQueueStats();
        }, 10000);
    }

    async loadQueueStats() {
        const mode = this.querySelector('input[name="queue-mode"]:checked').value;
        
        try {
            const response = await fetch(`${window.adminDashboard.apiBase}/api/${mode}1/queue/status`);
            const data = await response.json();
            
            this.querySelector('#waiting-count').textContent = data.waiting;
            this.querySelector('#active-count').textContent = data.active;
            this.querySelector('#completed-count').textContent = data.completed;
            this.querySelector('#failed-count').textContent = data.failed;
            this.querySelector('#workers-count').textContent = data.workers;
            
            this.updateActiveJobs(data.activeJobs || []);
            this.updateChart(data.history || []);
            
        } catch (error) {
            console.error('Failed to load queue stats:', error);
        }
    }

    updateActiveJobs(jobs) {
        const container = this.querySelector('#active-jobs');
        
        if (jobs.length === 0) {
            container.innerHTML = '<p>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π</p>';
            return;
        }
        
        let html = '<div class="jobs-list">';
        jobs.forEach(job => {
            html += `
                <div class="job-item">
                    <div class="job-header">
                        <strong>${job.id}</strong>
                        <span class="job-type">${job.type}</span>
                        <span class="job-progress">${job.progress}%</span>
                    </div>
                    <div class="job-details">
                        <div>–°—Ç–∞—Ç—É—Å: <span class="status-${job.status}">${job.status}</span></div>
                        <div>–°–æ–∑–¥–∞–Ω–æ: ${new Date(job.createdAt).toLocaleString()}</div>
                        <div>–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date(job.updatedAt).toLocaleString()}</div>
                    </div>
                </div>
            `;
        });
        html += '</div>';
        
        container.innerHTML = html;
    }

    updateChart(history) {
        const ctx = this.querySelector('#queue-chart')?.getContext('2d');
        if (!ctx) return;

        // Destroy existing chart if it exists
        if (this.chart) {
            this.chart.destroy();
        }

        const labels = history.map((_, i) => {
            const d = new Date();
            d.setMinutes(d.getMinutes() - (history.length - i - 1) * 5);
            return d.toLocaleTimeString();
        });

        this.chart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [
                    {
                        label: '–û–∂–∏–¥–∞—é—Ç',
                        data: history.map(h => h.waiting),
                        borderColor: '#3b82f6',
                        backgroundColor: 'rgba(59, 130, 246, 0.1)',
                        tension: 0.4,
                        fill: true
                    },
                    {
                        label: '–ê–∫—Ç–∏–≤–Ω—ã–µ',
                        data: history.map(h => h.active),
                        borderColor: '#10b981',
                        backgroundColor: 'rgba(16, 185, 129, 0.1)',
                        tension: 0.4,
                        fill: true
                    },
                    {
                        label: '–û—à–∏–±–∫–∏',
                        data: history.map(h => h.failed),
                        borderColor: '#ef4444',
                        backgroundColor: 'rgba(239, 68, 68, 0.1)',
                        tension: 0.4,
                        fill: true
                    }
                ]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: '–ó–∞–≥—Ä—É–∑–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å'
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            stepSize: 1
                        }
                    }
                }
            }
        });
    }

    async handleQueueAction(actionId) {
        const mode = this.querySelector('input[name="queue-mode"]:checked').value;
        
        try {
            let endpoint = '';
            let method = 'POST';
            
            switch (actionId) {
                case 'pause-queue':
                    endpoint = '/pause';
                    break;
                case 'resume-queue':
                    endpoint = '/resume';
                    break;
                case 'clean-completed':
                    endpoint = '/clean/completed';
                    break;
                case 'clean-failed':
                    endpoint = '/clean/failed';
                    break;
            }
            
            const response = await fetch(`${window.adminDashboard.apiBase}/api/${mode}1/queue${endpoint}`, {
                method: method
            });
            
            if (response.ok) {
                alert('–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
                this.loadQueueStats();
            } else {
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è');
            }
            
        } catch (error) {
            alert(`–û—à–∏–±–∫–∞: ${error.message}`);
        }
    }

    disconnectedCallback() {
        if (this.interval) {
            clearInterval(this.interval);
        }
    }
}

customElements.define('queue-monitor', QueueMonitor);


---


class ModuleTester extends HTMLElement {
    constructor() {
        super();
        this.modules = [
            { id: 'suggest', name: '–ü–æ–¥—Å–∫–∞–∑–∫–∏', description: '–ü–æ–∏—Å–∫–æ–≤—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ Wildberries' },
            { id: 'search', name: '–ü–æ–∏—Å–∫', description: '–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤' },
            { id: 'product', name: '–¢–æ–≤–∞—Ä', description: '–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ' },
            { id: 'brand', name: '–ë—Ä–µ–Ω–¥', description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–µ–Ω–¥–µ' },
            { id: 'seller', name: '–ü—Ä–æ–¥–∞–≤–µ—Ü', description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–≤—Ü–µ' }
        ];
        this.apiVersion = '1';
    }

    connectedCallback() {
        this.render();
        this.setupEventListeners();
    }

    render() {
        this.innerHTML = `
            <div class="card">
                <h2>üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö</h2>
                <p class="api-info">
                    <strong>API –≤–µ—Ä—Å–∏—è:</strong> v${this.apiVersion} | 
                    <strong>–†–µ–∂–∏–º—ã:</strong> 
                    <span class="mode-tag test">t${this.apiVersion} (—Ç–µ—Å—Ç)</span> 
                    <span class="mode-tag prod">v${this.apiVersion} (–±–æ–µ–≤–æ–π)</span>
                </p>
                
                <div class="control-panel">
                    <div class="form-group">
                        <label>–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:</label>
                        <div class="mode-selector">
                            <label class="mode-option">
                                <input type="radio" name="mode" value="t" checked>
                                <span class="mode-badge test">–¢–µ—Å—Ç–æ–≤—ã–π (t${this.apiVersion})</span>
                            </label>
                            <label class="mode-option">
                                <input type="radio" name="mode" value="v">
                                <span class="mode-badge prod">–ë–æ–µ–≤–æ–π (v${this.apiVersion})</span>
                            </label>
                        </div>
                    </div>
                </div>
                
                <div class="grid grid-2">
                    ${this.modules.map(module => `
                        <div class="module-card card">
                            <div class="module-header">
                                <h3>${module.name}</h3>
                                <span class="module-badge">${module.id}</span>
                            </div>
                            <p>${module.description}</p>
                            
                            <div class="form-group">
                                <label for="${module.id}-query">–ó–∞–ø—Ä–æ—Å:</label>
                                <input type="text" id="${module.id}-query" class="form-control" 
                                       placeholder="${this.getPlaceholder(module.id)}">
                            </div>
                            
                            <div class="module-actions">
                                <button class="btn btn-primary" data-module="${module.id}">
                                    üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–¥—É–ª—å
                                </button>
                                <button class="btn btn-secondary" data-module="${module.id}" data-action="test">
                                    üß™ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
                                </button>
                            </div>
                            
                            <div class="request-info">
                                <small>Endpoint: <code>/api/<span class="mode-dynamic">t</span>${this.apiVersion}/${module.id}</code></small>
                            </div>
                            
                            <div id="${module.id}-result" class="result-container" style="display: none;">
                                <div class="result-header">
                                    <h4>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:</h4>
                                    <div class="result-meta">
                                        <span class="mode-indicator"></span>
                                        <span class="timestamp"></span>
                                    </div>
                                </div>
                                <pre class="result-output"></pre>
                            </div>
                        </div>
                    `).join('')}
                </div>
            </div>
        `;
    }

    getPlaceholder(moduleId) {
        const placeholders = {
            'suggest': '–Ω–∞–ø—Ä–∏–º–µ—Ä: iPhone',
            'search': '–Ω–∞–ø—Ä–∏–º–µ—Ä: —Å–º–∞—Ä—Ç—Ñ–æ–Ω',
            'product': '–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789',
            'brand': '–Ω–∞–ø—Ä–∏–º–µ—Ä: 6049',
            'seller': '–Ω–∞–ø—Ä–∏–º–µ—Ä: 12345'
        };
        return placeholders[moduleId] || '–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å...';
    }

    setupEventListeners() {
        this.querySelectorAll('button[data-module]').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const moduleId = e.target.dataset.module;
                const isQuickTest = e.target.dataset.action === 'test';
                this.runModule(moduleId, isQuickTest);
            });
        });

        this.querySelectorAll('input[name="mode"]').forEach(radio => {
            radio.addEventListener('change', (e) => {
                this.updateModeIndicators(e.target.value);
            });
        });

        this.setupQuickTestData();
    }

    setupQuickTestData() {
        const testData = {
            'suggest': 'iPhone',
            'search': '—Å–º–∞—Ä—Ç—Ñ–æ–Ω',
            'product': '123456789',
            'brand': '6049',
            'seller': '12345'
        };

        Object.entries(testData).forEach(([moduleId, value]) => {
            const input = document.getElementById(`${moduleId}-query`);
            if (input) input.value = value;
        });
    }

    updateModeIndicators(mode) {
        this.querySelectorAll('.mode-dynamic').forEach(el => {
            el.textContent = mode;
        });
    }

    async runModule(moduleId, isQuickTest = false) {
        const queryInput = document.getElementById(`${moduleId}-query`);
        const modeRadio = this.querySelector('input[name="mode"]:checked');
        const resultContainer = document.getElementById(`${moduleId}-result`);
        const resultOutput = resultContainer.querySelector('.result-output');
        const modeIndicator = resultContainer.querySelector('.mode-indicator');
        const timestamp = resultContainer.querySelector('.timestamp');
        
        const query = isQuickTest ? this.getQuickTestQuery(moduleId) : queryInput.value.trim();
        const mode = modeRadio.value;

        if (!query && !isQuickTest) {
            alert('–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
            return;
        }

        resultContainer.style.display = 'block';
        resultOutput.textContent = '‚è≥ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞...';
        modeIndicator.className = `mode-indicator ${mode === 't' ? 'test' : 'prod'}`;
        modeIndicator.textContent = mode === 't' ? 'TEST' : 'PROD';
        timestamp.textContent = new Date().toLocaleTimeString();

        try {
            const result = await this.makeApiRequest(mode, moduleId, query);
            resultOutput.textContent = JSON.stringify(result, null, 2);
            resultOutput.className = 'result-output success';
        } catch (error) {
            resultOutput.textContent = `‚ùå –û—à–∏–±–∫–∞: ${error.message}`;
            resultOutput.className = 'result-output error';
        }
    }

    getQuickTestQuery(moduleId) {
        const testQueries = {
            'suggest': 'iPhone',
            'search': '—Å–º–∞—Ä—Ç—Ñ–æ–Ω',
            'product': '123456789',
            'brand': '6049',
            'seller': '12345'
        };
        return testQueries[moduleId];
    }

    async makeApiRequest(mode, module, query) {
        const version = this.apiVersion;
        const url = `${window.adminDashboard.apiBase}/api/${mode}${version}/${module}`;
        
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                query: query,
                options: {
                    timeout: 10000
                }
            })
        });

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        return await response.json();
    }
}

customElements.define('module-tester', ModuleTester);


---

class DatabaseExplorer extends HTMLElement {
    connectedCallback() {
        this.render();
        this.setupEventListeners();
    }

    render() {
        this.innerHTML = `
            <div class="card">
                <h2>üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö</h2>
                <p>–ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –≤ –±–∞–∑–µ</p>
                
                <div class="control-panel">
                    <div class="form-group">
                        <label>–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:</label>
                        <div class="mode-selector">
                            <label class="mode-option">
                                <input type="radio" name="db-mode" value="t" checked>
                                <span class="mode-badge test">–¢–µ—Å—Ç–æ–≤—ã–π (t1)</span>
                            </label>
                            <label class="mode-option">
                                <input type="radio" name="db-mode" value="v">
                                <span class="mode-badge prod">–ë–æ–µ–≤–æ–π (v1)</span>
                            </label>
                        </div>
                    </div>
                </div>

                <div class="grid grid-2">
                    <div class="card">
                        <h3>–¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</h3>
                        <div id="tables-list" class="result-container">
                            –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–±–ª–∏—Ü...
                        </div>
                        <button class="btn btn-primary" id="loadTables">
                            –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
                        </button>
                    </div>

                    <div class="card">
                        <h3>–ó–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ</h3>
                        <div class="form-group">
                            <label for="table-select">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É:</label>
                            <select id="table-select" class="form-control">
                                <option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É --</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="row-limit">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:</label>
                            <input type="number" id="row-limit" class="form-control" value="10" min="1" max="100">
                        </div>
                        <button class="btn btn-primary" id="loadTableData">
                            –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                        </button>
                    </div>
                </div>

                <div id="table-result" class="result-container" style="display: none;">
                    <h4>–î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:</h4>
                    <pre class="result-output"></pre>
                </div>
            </div>
        `;
    }

    setupEventListeners() {
        this.querySelector('#loadTables').addEventListener('click', () => {
            this.loadTables();
        });

        this.querySelector('#loadTableData').addEventListener('click', () => {
            this.loadTableData();
        });

        this.loadTables();
    }

    async loadTables() {
        const mode = this.querySelector('input[name="db-mode"]:checked').value;
        const tablesList = this.querySelector('#tables-list');
        
        try {
            tablesList.innerHTML = '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–±–ª–∏—Ü...';
            
            const response = await fetch(`${window.adminDashboard.apiBase}/api/${mode}1/db/tables`);
            const data = await response.json();
            
            let html = '<div class="tables-grid">';
            data.tables.forEach(table => {
                html += `
                    <div class="table-item">
                        <strong>${table.name}</strong>
                        <span class="table-count">${table.count} –∑–∞–ø–∏—Å–µ–π</span>
                        <p class="table-desc">${table.description}</p>
                    </div>
                `;
            });
            html += '</div>';
            
            tablesList.innerHTML = html;
            
            this.updateTableSelect(data.tables);
            
        } catch (error) {
            tablesList.innerHTML = `‚ùå –û—à–∏–±–∫–∞: ${error.message}`;
        }
    }

    updateTableSelect(tables) {
        const select = this.querySelector('#table-select');
        select.innerHTML = '<option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É --</option>';
        
        tables.forEach(table => {
            const option = document.createElement('option');
            option.value = table.name;
            option.textContent = `${table.name} (${table.count})`;
            select.appendChild(option);
        });
    }

    async loadTableData() {
        const mode = this.querySelector('input[name="db-mode"]:checked').value;
        const tableSelect = this.querySelector('#table-select');
        const rowLimit = this.querySelector('#row-limit');
        const resultContainer = this.querySelector('#table-result');
        const resultOutput = resultContainer.querySelector('.result-output');
        
        const table = tableSelect.value;
        const limit = rowLimit.value;

        if (!table) {
            alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É');
            return;
        }

        resultContainer.style.display = 'block';
        resultOutput.textContent = '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...';

        try {
            const response = await fetch(`${window.adminDashboard.apiBase}/api/${mode}1/db/query`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    table: table,
                    limit: parseInt(limit)
                })
            });

            const data = await response.json();
            resultOutput.textContent = JSON.stringify(data, null, 2);
            resultOutput.className = 'result-output success';
            
        } catch (error) {
            resultOutput.textContent = `‚ùå –û—à–∏–±–∫–∞: ${error.message}`;
            resultOutput.className = 'result-output error';
        }
    }
}

customElements.define('database-explorer', DatabaseExplorer);


----

// Import mock data
import { 
    generateMetricsData, 
    generateBegetMetrics, 
    systemServices, 
    generateLogs,
    generateIdeas,
    generateTickets,
    generateInternalMessages,
    getTicketCategories,
    getCurrentUser
} from '../mock-data';

class AdminDashboard {
    constructor() {
        this.apiBase = 'http://localhost:8081';
        this.currentTab = 'metrics';
        this.autoRefresh = true;
        this.lastUpdate = null;
        this.websocket = null;
        this.useMocks = false;
        this.mockData = {
            metrics: generateMetricsData(),
            begetMetrics: generateBegetMetrics(),
            services: systemServices,
            logs: generateLogs(100),
            ideas: generateIdeas(),
            tickets: generateTickets(),
            messages: generateInternalMessages(),
            ticketCategories: getTicketCategories(),
            currentUser: getCurrentUser()
        };
        this.init();
    }

    async init() {
        this.setupEventListeners();
        await this.checkServerStatus();
        this.loadComponents();
        this.connectWebSocket();
        this.startAutoUpdate();
        this.updateLastUpdateTime();
        this.startPerformanceMonitor();
    }

    setupEventListeners() {
        // Navigation
        document.querySelectorAll('.nav-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                this.switchTab(e.target.dataset.tab);
            });
        });

        // Global keyboard shortcuts
        document.addEventListener('keydown', (e) => {
            if (e.ctrlKey || e.metaKey) {
                switch(e.key) {
                    case '1': e.preventDefault(); this.switchTab('metrics'); break;
                    case '2': e.preventDefault(); this.switchTab('server'); break;
                    case '3': e.preventDefault(); this.switchTab('services'); break;
                    case '4': e.preventDefault(); this.switchTab('logs'); break;
                    case '5': e.preventDefault(); this.switchTab('ideas'); break;
                    case '6': e.preventDefault(); this.switchTab('tickets'); break;
                    case '7': e.preventDefault(); this.switchTab('messages'); break;
                    case '8': e.preventDefault(); this.switchTab('settings'); break;
                    case 'r': if (!e.shiftKey) { e.preventDefault(); this.refreshCurrentTab(); } break;
                    case 'm': if (e.shiftKey) { e.preventDefault(); this.toggleMockMode(); } break;
                }
            }
        });
    }

    toggleMockMode() {
        this.useMocks = !this.useMocks;
        const status = this.useMocks ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω';
        this.showNotification(`‚ÑπÔ∏è –†–µ–∂–∏–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö ${status}`, 'info');
        this.refreshCurrentTab();
    }

    async checkServerStatus() {
        try {
            const response = await fetch(`${this.apiBase}/health`);
            const data = await response.json();
            
            const statusElement = document.getElementById('serverStatus');
            const indicator = statusElement.querySelector('.status-indicator');
            
            if (data.status === 'ok') {
                indicator.className = 'status-indicator status-online';
                statusElement.querySelector('span:last-child').textContent = '–°–µ—Ä–≤–µ—Ä –æ–Ω–ª–∞–π–Ω';
                this.showNotification('‚úÖ –°–µ—Ä–≤–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω', 'success');
            } else {
                throw new Error('Server not healthy');
            }
        } catch (error) {
            this.handleServerError();
        }
    }

    handleServerError() {
        const statusElement = document.getElementById('serverStatus');
        const indicator = statusElement.querySelector('.status-indicator');
        indicator.className = 'status-indicator status-offline';
        statusElement.querySelector('span:last-child').textContent = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è';
        this.showNotification('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ', 'warning');
        this.useMocks = true;
    }

    async apiCall(endpoint, options = {}) {
        const startTime = Date.now();
        
        // Handle mock data requests
        if (this.useMocks || !navigator.onLine) {
            return this.handleMockRequest(endpoint, options);
        }
        
        try {
            const response = await fetch(`${this.apiBase}${endpoint}`, {
                headers: {
                    'Content-Type': 'application/json',
                    ...options.headers
                },
                ...options
            });
            
            const duration = Date.now() - startTime;
            
            if (!response.ok) {
                if (response.status >= 500) {
                    console.warn('API server error, falling back to mock data');
                    return this.handleMockRequest(endpoint, options);
                }
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            if (duration > 1000) {
                console.warn(`Slow API call: ${endpoint} took ${duration}ms`);
            }
            
            return await response.json();
        } catch (error) {
            console.error('API call failed, falling back to mock data:', error);
            this.showNotification(`‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (${error.message})`, 'warning');
            this.useMocks = true;
            return this.handleMockRequest(endpoint, options);
        }
    }
    
    handleMockRequest(endpoint, options) {
        console.log(`Using mock data for: ${endpoint}`);
        
        // Simulate network delay
        const delay = Math.floor(Math.random() * 300) + 100;
        
        return new Promise((resolve) => {
            setTimeout(() => {
                try {
                    let response;
                    
                    if (endpoint.startsWith('/api/metrics')) {
                        response = {
                            ...this.mockData.metrics,
                            timestamp: new Date().toISOString()
                        };
                    } 
                    else if (endpoint.startsWith('/api/beget-metrics')) {
                        response = {
                            ...this.mockData.begetMetrics,
                            timestamp: new Date().toISOString()
                        };
                    }
                    else if (endpoint.startsWith('/api/services')) {
                        response = Object.values(this.mockData.services);
                    }
                    else if (endpoint.startsWith('/api/logs')) {
                        response = this.mockData.logs;
                    }
                    else if (endpoint.startsWith('/api/ideas')) {
                        response = this.mockData.ideas;
                    }
                    else if (endpoint.startsWith('/api/tickets')) {
                        if (options.method === 'POST') {
                            const newTicket = {
                                id: Math.floor(Math.random() * 1000) + 1000,
                                ...JSON.parse(options.body),
                                createdAt: new Date().toISOString(),
                                updatedAt: new Date().toISOString(),
                                status: 'open',
                                readBy: []
                            };
                            this.mockData.tickets.unshift(newTicket);
                            response = newTicket;
                        } else {
                            response = this.mockData.tickets;
                        }
                    }
                    else if (endpoint.startsWith('/api/messages')) {
                        if (options.method === 'POST') {
                            const newMessage = {
                                id: Math.floor(Math.random() * 1000) + 1000,
                                ...JSON.parse(options.body),
                                createdAt: new Date().toISOString(),
                                read: false,
                                replies: 0
                            };
                            this.mockData.messages.unshift(newMessage);
                            response = newMessage;
                        } else {
                            response = this.mockData.messages;
                        }
                    }
                    else if (endpoint.startsWith('/api/ticket-categories')) {
                        response = this.mockData.ticketCategories;
                    }
                    else if (endpoint.startsWith('/api/current-user')) {
                        response = this.mockData.currentUser;
                    }
                    else {
                        response = {
                            success: true,
                            message: 'Mock data response',
                            endpoint,
                            timestamp: new Date().toISOString()
                        };
                    }
                    
                    resolve(response);
                } catch (error) {
                    console.error('Error in mock request handler:', error);
                    resolve({
                        success: false,
                        error: error.message,
                        endpoint
                    });
                }
            }, delay);
        });
    }

    // ... (rest of the methods remain the same)
    
    showNotification(message, type = 'info') {
        const notifications = document.getElementById('notifications');
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.innerHTML = `
            <div class="notification-content">
                <span class="notification-message">${message}</span>
                <button class="notification-close">&times;</button>
            </div>
        `;

        notification.querySelector('.notification-close').addEventListener('click', () => {
            notification.remove();
        });

        notifications.appendChild(notification);

        // Auto-remove after 5 seconds
        setTimeout(() => {
            if (notification.parentNode) {
                notification.remove();
            }
        }, 5000);
    }

    // Other methods...
    switchTab(tabName) {
        // Hide all tabs
        document.querySelectorAll('.tab-content').forEach(tab => {
            tab.classList.remove('active');
        });
        
        // Remove active class from all buttons
        document.querySelectorAll('.nav-btn').forEach(btn => {
            btn.classList.remove('active');
        });

        // Show selected tab and activate button
        const targetTab = document.getElementById(tabName);
        if (targetTab) {
            targetTab.classList.add('active');
            document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');
            this.currentTab = tabName;
            document.title = `${this.getTabTitle(tabName)} - Wildberries Admin`;
            this.onTabChange(tabName);
        }
    }

    getTabTitle(tabName) {
        const titles = {
            'metrics': '–ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã',
            'server': '–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞',
            'services': '–°–µ—Ä–≤–∏—Å—ã',
            'logs': '–õ–æ–≥–∏',
            'ideas': '–ò–¥–µ–∏',
            'tickets': '–û–±—Ä–∞—â–µ–Ω–∏—è',
            'messages': '–°–æ–æ–±—â–µ–Ω–∏—è',
            'modules': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π',
            'database': '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö',
            'queue': '–û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞–Ω–∏–π',
            'tests': '–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã',
            'settings': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã'
        };
        return titles[tabName] || tabName;
    }

    onTabChange(tabName) {
        console.log(`Switched to tab: ${tabName}`);
        if (['metrics', 'server', 'services', 'logs'].includes(tabName)) {
            this.refreshTabData(tabName);
        }
    }

    refreshTabData(tabName) {
        const tab = document.getElementById(tabName);
        if (!tab) return;

        const component = tab.querySelector(`${tabName}-panel`) || 
                         tab.querySelector(`${tabName}-tester`) || 
                         tab.querySelector(`${tabName}-explorer`) || 
                         tab.querySelector(`${tabName}-monitor`) || 
                         tab.querySelector(`${tabName}-runner`);
        
        if (component && component.refresh) {
            component.refresh();
        }
    }

    refreshCurrentTab() {
        this.refreshTabData(this.currentTab);
    }

    updateLastUpdateTime() {
        this.lastUpdate = new Date();
        const timeString = this.lastUpdate.toLocaleTimeString();
        const element = document.getElementById('lastUpdate');
        if (element) {
            element.textContent = timeString;
        }
    }

    loadComponents() {
        const components = [
            'metrics.js',
            'server-status.js',
            'services.js',
            'logs.js',
            'ideas.js',
            'tickets.js',
            'messages.js',
            'module-tester.js',
            'database-explorer.js',
            'queue-monitor.js',
            'test-runner.js',
            'settings.js'
        ];

        components.forEach(component => {
            const script = document.createElement('script');
            script.type = 'module';
            script.src = `./components/${component}`;
            script.onerror = () => console.warn(`Failed to load component: ${component}`);
            document.head.appendChild(script);
        });
    }

    startPerformanceMonitor() {
        if ('performance' in window) {
            performance.mark('dashboard-start');
            
            window.addEventListener('load', () => {
                performance.mark('dashboard-loaded');
                performance.measure('dashboard-load', 'dashboard-start', 'dashboard-loaded');
                
                const loadTime = performance.getEntriesByName('dashboard-load')[0];
                console.log(`Dashboard loaded in ${loadTime.duration.toFixed(2)}ms`);
            });
        }
    }

    cleanup() {
        if (this.websocket) {
            this.websocket.close();
        }
        
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
        }
    }
}

// Initialize dashboard when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    window.adminDashboard = new AdminDashboard();
    
    // Add cleanup on page unload
    window.addEventListener('beforeunload', () => {
        if (window.adminDashboard) {
            window.adminDashboard.cleanup();
        }
    });
});

export { AdminDashboard };
