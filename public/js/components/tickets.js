// admin-dashboard/components/tickets.js
// –û–ø–∏—Å–∞–Ω–∏–µ: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
// –õ–æ–≥–∏–∫–∞: –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è
// –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: HTMLElement, fetch API
// –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: –†–µ–∞–ª–∏–∑—É–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞–º–∏, –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏

class TicketsPanel extends HTMLElement {
    constructor() {
        super();
        this.tickets = [];
        this.categories = [
            { id: 'billing', name: '–ë–∏–ª–ª–∏–Ω–≥' },
            { id: 'technical', name: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã' },
            { id: 'account', name: '–£—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å' },
            { id: 'other', name: '–î—Ä—É–≥–æ–µ' }
        ];
        this.filters = {
            type: 'all',
            status: 'all',
            priority: 'all',
            category: 'all',
            search: ''
        };
        this.currentUser = 'admin'; // Current user
    }

    connectedCallback() {
        this.render();
        this.loadTickets();
        this.loadCategories();
    }

    render() {
        this.innerHTML = `
            <div class="card">
                <div class="tickets-header">
                    <h2>üé´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è–º–∏</h2>
                    <button class="btn btn-primary" id="new-ticket-btn">
                        ‚ûï –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
                    </button>
                </div>
                <p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏</p>

                <div class="tickets-controls">
                    <div class="filters-grid">
                        <div class="form-group">
                            <label>–¢–∏–ø:</label>
                            <select class="form-control" id="type-filter">
                                <option value="all">–í—Å–µ —Ç–∏–ø—ã</option>
                                <option value="ticket">–û–±—Ä–∞—â–µ–Ω–∏—è</option>
                                <option value="notification">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>–°—Ç–∞—Ç—É—Å:</label>
                            <select class="form-control" id="status-filter">
                                <option value="all">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
                                <option value="open">–û—Ç–∫—Ä—ã—Ç—ã–µ</option>
                                <option value="in_progress">–í —Ä–∞–±–æ—Ç–µ</option>
                                <option value="resolved">–†–µ—à–µ–Ω–æ</option>
                                <option value="closed">–ó–∞–∫—Ä—ã—Ç–æ</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</label>
                            <select class="form-control" id="priority-filter">
                                <option value="all">–í—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã</option>
                                <option value="low">–ù–∏–∑–∫–∏–π</option>
                                <option value="medium">–°—Ä–µ–¥–Ω–∏–π</option>
                                <option value="high">–í—ã—Å–æ–∫–∏–π</option>
                                <option value="critical">–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</label>
                            <select class="form-control" id="category-filter">
                                <option value="all">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
                                ${this.categories.map(cat => 
                                    `<option value="${cat.id}">${cat.name}</option>`
                                ).join('')}
                            </select>
                        </div>
                    </div>
                    <div class="search-box">
                        <input type="text" id="search-tickets" class="form-control" placeholder="üîç –ü–æ–∏—Å–∫ –ø–æ –æ–±—Ä–∞—â–µ–Ω–∏—è–º...">
                    </div>
                </div>

                <div class="tickets-stats">
                    <div class="stat-card">
                        <span class="stat-number" id="total-tickets">0</span>
                        <span class="stat-label">–í—Å–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏–π</span>
                    </div>
                    <div class="stat-card">
                        <span class="stat-number" id="open-tickets">0</span>
                        <span class="stat-label">–û—Ç–∫—Ä—ã—Ç–æ</span>
                    </div>
                    <div class="stat-card">
                        <span class="stat-number" id="in-progress-tickets">0</span>
                        <span class="stat-label">–í —Ä–∞–±–æ—Ç–µ</span>
                    </div>
                    <div class="stat-card">
                        <span class="stat-number" id="high-priority-tickets">0</span>
                        <span class="stat-label">–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç</span>
                    </div>
                </div>

                <div class="tickets-container">
                    <div id="tickets-list" class="tickets-list">
                        <div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π...</div>
                    </div>
                </div>
            </div>

            <!-- New Ticket Modal -->
            <div id="new-ticket-modal" class="modal" style="display: none;">
                <div class="modal-content large">
                    <div class="modal-header">
                        <h3>üé´ –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ</h3>
                        <button class="close-modal">&times;</button>
                    </div>
                    <div class="modal-body">
                        <form id="new-ticket-form">
                            <div class="form-grid">
                                <div class="form-group">
                                    <label>–¢–µ–º–∞:</label>
                                    <input type="text" class="form-control" name="subject" required>
                                </div>
                                <div class="form-group">
                                    <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</label>
                                    <select class="form-control" name="category" required>
                                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
                                        ${this.categories.map(cat => 
                                            `<option value="${cat.id}">${cat.name}</option>`
                                        ).join('')}
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</label>
                                    <select class="form-control" name="priority" required>
                                        <option value="low">–ù–∏–∑–∫–∏–π</option>
                                        <option value="medium" selected>–°—Ä–µ–¥–Ω–∏–π</option>
                                        <option value="high">–í—ã—Å–æ–∫–∏–π</option>
                                        <option value="critical">–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π</option>
                                    </select>
                                </div>
                                <div class="form-group full-width">
                                    <label>–°–æ–æ–±—â–µ–Ω–∏–µ:</label>
                                    <textarea class="form-control" name="message" rows="5" required></textarea>
                                </div>
                                <div class="form-actions">
                                    <button type="button" class="btn btn-secondary close-modal">–û—Ç–º–µ–Ω–∞</button>
                                    <button type="submit" class="btn btn-primary">–°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ</button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        `;

        this.setupEventListeners();
    }

    setupEventListeners() {
        // –§–∏–ª—å—Ç—Ä—ã
        document.getElementById('type-filter').addEventListener('change', (e) => {
            this.filters.type = e.target.value;
            this.renderTickets();
        });

        document.getElementById('status-filter').addEventListener('change', (e) => {
            this.filters.status = e.target.value;
            this.renderTickets();
        });

        document.getElementById('priority-filter').addEventListener('change', (e) => {
            this.filters.priority = e.target.value;
            this.renderTickets();
        });

        document.getElementById('category-filter').addEventListener('change', (e) => {
            this.filters.category = e.target.value;
            this.renderTickets();
        });

        document.getElementById('search-tickets').addEventListener('input', (e) => {
            this.filters.search = e.target.value.toLowerCase();
            this.renderTickets();
        });

        // –ö–Ω–æ–ø–∫–∞ –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è
        document.getElementById('new-ticket-btn').addEventListener('click', () => {
            document.getElementById('new-ticket-modal').style.display = 'block';
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        document.querySelectorAll('.close-modal').forEach(btn => {
            btn.addEventListener('click', () => {
                document.getElementById('new-ticket-modal').style.display = 'none';
            });
        });

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
        document.getElementById('new-ticket-form').addEventListener('submit', (e) => {
            e.preventDefault();
            this.createTicket(new FormData(e.target));
        });
    }

    async loadTickets() {
        try {
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ API
            // const response = await fetch('/api/tickets');
            // this.tickets = await response.json();
            
            // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            this.tickets = [
                {
                    id: 1,
                    subject: '–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
                    type: 'ticket',
                    status: 'open',
                    priority: 'high',
                    category: 'account',
                    created: new Date(Date.now() - 3600000).toISOString(),
                    updated: new Date().toISOString(),
                    user: { id: 'user1', name: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤', email: 'ivan@example.com' },
                    messages: [
                        {
                            id: 1,
                            user: { id: 'user1', name: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤' },
                            message: '–ù–µ –º–æ–≥—É –≤–æ–π—Ç–∏ –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –í—ã–¥–∞–µ—Ç –æ—à–∏–±–∫—É 403.',
                            timestamp: new Date(Date.now() - 3600000).toISOString()
                        }
                    ]
                },
                {
                    id: 2,
                    subject: '–ù–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É',
                    type: 'ticket',
                    status: 'in_progress',
                    priority: 'medium',
                    category: 'billing',
                    created: new Date(Date.now() - 86400000).toISOString(),
                    updated: new Date().toISOString(),
                    user: { id: 'user2', name: '–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞', email: 'maria@example.com' },
                    messages: [
                        {
                            id: 1,
                            user: { id: 'user2', name: '–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞' },
                            message: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ù–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü.',
                            timestamp: new Date(Date.now() - 86400000).toISOString()
                        },
                        {
                            id: 2,
                            user: { id: 'admin', name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' },
                            message: '–ú–∞—Ä–∏—è, –¥–æ–±—Ä—ã–π –¥–µ–Ω—å! –ü—Ä–æ–≤–µ—Ä–∏–º –∏ –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞.',
                            timestamp: new Date().toISOString()
                        }
                    ]
                },
                {
                    id: 3,
                    subject: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã',
                    type: 'notification',
                    status: 'open',
                    priority: 'high',
                    category: 'technical',
                    created: new Date().toISOString(),
                    updated: new Date().toISOString(),
                    message: '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã 15.11.2023 —Å 03:00 –¥–æ 05:00 –ú–°–ö',
                    isRead: false
                }
            ];
            
            this.renderTickets();
            this.updateStats();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—Ä–∞—â–µ–Ω–∏–π:', error);
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è');
        }
    }

    async loadCategories() {
        try {
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ API
            // const response = await fetch('/api/tickets/categories');
            // this.categories = await response.json();
            
            // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ
            this.renderCategories();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
        }
    }

    renderTickets() {
        const ticketsList = document.getElementById('tickets-list');
        if (!ticketsList) return;

        const filtered = this.tickets.filter(ticket => {
            // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É
            if (this.filters.type !== 'all' && ticket.type !== this.filters.type) return false;
            
            // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
            if (this.filters.status !== 'all' && ticket.status !== this.filters.status) return false;
            
            // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
            if (this.filters.priority !== 'all' && ticket.priority !== this.filters.priority) return false;
            
            // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if (this.filters.category !== 'all' && ticket.category !== this.filters.category) return false;
            
            // –ü–æ–∏—Å–∫
            if (this.filters.search) {
                const search = this.filters.search.toLowerCase();
                return (
                    ticket.subject.toLowerCase().includes(search) ||
                    (ticket.user && ticket.user.name.toLowerCase().includes(search)) ||
                    (ticket.messages && ticket.messages.some(m => 
                        m.message.toLowerCase().includes(search)
                    ))
                );
            }
            
            return true;
        });

        if (filtered.length === 0) {
            ticketsList.innerHTML = '<div class="no-tickets">–û–±—Ä–∞—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
            return;
        }

        ticketsList.innerHTML = filtered.map(ticket => {
            const lastMessage = ticket.messages && ticket.messages.length > 0 
                ? ticket.messages[ticket.messages.length - 1] 
                : null;
            
            const category = this.categories.find(c => c.id === ticket.category) || { name: '–î—Ä—É–≥–æ–µ' };
            
            return `
                <div class="ticket-item ${ticket.status} ${ticket.priority}-priority" data-id="${ticket.id}">
                    <div class="ticket-priority"></div>
                    <div class="ticket-content">
                        <div class="ticket-header">
                            <span class="ticket-id">#${ticket.id}</span>
                            <span class="ticket-subject">${ticket.subject}</span>
                            <span class="ticket-category">${category.name}</span>
                            <span class="ticket-time">${this.formatDate(ticket.updated)}</span>
                        </div>
                        <div class="ticket-preview">
                            ${ticket.type === 'notification' 
                                ? `<div class="notification-message">${ticket.message}</div>` 
                                : lastMessage 
                                    ? `<span class="message-sender">${lastMessage.user.name}:</span> ${lastMessage.message.substring(0, 100)}...`
                                    : '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π'}
                        </div>
                        <div class="ticket-meta">
                            <span class="ticket-status ${ticket.status}">${this.getStatusLabel(ticket.status)}</span>
                            <span class="ticket-priority ${ticket.priority}">${this.getPriorityLabel(ticket.priority)}</span>
                            ${ticket.user ? `<span class="ticket-user">${ticket.user.name}</span>` : ''}
                        </div>
                    </div>
                </div>
            `;
        }).join('');
    }

    renderCategories() {
        const categorySelects = [
            document.getElementById('category-filter'),
            document.querySelector('#new-ticket-form [name="category"]')
        ];
        
        categorySelects.forEach(select => {
            if (select) {
                select.innerHTML = `
                    <option value="all">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
                    ${this.categories.map(cat => 
                        `<option value="${cat.id}">${cat.name}</option>`
                    ).join('')}
                `;
            }
        });
    }

    async createTicket(formData) {
        try {
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ API
            // const response = await fetch('/api/tickets', {
            //     method: 'POST',
            //     body: formData
            // });
            // const result = await response.json();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
            const newTicket = {
                id: Date.now(),
                subject: formData.get('subject'),
                type: 'ticket',
                status: 'open',
                priority: formData.get('priority'),
                category: formData.get('category'),
                created: new Date().toISOString(),
                updated: new Date().toISOString(),
                user: { id: this.currentUser, name: '–í—ã' },
                messages: [
                    {
                        id: 1,
                        user: { id: this.currentUser, name: '–í—ã' },
                        message: formData.get('message'),
                        timestamp: new Date().toISOString()
                    }
                ]
            };
            
            this.tickets.unshift(newTicket);
            this.renderTickets();
            this.updateStats();
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
            document.getElementById('new-ticket-modal').style.display = 'none';
            document.getElementById('new-ticket-form').reset();
            
            this.showSuccess('–û–±—Ä–∞—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è:', error);
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ');
        }
    }

    updateStats() {
        const stats = {
            total: this.tickets.length,
            open: this.tickets.filter(t => t.status === 'open').length,
            inProgress: this.tickets.filter(t => t.status === 'in_progress').length,
            highPriority: this.tickets.filter(t => t.priority === 'high' || t.priority === 'critical').length
        };

        document.getElementById('total-tickets').textContent = stats.total;
        document.getElementById('open-tickets').textContent = stats.open;
        document.getElementById('in-progress-tickets').textContent = stats.inProgress;
        document.getElementById('high-priority-tickets').textContent = stats.highPriority;
    }

    getStatusLabel(status) {
        const labels = {
            'open': '–û—Ç–∫—Ä—ã—Ç–æ',
            'in_progress': '–í —Ä–∞–±–æ—Ç–µ',
            'resolved': '–†–µ—à–µ–Ω–æ',
            'closed': '–ó–∞–∫—Ä—ã—Ç–æ'
        };
        return labels[status] || status;
    }

    getPriorityLabel(priority) {
        const labels = {
            'low': '–ù–∏–∑–∫–∏–π',
            'medium': '–°—Ä–µ–¥–Ω–∏–π',
            'high': '–í—ã—Å–æ–∫–∏–π',
            'critical': '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π'
        };
        return labels[priority] || priority;
    }

    formatDate(dateString) {
        if (!dateString) return '';
        const date = new Date(dateString);
        return date.toLocaleString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    }

    showError(message) {
        console.error(message);
        alert(`–û—à–∏–±–∫–∞: ${message}`);
    }

    showSuccess(message) {
        console.log(message);
        alert(`–£—Å–ø–µ—Ö: ${message}`);
    }
}

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
if (!customElements.get('tickets-panel')) {
    customElements.define('tickets-panel', TicketsPanel);
}
