class TestRunner extends HTMLElement {
    constructor() {
        super();
        this.tests = [
            { id: 'api-connectivity', name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API', description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API —Å–µ—Ä–≤–µ—Ä–∞' },
            { id: 'database-connection', name: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î', description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö' },
            { id: 'queue-status', name: '–°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏', description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞–Ω–∏–π' },
            { id: 'module-suggest', name: '–ú–æ–¥—É–ª—å –ø–æ–¥—Å–∫–∞–∑–æ–∫', description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫' },
            { id: 'module-search', name: '–ú–æ–¥—É–ª—å –ø–æ–∏—Å–∫–∞', description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤' },
            { id: 'module-product', name: '–ú–æ–¥—É–ª—å —Ç–æ–≤–∞—Ä–æ–≤', description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏' },
            { id: 'module-brand', name: '–ú–æ–¥—É–ª—å –±—Ä–µ–Ω–¥–æ–≤', description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—Ä–µ–Ω–¥–∞–º–∏' },
            { id: 'module-seller', name: '–ú–æ–¥—É–ª—å –ø—Ä–æ–¥–∞–≤—Ü–æ–≤', description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–¥–∞–≤—Ü–∞–º–∏' },
            { id: 'full-collection', name: '–ü–æ–ª–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö', description: '–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö' },
            { id: 'performance', name: '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', description: '–ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã' }
        ];
    }

    connectedCallback() {
        this.render();
        this.setupEventListeners();
    }

    render() {
        this.innerHTML = `
            <div class="card">
                <h2>üß™ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</h2>
                <p>–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã</p>
                
                <div class="control-panel">
                    <div class="form-group">
                        <label>–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</label>
                        <div class="mode-selector">
                            <label class="mode-option">
                                <input type="radio" name="test-mode" value="t" checked>
                                <span class="mode-badge test">–¢–µ—Å—Ç–æ–≤—ã–π (t1)</span>
                            </label>
                            <label class="mode-option">
                                <input type="radio" name="test-mode" value="v">
                                <span class="mode-badge prod">–ë–æ–µ–≤–æ–π (v1)</span>
                            </label>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label>–î–µ–π—Å—Ç–≤–∏—è:</label>
                        <div class="test-actions">
                            <button id="run-all-tests" class="btn btn-primary">
                                üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
                            </button>
                            <button id="run-selected-tests" class="btn btn-secondary">
                                ‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
                            </button>
                            <button id="stop-tests" class="btn btn-warning" disabled>
                                ‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                            </button>
                            <button id="export-results" class="btn btn-secondary">
                                üìä –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                            </button>
                        </div>
                    </div>
                </div>
                
                <div class="test-filters">
                    <div class="form-group">
                        <input type="text" id="test-search" class="form-control" placeholder="–ü–æ–∏—Å–∫ —Ç–µ—Å—Ç–æ–≤...">
                    </div>
                    <div class="test-categories">
                        <label><input type="checkbox" name="test-category" value="api" checked> API</label>
                        <label><input type="checkbox" name="test-category" value="database" checked> –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö</label>
                        <label><input type="checkbox" name="test-category" value="modules" checked> –ú–æ–¥—É–ª–∏</label>
                        <label><input type="checkbox" name="test-category" value="performance" checked> –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</label>
                    </div>
                </div>
                
                <div class="test-list">
                    ${this.tests.map(test => `
                        <div class="test-card" data-test-id="${test.id}" data-category="${this.getTestCategory(test.id)}">
                            <div class="test-header">
                                <label class="test-selector">
                                    <input type="checkbox" checked>
                                    <span class="test-name">${test.name}</span>
                                </label>
                                <span class="test-status" id="status-${test.id}">‚è≥ –ù–µ –∑–∞–ø—É—Å–∫–∞–ª—Å—è</span>
                            </div>
                            <div class="test-description">
                                ${test.description}
                            </div>
                            <div class="test-details" id="details-${test.id}" style="display: none;">
                                <div class="test-output" id="output-${test.id}"></div>
                                <div class="test-metrics" id="metrics-${test.id}"></div>
                            </div>
                        </div>
                    `).join('')}
                </div>
                
                <div class="test-summary">
                    <div class="summary-stats">
                        <div class="stat">
                            <span class="stat-value" id="total-tests">${this.tests.length}</span>
                            <span class="stat-label">–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤</span>
                        </div>
                        <div class="stat">
                            <span class="stat-value" id="passed-tests">0</span>
                            <span class="stat-label">–ü—Ä–æ–π–¥–µ–Ω–æ</span>
                        </div>
                        <div class="stat">
                            <span class="stat-value" id="failed-tests">0</span>
                            <span class="stat-label">–ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ</span>
                        </div>
                        <div class="stat">
                            <span class="stat-value" id="success-rate">0%</span>
                            <span class="stat-label">–£—Å–ø–µ—à–Ω–æ—Å—Ç—å</span>
                        </div>
                        <div class="stat">
                            <span class="stat-value" id="execution-time">0s</span>
                            <span class="stat-label">–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</span>
                        </div>
                    </div>
                    
                    <div class="test-log" id="test-log">
                        <div class="log-header">
                            <h4>–ñ—É—Ä–Ω–∞–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h4>
                            <button id="clear-log" class="btn btn-sm btn-secondary">–û—á–∏—Å—Ç–∏—Ç—å</button>
                        </div>
                        <div class="log-entries" id="log-entries"></div>
                    </div>
                </div>
            </div>
        `;
    }

    getTestCategory(testId) {
        if (testId.includes('api')) return 'api';
        if (testId.includes('database')) return 'database';
        if (testId.includes('module')) return 'modules';
        if (testId.includes('performance')) return 'performance';
        return 'other';
    }

    setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞–º–∏
        this.querySelector('#run-all-tests').addEventListener('click', () => this.runTests());
        this.querySelector('#run-selected-tests').addEventListener('click', () => this.runTests(true));
        this.querySelector('#stop-tests').addEventListener('click', () => this.stopTests());
        this.querySelector('#export-results').addEventListener('click', () => this.exportResults());
        this.querySelector('#clear-log').addEventListener('click', () => this.clearLog());
        
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
        this.querySelector('#test-search').addEventListener('input', (e) => this.filterTests(e.target.value));
        this.querySelectorAll('input[name="test-category"]').forEach(checkbox => {
            checkbox.addEventListener('change', () => this.filterTests());
        });
        
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ç–µ—Å—Ç–∞
        this.querySelectorAll('.test-card').forEach(card => {
            card.addEventListener('click', (e) => {
                if (!e.target.closest('input[type="checkbox"]')) {
                    const details = card.querySelector('.test-details');
                    details.style.display = details.style.display === 'none' ? 'block' : 'none';
                }
            });
        });
    }

    filterTests(searchTerm = '') {
        const selectedCategories = Array.from(this.querySelectorAll('input[name="test-category"]:checked')).map(cb => cb.value);
        const searchQuery = searchTerm.toLowerCase();
        
        this.querySelectorAll('.test-card').forEach(card => {
            const testId = card.dataset.testId;
            const testName = card.querySelector('.test-name').textContent.toLowerCase();
            const testCategory = card.dataset.category;
            
            const matchesSearch = testName.includes(searchQuery) || 
                                this.tests.find(t => t.id === testId)?.description.toLowerCase().includes(searchQuery);
            const matchesCategory = selectedCategories.includes(testCategory);
            
            if (matchesSearch && matchesCategory) {
                card.style.display = 'block';
            } else {
                card.style.display = 'none';
            }
        });
    }

    async runTests(onlySelected = false) {
        this.isRunning = true;
        this.testResults = [];
        this.startTime = Date.now();
        this.passedCount = 0;
        this.failedCount = 0;
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
        this.updateTestControls(true);
        this.clearLog();
        this.log('–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...', 'info');
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        const testsToRun = [];
        this.querySelectorAll('.test-card').forEach(card => {
            const testId = card.dataset.testId;
            const isSelected = !onlySelected || card.querySelector('input[type="checkbox"]').checked;
            
            if (isSelected && card.style.display !== 'none') {
                testsToRun.push(testId);
                this.updateTestStatus(testId, 'pending', '‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...');
            }
        });
        
        if (testsToRun.length === 0) {
            this.log('–ù–µ—Ç —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞', 'warning');
            this.updateTestControls(false);
            this.isRunning = false;
            return;
        }
        
        // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        for (const testId of testsToRun) {
            if (!this.isRunning) break;
            
            try {
                this.log(`–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: ${this.getTestName(testId)}`, 'info');
                const result = await this.runSingleTest(testId);
                this.testResults.push(result);
                
                if (result.success) {
                    this.passedCount++;
                    this.updateTestStatus(testId, 'success', '‚úÖ –£—Å–ø–µ—à–Ω–æ');
                    this.log(`–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: ${testId} (${result.duration}–º—Å)`, 'success');
                } else {
                    this.failedCount++;
                    this.updateTestStatus(testId, 'error', `‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
                    this.log(`–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: ${testId} - ${result.error}`, 'error');
                }
                
                this.updateTestOutput(testId, result);
                this.updateSummary();
                
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ ${testId}:`, error);
                this.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ ${testId}: ${error.message}`, 'error');
            }
        }
        
        // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        this.isRunning = false;
        this.updateTestControls(false);
        this.log(`–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –£—Å–ø–µ—à–Ω–æ: ${this.passedCount}, –ù–µ—É–¥–∞—á–Ω–æ: ${this.failedCount}`, 
                 this.failedCount === 0 ? 'success' : 'error');
    }

    async runSingleTest(testId) {
        const startTime = Date.now();
        const mode = this.querySelector('input[name="test-mode"]:checked').value;
        
        try {
            const response = await fetch(`${window.adminDashboard.apiBase}/api/${mode}1/test/${testId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const result = await response.json();
            const duration = Date.now() - startTime;
            
            return {
                id: testId,
                name: this.getTestName(testId),
                success: result.success,
                duration: duration,
                timestamp: new Date().toISOString(),
                ...result
            };
            
        } catch (error) {
            return {
                id: testId,
                name: this.getTestName(testId),
                success: false,
                error: error.message,
                duration: Date.now() - startTime,
                timestamp: new Date().toISOString()
            };
        }
    }

    stopTests() {
        this.isRunning = false;
        this.log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º', 'warning');
        this.updateTestControls(false);
    }

    updateTestControls(isRunning) {
        this.querySelector('#run-all-tests').disabled = isRunning;
        this.querySelector('#run-selected-tests').disabled = isRunning;
        this.querySelector('#stop-tests').disabled = !isRunning;
        this.querySelector('#export-results').disabled = isRunning;
    }

    updateTestStatus(testId, status, message) {
        const statusElement = this.querySelector(`#status-${testId}`);
        if (statusElement) {
            statusElement.textContent = message;
            statusElement.className = `test-status status-${status}`;
        }
    }

    updateTestOutput(testId, result) {
        const outputElement = this.querySelector(`#output-${testId}`);
        const metricsElement = this.querySelector(`#metrics-${testId}`);
        
        if (outputElement) {
            outputElement.innerHTML = `
                <h5>–í—ã–≤–æ–¥ —Ç–µ—Å—Ç–∞:</h5>
                <pre>${result.output || '–ù–µ—Ç –≤—ã–≤–æ–¥–∞'}</pre>
                ${result.error ? `<div class="error-message">${result.error}</div>` : ''}
            `;
        }
        
        if (metricsElement && result.metrics) {
            metricsElement.innerHTML = `
                <h5>–ú–µ—Ç—Ä–∏–∫–∏:</h5>
                <div class="metrics-grid">
                    ${Object.entries(result.metrics).map(([key, value]) => `
                        <div class="metric">
                            <span class="metric-label">${this.formatMetricName(key)}:</span>
                            <span class="metric-value">${this.formatMetricValue(key, value)}</span>
                        </div>
                    `).join('')}
                </div>
            `;
        }
    }

    updateSummary() {
        const totalTests = this.passedCount + this.failedCount;
        const successRate = totalTests > 0 ? Math.round((this.passedCount / totalTests) * 100) : 0;
        const duration = Math.round((Date.now() - this.startTime) / 1000);
        
        this.querySelector('#passed-tests').textContent = this.passedCount;
        this.querySelector('#failed-tests').textContent = this.failedCount;
        this.querySelector('#success-rate').textContent = `${successRate}%`;
        this.querySelector('#execution-time').textContent = `${duration}s`;
    }

    log(message, level = 'info') {
        const logEntries = this.querySelector('#log-entries');
        const logEntry = document.createElement('div');
        logEntry.className = `log-entry log-${level}`;
        
        const time = new Date().toLocaleTimeString();
        logEntry.innerHTML = `
            <span class="log-time">[${time}]</span>
            <span class="log-message">${message}</span>
        `;
        
        logEntries.appendChild(logEntry);
        logEntries.scrollTop = logEntries.scrollHeight;
    }

    clearLog() {
        this.querySelector('#log-entries').innerHTML = '';
    }

    exportResults() {
        if (!this.testResults || this.testResults.length === 0) {
            alert('–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
            return;
        }
        
        const data = {
            summary: {
                total: this.testResults.length,
                passed: this.passedCount,
                failed: this.failedCount,
                successRate: Math.round((this.passedCount / this.testResults.length) * 100),
                duration: Math.round((Date.now() - this.startTime) / 1000)
            },
            tests: this.testResults
        };
        
        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        
        const a = document.createElement('a');
        a.href = url;
        a.download = `test-results-${new Date().toISOString().replace(/[:.]/g, '-')}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }

    getTestName(testId) {
        const test = this.tests.find(t => t.id === testId);
        return test ? test.name : testId;
    }

    formatMetricName(name) {
        return name
            .replace(/([A-Z])/g, ' $1')
            .replace(/^./, str => str.toUpperCase())
            .trim();
    }

    formatMetricValue(name, value) {
        if (typeof value === 'number') {
            if (name.includes('time') || name.includes('duration')) {
                return `${value.toFixed(2)}ms`;
            }
            if (name.includes('size') || name.includes('memory')) {
                const sizes = ['B', 'KB', 'MB', 'GB'];
                const i = Math.floor(Math.log(value) / Math.log(1024));
                return `${(value / Math.pow(1024, i)).toFixed(2)} ${sizes[i]}`;
            }
            return value.toLocaleString();
        }
        return value;
    }
}

customElements.define('test-runner', TestRunner);
