From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Admin Dashboard <admin@example.com>
Date: Fri, 12 Jan 2024 12:00:00 +0300
Subject: [PATCH 03/10] Add mock data system for testing and development

Create comprehensive mock data system with:
- API response mocks for all modules
- Metrics and statistics data
- System services state
- Logs generation
- Table data generation

---
 mock-data/index.js       |   8 ++
 mock-data/api-mocks.js    | 119 ++++++++++++++++++++++++
 mock-data/metrics-mocks.js | 108 ++++++++++++++++++++++
 mock-data/system-mocks.js  |  73 +++++++++++++++
 4 files changed, 308 insertions(+)
 create mode 100644 mock-data/index.js
 create mode 100644 mock-data/api-mocks.js
 create mode 100644 mock-data/metrics-mocks.js
 create mode 100644 mock-data/system-mocks.js

diff --git a/mock-data/index.js b/mock-data/index.js
new file mode 100644
index 0000000..1234567
--- /dev/null
+++ b/mock-data/index.js
@@ -0,0 +1,8 @@
+// mock-data/index.js
+export * from './api-mocks.js';
+export * from './metrics-mocks.js';
+export * from './system-mocks.js';
diff --git a/mock-data/api-mocks.js b/mock-data/api-mocks.js
new file mode 100644
index 0000000..1234567
--- /dev/null
+++ b/mock-data/api-mocks.js
@@ -0,0 +1,119 @@
+// mock-data/api-mocks.js
+export const mockData = {
+  suggest: (query) => [
+    { value: `${query} телефон`, count: 1234 },
+    { value: `${query} наушники`, count: 567 },
+    { value: `${query} аксессуары`, count: 234 }
+  ],
+
+  search: (query) => ({
+    products: [
+      { 
+        id: 123456, 
+        name: `Смартфон ${query} Pro`, 
+        price: 29999, 
+        brand: 'Xiaomi',
+        rating: 4.7
+      }
+    ],
+    total: 156
+  }),
+
+  product: (id) => ({
+    nm_id: id,
+    title: `Товар ${id}`,
+    price: 89999,
+    brand: 'Apple',
+    rating: 4.8
+  }),
+
+  brand: (id) => ({
+    id: id,
+    name: 'Apple',
+    products_count: 15600,
+    rating: 4.9
+  }),
+
+  seller: (id) => ({
+    supplier_id: parseInt(id),
+    name: 'Official Store',
+    rating: 4.9,
+    reviews_count: 45678
+  })
+};
+
+export const generateMockTableData = (table, limit) => {
+  const data = [];
+  const now = new Date();
+  
+  for (let i = 0; i < limit; i++) {
+    switch (table) {
+      case 'products':
+        data.push({
+          id: i + 1,
+          nm_id: 1000000 + i,
+          title: `Товар ${i + 1}`,
+          brand: `Бренд ${i % 5}`,
+          price: 1000 + i * 100,
+          rating: (4 + Math.random()).toFixed(1)
+        });
+        break;
+        
+      case 'tasks':
+        data.push({
+          id: i + 1,
+          type: ['search', 'product', 'brand', 'seller'][i % 4],
+          status: ['completed', 'running', 'failed'][i % 3],
+          created_at: new Date(now - i * 60000).toISOString()
+        });
+        break;
+        
+      default:
+        data.push({ 
+          id: i + 1, 
+          name: `Запись ${i + 1}`
+        });
+    }
+  }
+  
+  return data;
+};
diff --git a/mock-data/metrics-mocks.js b/mock-data/metrics-mocks.js
new file mode 100644
index 0000000..1234567
--- /dev/null
+++ b/mock-data/metrics-mocks.js
@@ -0,0 +1,108 @@
+// mock-data/metrics-mocks.js
+export const generateMetricsData = () => {
+  return {
+    queueMetrics: {
+      waiting: Math.floor(Math.random() * 20),
+      active: Math.floor(Math.random() * 10),
+      completed: Math.floor(Math.random() * 1000)
+    },
+    
+    userMetrics: {
+      online: Math.floor(Math.random() * 50) + 10,
+      total: 2345,
+      devices: {
+        desktop: Math.floor(Math.random() * 30) + 10,
+        mobile: Math.floor(Math.random() * 40) + 20
+      }
+    },
+    
+    taskMetrics: {
+      created: {
+        today: Math.floor(Math.random() * 100) + 50,
+        week: Math.floor(Math.random() * 500) + 200
+      }
+    },
+    
+    dataMetrics: {
+      products: {
+        total: 156789,
+        today: Math.floor(Math.random() * 1000) + 500
+      }
+    },
+    
+    performanceMetrics: {
+      cpu: Math.random() * 100,
+      memory: Math.random() * 100
+    }
+  };
+};
+
+export const generateBegetMetrics = () => {
+  return {
+    cpu: {
+      usage: Math.random() * 100,
+      cores: 4
+    },
+    memory: {
+      total: 8,
+      used: Math.random() * 8,
+      usage: Math.random() * 100
+    },
+    services: {
+      nginx: { status: 'running', uptime: '15d 4h' },
+      mysql: { status: 'running', uptime: '15d 4h' },
+      redis: { status: 'running', uptime: '15d 4h' }
+    }
+  };
+};
diff --git a/mock-data/system-mocks.js b/mock-data/system-mocks.js
new file mode 100644
index 0000000..1234567
--- /dev/null
+++ b/mock-data/system-mocks.js
@@ -0,0 +1,73 @@
+// mock-data/system-mocks.js
+export const systemServices = {
+  redis: {
+    name: 'Redis',
+    status: 'running',
+    uptime: '5d 12h 34m',
+    lastRestart: '2024-01-10T08:30:00Z'
+  },
+  
+  websocket: {
+    name: 'WebSocket Server',
+    status: 'running', 
+    uptime: '2d 8h 15m',
+    lastRestart: '2024-01-12T14:20:00Z'
+  },
+  
+  api: {
+    name: 'API Server',
+    status: 'running',
+    uptime: '2d 8h 15m', 
+    lastRestart: '2024-01-12T14:20:00Z'
+  }
+};
+
+export const generateLogs = (limit = 50) => {
+  const levels = ['INFO', 'WARNING', 'ERROR'];
+  const modules = ['API', 'WebSocket', 'Database'];
+  const messages = [
+    'User connected via WebSocket',
+    'Database query executed successfully',
+    'Task completed successfully',
+    'Redis cache updated'
+  ];
+  
+  const logs = [];
+  const now = new Date();
+  
+  for (let i = 0; i < limit; i++) {
+    const level = levels[Math.floor(Math.random() * levels.length)];
+    const module = modules[Math.floor(Math.random() * modules.length)];
+    const message = messages[Math.floor(Math.random() * messages.length)];
+    
+    logs.push({
+      id: i + 1,
+      timestamp: new Date(now - i * 60000).toISOString(),
+      level,
+      module,
+      message
+    });
+  }
+  
+  return logs;
+};
-- 
2.34.1