From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Admin Messaging System <admin@example.com>
Date: Fri, 12 Jan 2024 12:00:00 +0300
Subject: [PATCH 06/10] Add messaging components for ideas, tickets and internal messages

Create React-like components for:
- Ideas management with voting and filtering
- Tickets system with categories and assignments
- Internal messaging with role-based access
- Real-time updates and search

---
 admin-dashboard/components/ideas.js      | 350 +++++++++++++++++++++++
 admin-dashboard/components/tickets.js    | 450 +++++++++++++++++++++++++++++++
 admin-dashboard/components/messages.js   | 400 ++++++++++++++++++++++++++
 admin-dashboard/style.css                | 248 +++++++++++++++++-
 4 files changed, 1447 insertions(+), 1 deletion(-)
 create mode 100644 admin-dashboard/components/ideas.js
 create mode 100644 admin-dashboard/components/tickets.js
 create mode 100644 admin-dashboard/components/messages.js

diff --git a/admin-dashboard/components/ideas.js b/admin-dashboard/components/ideas.js
new file mode 100644
index 0000000..1234567
--- /dev/null
+++ b/admin-dashboard/components/ideas.js
@@ -0,0 +1,350 @@
+class IdeasPanel extends HTMLElement {
+    constructor() {
+        super();
+        this.ideas = [];
+        this.filters = {
+            status: 'all',
+            priority: 'all',
+            category: 'all',
+            search: ''
+        };
+        this.sortBy = 'created-desc';
+    }
+
+    connectedCallback() {
+        this.render();
+        this.loadIdeas();
+    }
+
+    render() {
+        this.innerHTML = `
+            <div class="card">
+                <div class="ideas-header">
+                    <h2>üí° –°–∏—Å—Ç–µ–º–∞ –∏–¥–µ–π</h2>
+                    <button class="btn btn-primary" id="new-idea-btn">
+                        ‚ûï –ù–æ–≤–∞—è –∏–¥–µ—è
+                    </button>
+                </div>
+                <p>–ü—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ –∏ –æ–±—Å—É–∂–¥–∞–π—Ç–µ —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã</p>
+
+                <div class="ideas-controls">
+                    <div class="filters-grid">
+                        <div class="form-group">
+                            <label>–°—Ç–∞—Ç—É—Å:</label>
+                            <select class="form-control" id="status-filter">
+                                <option value="all">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
+                                <option value="new">–ù–æ–≤—ã–µ</option>
+                                <option value="in-progress">–í —Ä–∞–±–æ—Ç–µ</option>
+                                <option value="completed">–ó–∞–≤–µ—Ä—à–µ–Ω—ã</option>
+                                <option value="rejected">–û—Ç–∫–ª–æ–Ω–µ–Ω—ã</option>
+                            </select>
+                        </div>
+                        <div class="form-group">
+                            <label>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</label>
+                            <select class="form-control" id="priority-filter">
+                                <option value="all">–í—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã</option>
+                                <option value="critical">–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π</option>
+                                <option value="high">–í—ã—Å–æ–∫–∏–π</option>
+                                <option value="medium">–°—Ä–µ–¥–Ω–∏–π</option>
+                                <option value="low">–ù–∏–∑–∫–∏–π</option>
+                            </select>
+                        </div>
+                        <div class="form-group">
+                            <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</label>
+                            <select class="form-control" id="category-filter">
+                                <option value="all">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
+                                <option value="feature">–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª</option>
+                                <option value="improvement">–£–ª—É—á—à–µ–Ω–∏–µ</option>
+                                <option value="bugfix">–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</option>
+                                <option value="ui-ux">UI/UX</option>
+                                <option value="performance">–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</option>
+                            </select>
+                        </div>
+                        <div class="form-group">
+                            <label>–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:</label>
+                            <select class="form-control" id="sort-by">
+                                <option value="created-desc">–ù–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞</option>
+                                <option value="created-asc">–°—Ç–∞—Ä—ã–µ —Å–Ω–∞—á–∞–ª–∞</option>
+                                <option value="priority-desc">–ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É</option>
+                                <option value="votes-desc">–ü–æ –≥–æ–ª–æ—Å–∞–º</option>
+                            </select>
+                        </div>
+                    </div>
+                    <div class="search-box">
+                        <input type="text" id="search-ideas" class="form-control" placeholder="üîç –ü–æ–∏—Å–∫ –ø–æ –∏–¥–µ—è–º...">
+                    </div>
+                </div>
+
+                <div class="ideas-stats">
+                    <div class="stat-card">
+                        <span class="stat-number">${this.getStats().total}</span>
+                        <span class="stat-label">–í—Å–µ–≥–æ –∏–¥–µ–π</span>
+                    </div>
+                    <div class="stat-card">
+                        <span class="stat-number">${this.getStats().inProgress}</span>
+                        <span class="stat-label">–í —Ä–∞–±–æ—Ç–µ</span>
+                    </div>
+                    <div class="stat-card">
+                        <span class="stat-number">${this.getStats().completed}</span>
+                        <span class="stat-label">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</span>
+                    </div>
+                    <div class="stat-card">
+                        <span class="stat-number">${this.getStats().highPriority}</span>
+                        <span class="stat-label">–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç</span>
+                    </div>
+                </div>
+
+                <div id="ideas-list" class="ideas-list">
+                    <div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –∏–¥–µ–π...</div>
+                </div>
+            </div>
+
+            <!-- Modal for new idea -->
+            <div id="new-idea-modal" class="modal" style="display: none;">
+                <div class="modal-content">
+                    <div class="modal-header">
+                        <h3>üí° –ù–æ–≤–∞—è –∏–¥–µ—è</h3>
+                        <button class="close-modal">&times;</button>
+                    </div>
+                    <div class="modal-body">
+                        <form id="new-idea-form">
+                            <div class="form-group">
+                                <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</label>
+                                <input type="text" class="form-control" name="title" required 
+                                       placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–¥–µ–∏">
+                            </div>
+                            <div class="form-group">
+                                <label>–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</label>
+                                <textarea class="form-control" name="description" rows="4" 
+                                          placeholder="–û–ø–∏—à–∏—Ç–µ –∏–¥–µ—é –ø–æ–¥—Ä–æ–±–Ω–æ..."></textarea>
+                            </div>
+                            <div class="form-grid">
+                                <div class="form-group">
+                                    <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</label>
+                                    <select class="form-control" name="category" required>
+                                        <option value="feature">–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª</option>
+                                        <option value="improvement">–£–ª—É—á—à–µ–Ω–∏–µ</option>
+                                        <option value="bugfix">–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</option>
+                                        <option value="ui-ux">UI/UX</option>
+                                        <option value="performance">–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</option>
+                                    </select>
+                                </div>
+                                <div class="form-group">
+                                    <label>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</label>
+                                    <select class="form-control" name="priority" required>
+                                        <option value="low">–ù–∏–∑–∫–∏–π</option>
+                                        <option value="medium">–°—Ä–µ–¥–Ω–∏–π</option>
+                                        <option value="high">–í—ã—Å–æ–∫–∏–π</option>
+                                        <option value="critical">–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π</option>
+                                    </select>
+                                </div>
+                            </div>
+                            <div class="form-group">
+                                <label>–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):</label>
+                                <input type="text" class="form-control" name="tags" 
+                                       placeholder="frontend, backend, ui, ...">
+                            </div>
+                            <div class="form-group">
+                                <label>–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ (—á–∞—Å—ã):</label>
+                                <input type="number" class="form-control" name="estimatedHours" 
+                                       min="1" max="200" value="8">
+                            </div>
+                        </form>
+                    </div>
+                    <div class="modal-footer">
+                        <button class="btn btn-secondary" id="cancel-idea">–û—Ç–º–µ–Ω–∞</button>
+                        <button class="btn btn-primary" id="submit-idea">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–¥–µ—é</button>
+                    </div>
+                </div>
+            </div>
+        `;
+
+        this.setupEventListeners();
+    }
+
+    setupEventListeners() {
+        // Filters
+        this.querySelector('#status-filter').addEventListener('change', (e) => {
+            this.filters.status = e.target.value;
+            this.renderIdeas();
+        });
+        
+        this.querySelector('#priority-filter').addEventListener('change', (e) => {
+            this.filters.priority = e.target.value;
+            this.renderIdeas();
+        });
+        
+        this.querySelector('#category-filter').addEventListener('change', (e) => {
+            this.filters.category = e.target.value;
+            this.renderIdeas();
+        });
+        
+        this.querySelector('#sort-by').addEventListener('change', (e) => {
+            this.sortBy = e.target.value;
+            this.renderIdeas();
+        });
+        
+        this.querySelector('#search-ideas').addEventListener('input', (e) => {
+            this.filters.search = e.target.value;
+            this.renderIdeas();
+        });
+
+        // New idea modal
+        this.querySelector('#new-idea-btn').addEventListener('click', () => this.showNewIdeaModal());
+        this.querySelector('.close-modal').addEventListener('click', () => this.hideModal());
+        this.querySelector('#cancel-idea').addEventListener('click', () => this.hideModal());
+        this.querySelector('#submit-idea').addEventListener('click', () => this.submitIdea());
+    }
+
+    async loadIdeas() {
+        try {
+            const response = await fetch(`${window.adminDashboard.apiBase}/admin/ideas`);
+            const data = await response.json();
+            this.ideas = data.ideas;
+            this.renderIdeas();
+        } catch (error) {
+            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–¥–µ–π: ' + error.message);
+        }
+    }
+
+    renderIdeas() {
+        const filteredIdeas = this.filterAndSortIdeas();
+        const ideasList = this.querySelector('#ideas-list');
+        
+        if (filteredIdeas.length === 0) {
+            ideasList.innerHTML = '<div class="no-data">–ò–¥–µ–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
+            return;
+        }
+
+        ideasList.innerHTML = filteredIdeas.map(idea => `
+            <div class="idea-item" data-id="${idea.id}">
+                <div class="idea-header">
+                    <div class="idea-title">
+                        <h4>${idea.title}</h4>
+                        <div class="idea-meta">
+                            <span class="badge category-${idea.category}">${this.getCategoryLabel(idea.category)}</span>
+                            <span class="badge priority-${idea.priority}">${this.getPriorityLabel(idea.priority)}</span>
+                            <span class="badge status-${idea.status}">${this.getStatusLabel(idea.status)}</span>
+                        </div>
+                    </div>
+                    <div class="idea-actions">
+                        <button class="btn-icon" title="–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å">üëç ${idea.votes}</button>
+                        <button class="btn-icon" title="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏">üí¨ ${idea.comments}</button>
+                        <button class="btn-icon" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
+                    </div>
+                </div>
+                <div class="idea-body">
+                    <p>${idea.description}</p>
+                    <div class="idea-details">
+                        <span>‚è±Ô∏è ${idea.estimatedHours}—á</span>
+                        <span>üë§ ${idea.createdBy}</span>
+                        <span>üìÖ ${new Date(idea.createdAt).toLocaleDateString()}</span>
+                        ${idea.assignedTo ? `<span>üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–æ: ${idea.assignedTo}</span>` : ''}
+                    </div>
+                    ${idea.tags && idea.tags.length > 0 ? `
+                        <div class="idea-tags">
+                            ${idea.tags.map(tag => `<span class="tag">${tag}</span>`).join('')}
+                        </div>
+                    ` : ''}
+                </div>
+            </div>
+        `).join('');
+    }
+
+    filterAndSortIdeas() {
+        let filtered = this.ideas.filter(idea => {
+            const matchesStatus = this.filters.status === 'all' || idea.status === this.filters.status;
+            const matchesPriority = this.filters.priority === 'all' || idea.priority === this.filters.priority;
+            const matchesCategory = this.filters.category === 'all' || idea.category === this.filters.category;
+            const matchesSearch = !this.filters.search || 
+                idea.title.toLowerCase().includes(this.filters.search.toLowerCase()) ||
+                idea.description.toLowerCase().includes(this.filters.search.toLowerCase());
+            
+            return matchesStatus && matchesPriority && matchesCategory && matchesSearch;
+        });
+
+        // Sort ideas
+        filtered.sort((a, b) => {
+            switch (this.sortBy) {
+                case 'created-desc':
+                    return new Date(b.createdAt) - new Date(a.createdAt);
+                case 'created-asc':
+                    return new Date(a.createdAt) - new Date(b.createdAt);
+                case 'priority-desc':
+                    return this.getPriorityValue(b.priority) - this.getPriorityValue(a.priority);
+                case 'votes-desc':
+                    return b.votes - a.votes;
+                default:
+                    return 0;
+            }
+        });
+
+        return filtered;
+    }
+
+    getPriorityValue(priority) {
+        const values = { 'critical': 4, 'high': 3, 'medium': 2, 'low': 1 };
+        return values[priority] || 0;
+    }
+
+    getCategoryLabel(category) {
+        const labels = {
+            'feature': '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª',
+            'improvement': '–£–ª—É—á—à–µ–Ω–∏–µ', 
+            'bugfix': '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
+            'ui-ux': 'UI/UX',
+            'performance': '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'
+        };
+        return labels[category] || category;
+    }
+
+    getPriorityLabel(priority) {
+        const labels = {
+            'critical': '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π',
+            'high': '–í—ã—Å–æ–∫–∏–π',
+            'medium': '–°—Ä–µ–¥–Ω–∏–π', 
+            'low': '–ù–∏–∑–∫–∏–π'
+        };
+        return labels[priority] || priority;
+    }
+
+    getStatusLabel(status) {
+        const labels = {
+            'new': '–ù–æ–≤–∞—è',
+            'in-progress': '–í —Ä–∞–±–æ—Ç–µ',
+            'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞',
+            'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞'
+        };
+        return labels[status] || status;
+    }
+
+    getStats() {
+        return {
+            total: this.ideas.length,
+            inProgress: this.ideas.filter(i => i.status === 'in-progress').length,
+            completed: this.ideas.filter(i => i.status === 'completed').length,
+            highPriority: this.ideas.filter(i => i.priority === 'high' || i.priority === 'critical').length
+        };
+    }
+
+    showNewIdeaModal() {
+        this.querySelector('#new-idea-modal').style.display = 'block';
+    }
+
+    hideModal() {
+        this.querySelector('#new-idea-modal').style.display = 'none';
+        this.querySelector('#new-idea-form').reset();
+    }
+
+    async submitIdea() {
+        const form = this.querySelector('#new-idea-form');
+        const formData = new FormData(form);
+        
+        const ideaData = {
+            title: formData.get('title'),
+            description: formData.get('description'),
+            category: formData.get('category'),
+            priority: formData.get('priority'),
+            tags: formData.get('tags').split(',').map(tag => tag.trim()).filter(tag => tag),
+            estimatedHours: parseInt(formData.get('estimatedHours'))
+        };
+
+        try {
+            const response = await fetch(`${window.adminDashboard.apiBase}/admin/ideas`, {
+                method: 'POST',
+                headers: { 'Content-Type': 'application/json' },
+                body: JSON.stringify(ideaData)
+            });
+            
+            if (response.ok) {
+                this.hideModal();
+                this.loadIdeas(); // Reload ideas
+                this.showSuccess('–ò–¥–µ—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!');
+            }
+        } catch (error) {
+            this.showError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–¥–µ–∏: ' + error.message);
+        }
+    }
+
+    showSuccess(message) {
+        alert('‚úÖ ' + message);
+    }
+
+    showError(message) {
+        alert('‚ùå ' + message);
+    }
+}
+
+customElements.define('ideas-panel', IdeasPanel);
diff --git a/admin-dashboard/components/tickets.js b/admin-dashboard/components/tickets.js
new file mode 100644
index 0000000..1234567
--- /dev/null
+++ b/admin-dashboard/components/tickets.js
@@ -0,0 +1,450 @@
+class TicketsPanel extends HTMLElement {
+    constructor() {
+        super();
+        this.tickets = [];
+        this.categories = [];
+        this.filters = {
+            type: 'all',
+            status: 'all', 
+            priority: 'all',
+            category: 'all',
+            search: ''
+        };
+        this.currentUser = 'alex'; // Mock current user
+    }
+
+    connectedCallback() {
+        this.render();
+        this.loadData();
+    }
+
+    render() {
+        this.innerHTML = `
+            <div class="card">
+                <div class="tickets-header">
+                    <h2>üé´ –û–±—Ä–∞—â–µ–Ω–∏—è –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</h2>
+                    <div class="header-actions">
+                        <button class="btn btn-secondary" id="manage-categories">
+                            üè∑Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
+                        </button>
+                        <button class="btn btn-primary" id="new-ticket">
+                            ‚úâÔ∏è –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
+                        </button>
+                    </div>
+                </div>
+                <p>–û–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</p>
+
+                <div class="tickets-controls">
+                    <div class="filters-grid">
+                        <div class="form-group">
+                            <label>–¢–∏–ø:</label>
+                            <select class="form-control" id="type-filter">
+                                <option value="all">–í—Å–µ —Ç–∏–ø—ã</option>
+                                <option value="user">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ</option>
+                                <option value="system">–°–∏—Å—Ç–µ–º–Ω—ã–µ</option>
+                            </select>
+                        </div>
+                        <div class="form-group">
+                            <label>–°—Ç–∞—Ç—É—Å:</label>
+                            <select class="form-control" id="status-filter">
+                                <option value="all">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
+                                <option value="open">–û—Ç–∫—Ä—ã—Ç—ã–µ</option>
+                                <option value="in-progress">–í —Ä–∞–±–æ—Ç–µ</option>
+                                <option value="resolved">–†–µ—à–µ–Ω—ã</option>
+                                <option value="closed">–ó–∞–∫—Ä—ã—Ç—ã</option>
+                            </select>
+                        </div>
+                        <div class="form-group">
+                            <label>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</label>
+                            <select class="form-control" id="priority-filter">
+                                <option value="all">–í—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã</option>
+                                <option value="urgent">–°—Ä–æ—á–Ω—ã–π</option>
+                                <option value="high">–í—ã—Å–æ–∫–∏–π</option>
+                                <option value="medium">–°—Ä–µ–¥–Ω–∏–π</option>
+                                <option value="low">–ù–∏–∑–∫–∏–π</option>
+                            </select>
+                        </div>
+                        <div class="form-group">
+                            <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</label>
+                            <select class="form-control" id="category-filter">
+                                <option value="all">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
+                            </select>
+                        </div>
+                    </div>
+                    <div class="search-box">
+                        <input type="text" id="search-tickets" class="form-control" placeholder="üîç –ü–æ–∏—Å–∫ –ø–æ –æ–±—Ä–∞—â–µ–Ω–∏—è–º...">
+                    </div>
+                </div>
+
+                <div class="tickets-stats">
+                    <div class="stat-card">
+                        <span class="stat-number">${this.getStats().total}</span>
+                        <span class="stat-label">–í—Å–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏–π</span>
+                    </div>
+                    <div class="stat-card">
+                        <span class="stat-number">${this.getStats().unread}</span>
+                        <span class="stat-label">–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ</span>
+                    </div>
+                    <div class="stat-card">
+                        <span class="stat-number">${this.getStats().open}</span>
+                        <span class="stat-label">–û—Ç–∫—Ä—ã—Ç—ã–µ</span>
+                    </div>
+                    <div class="stat-card">
+                        <span class="stat-number">${this.getStats().assignedToMe}</span>
+                        <span class="stat-label">–ù–∞–∑–Ω–∞—á–µ–Ω—ã –º–Ω–µ</span>
+                    </div>
+                </div>
+
+                <div id="tickets-list" class="tickets-list">
+                    <div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π...</div>
+                </div>
+            </div>
+
+            <!-- Categories Modal -->
+            <div id="categories-modal" class="modal" style="display: none;">
+                <div class="modal-content large">
+                    <div class="modal-header">
+                        <h3>üè∑Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π</h3>
+                        <button class="close-modal">&times;</button>
+                    </div>
+                    <div class="modal-body">
+                        <div class="categories-list" id="categories-list">
+                            <!-- Categories will be rendered here -->
+                        </div>
+                        <button class="btn btn-primary" id="add-category">‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é</button>
+                    </div>
+                    <div class="modal-footer">
+                        <button class="btn btn-secondary" id="close-categories">–ó–∞–∫—Ä—ã—Ç—å</button>
+                    </div>
+                </div>
+            </div>
+        `;
+
+        this.setupEventListeners();
+    }
+
+    setupEventListeners() {
+        // Filters
+        ['type-filter', 'status-filter', 'priority-filter', 'category-filter'].forEach(id => {
+            this.querySelector(`#${id}`).addEventListener('change', (e) => {
+                this.filters[e.target.id.replace('-filter', '')] = e.target.value;
+                this.renderTickets();
+            });
+        });
+        
+        this.querySelector('#search-tickets').addEventListener('input', (e) => {
+            this.filters.search = e.target.value;
+            this.renderTickets();
+        });
+
+        // Modals
+        this.querySelector('#manage-categories').addEventListener('click', () => this.showCategoriesModal());
+        this.querySelector('.close-modal').addEventListener('click', () => this.hideCategoriesModal());
+        this.querySelector('#close-categories').addEventListener('click', () => this.hideCategoriesModal());
+        this.querySelector('#add-category').addEventListener('click', () => this.addCategory());
+    }
+
+    async loadData() {
+        try {
+            const [ticketsResponse, categoriesResponse] = await Promise.all([
+                fetch(`${window.adminDashboard.apiBase}/admin/tickets`),
+                fetch(`${window.adminDashboard.apiBase}/admin/tickets/categories`)
+            ]);
+            
+            const ticketsData = await ticketsResponse.json();
+            const categoriesData = await categoriesResponse.json();
+            
+            this.tickets = ticketsData.tickets;
+            this.categories = categoriesData.categories;
+            
+            this.renderCategoryFilter();
+            this.renderTickets();
+        } catch (error) {
+            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
+        }
+    }
+
+    renderCategoryFilter() {
+        const categoryFilter = this.querySelector('#category-filter');
+        categoryFilter.innerHTML = '<option value="all">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>' +
+            this.categories.filter(cat => cat.enabled).map(cat => 
+                `<option value="${cat.id}">${cat.name}</option>`
+            ).join('');
+    }
+
+    renderTickets() {
+        const filteredTickets = this.filterTickets();
+        const ticketsList = this.querySelector('#tickets-list');
+        
+        if (filteredTickets.length === 0) {
+            ticketsList.innerHTML = '<div class="no-data">–û–±—Ä–∞—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
+            return;
+        }
+
+        ticketsList.innerHTML = filteredTickets.map(ticket => `
+            <div class="ticket-item ${!ticket.readBy.includes(this.currentUser) ? 'unread' : ''}" data-id="${ticket.id}">
+                <div class="ticket-header">
+                    <div class="ticket-title">
+                        <h4>${ticket.subject}</h4>
+                        <div class="ticket-meta">
+                            <span class="badge type-${ticket.type}">${ticket.type === 'system' ? 'üîî –°–∏—Å—Ç–µ–º–Ω–æ–µ' : 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</span>
+                            <span class="badge" style="background: ${ticket.category.color}">${ticket.category.name}</span>
+                            <span class="badge priority-${ticket.priority}">${this.getPriorityLabel(ticket.priority)}</span>
+                            <span class="badge status-${ticket.status}">${this.getStatusLabel(ticket.status)}</span>
+                        </div>
+                    </div>
+                    <div class="ticket-actions">
+                        ${!ticket.readBy.includes(this.currentUser) ? `
+                            <button class="btn-icon mark-read" title="–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º">üëÅÔ∏è</button>
+                        ` : ''}
+                        <button class="btn-icon" title="–û—Ç–≤–µ—Ç–∏—Ç—å">‚Ü©Ô∏è</button>
+                        <button class="btn-icon" title="–ù–∞–∑–Ω–∞—á–∏—Ç—å">üë§</button>
+                        <button class="btn-icon" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
+                    </div>
+                </div>
+                <div class="ticket-body">
+                    <p>${ticket.message}</p>
+                    <div class="ticket-details">
+                        <span>üìÖ ${new Date(ticket.createdAt).toLocaleString()}</span>
+                        <span>üë§ ${ticket.fromUser === 'system' ? '–°–∏—Å—Ç–µ–º–∞' : ticket.fromUser}</span>
+                        ${ticket.assignedTo ? `<span>üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–æ: ${ticket.assignedTo}</span>` : ''}
+                        ${ticket.readBy.length > 0 ? `<span>üëÅÔ∏è –ü—Ä–æ—á–∏—Ç–∞–ª–∏: ${ticket.readBy.join(', ')}</span>` : ''}
+                    </div>
+                    ${ticket.attachments && ticket.attachments.length > 0 ? `
+                        <div class="ticket-attachments">
+                            <strong>–í–ª–æ–∂–µ–Ω–∏—è:</strong>
+                            ${ticket.attachments.map(att => 
+                                `<span class="attachment">üìé ${att.name} (${att.size})</span>`
+                            ).join('')}
+                        </div>
+                    ` : ''}
+                </div>
+            </div>
+        `).join('');
+
+        // Add event listeners for mark as read
+        ticketsList.querySelectorAll('.mark-read').forEach(btn => {
+            btn.addEventListener('click', (e) => {
+                e.stopPropagation();
+                const ticketId = e.target.closest('.ticket-item').dataset.id;
+                this.markAsRead(ticketId);
+            });
+        });
+    }
+
+    filterTickets() {
+        return this.tickets.filter(ticket => {
+            const matchesType = this.filters.type === 'all' || ticket.type === this.filters.type;
+            const matchesStatus = this.filters.status === 'all' || ticket.status === this.filters.status;
+            const matchesPriority = this.filters.priority === 'all' || ticket.priority === this.filters.priority;
+            const matchesCategory = this.filters.category === 'all' || ticket.category.id == this.filters.category;
+            const matchesSearch = !this.filters.search || 
+                ticket.subject.toLowerCase().includes(this.filters.search.toLowerCase()) ||
+                ticket.message.toLowerCase().includes(this.filters.search.toLowerCase());
+            
+            return matchesType && matchesStatus && matchesPriority && matchesCategory && matchesSearch;
+        });
+    }
+
+    getPriorityLabel(priority) {
+        const labels = {
+            'urgent': '–°—Ä–æ—á–Ω—ã–π',
+            'high': '–í—ã—Å–æ–∫–∏–π',
+            'medium': '–°—Ä–µ–¥–Ω–∏–π',
+            'low': '–ù–∏–∑–∫–∏–π'
+        };
+        return labels[priority] || priority;
+    }
+
+    getStatusLabel(status) {
+        const labels = {
+            'open': '–û—Ç–∫—Ä—ã—Ç–æ',
+            'in-progress': '–í —Ä–∞–±–æ—Ç–µ',
+            'resolved': '–†–µ—à–µ–Ω–æ',
+            'closed': '–ó–∞–∫—Ä—ã—Ç–æ'
+        };
+        return labels[status] || status;
+    }
+
+    getStats() {
+        return {
+            total: this.tickets.length,
+            unread: this.tickets.filter(t => !t.readBy.includes(this.currentUser)).length,
+            open: this.tickets.filter(t => t.status === 'open').length,
+            assignedToMe: this.tickets.filter(t => t.assignedTo === this.currentUser).length
+        };
+    }
+
+    showCategoriesModal() {
+        this.renderCategoriesList();
+        this.querySelector('#categories-modal').style.display = 'block';
+    }
+
+    hideCategoriesModal() {
+        this.querySelector('#categories-modal').style.display = 'none';
+    }
+
+    renderCategoriesList() {
+        const categoriesList = this.querySelector('#categories-list');
+        categoriesList.innerHTML = this.categories.map(category => `
+            <div class="category-item" data-id="${category.id}">
+                <div class="category-info">
+                    <span class="category-color" style="background: ${category.color}"></span>
+                    <div class="category-details">
+                        <strong>${category.name}</strong>
+                        <p>${category.description}</p>
+                    </div>
+                </div>
+                <div class="category-actions">
+                    <label class="toggle">
+                        <input type="checkbox" ${category.enabled ? 'checked' : ''} 
+                               onchange="this.closest('.tickets-panel').toggleCategory(${category.id}, this.checked)">
+                        <span class="slider"></span>
+                    </label>
+                    <button class="btn-icon" onclick="this.closest('.tickets-panel').editCategory(${category.id})">‚úèÔ∏è</button>
+                    ${category.id > 5 ? `<button class="btn-icon" onclick="this.closest('.tickets-panel').deleteCategory(${category.id})">üóëÔ∏è</button>` : ''}
+                </div>
+            </div>
+        `).join('');
+    }
+
+    async toggleCategory(categoryId, enabled) {
+        try {
+            const response = await fetch(`${window.adminDashboard.apiBase}/admin/tickets/categories`, {
+                method: 'PUT',
+                headers: { 'Content-Type': 'application/json' },
+                body: JSON.stringify({ id: categoryId, enabled })
+            });
+            
+            if (response.ok) {
+                const category = this.categories.find(c => c.id === categoryId);
+                if (category) category.enabled = enabled;
+                this.renderCategoryFilter();
+                this.showSuccess('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
+            }
+        } catch (error) {
+            this.showError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ' + error.message);
+        }
+    }
+
+    addCategory() {
+        const name = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:');
+        if (name) {
+            const newCategory = {
+                id: Math.max(...this.categories.map(c => c.id)) + 1,
+                name: name,
+                color: '#6b7280',
+                description: '–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
+                enabled: true
+            };
+            this.categories.push(newCategory);
+            this.renderCategoriesList();
+            this.renderCategoryFilter();
+            this.showSuccess('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞');
+        }
+    }
+
+    editCategory(categoryId) {
+        const category = this.categories.find(c => c.id === categoryId);
+        if (category) {
+            const newName = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:', category.name);
+            if (newName) {
+                category.name = newName;
+                this.renderCategoriesList();
+                this.renderCategoryFilter();
+                this.showSuccess('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
+            }
+        }
+    }
+
+    deleteCategory(categoryId) {
+        if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é?')) {
+            this.categories = this.categories.filter(c => c.id !== categoryId);
+            this.renderCategoriesList();
+            this.renderCategoryFilter();
+            this.showSuccess('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞');
+        }
+    }
+
+    async markAsRead(ticketId) {
+        try {
+            const response = await fetch(`${window.adminDashboard.apiBase}/admin/tickets/mark-read`, {
+                method: 'POST',
+                headers: { 'Content-Type': 'application/json' },
+                body: JSON.stringify({ ticketId })
+            });
+            
+            if (response.ok) {
+                const ticket = this.tickets.find(t => t.id == ticketId);
+                if (ticket && !ticket.readBy.includes(this.currentUser)) {
+                    ticket.readBy.push(this.currentUser);
+                }
+                this.renderTickets();
+                this.showSuccess('–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ');
+            }
+        } catch (error) {
+            this.showError('–û—à–∏–±–∫–∞: ' + error.message);
+        }
+    }
+
+    showSuccess(message) {
+        // –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
+        console.log('‚úÖ ' + message);
+    }
+
+    showError(message) {
+        console.error('‚ùå ' + message);
+    }
+}
+
+customElements.define('tickets-panel', TicketsPanel);
diff --git a/admin-dashboard/components/messages.js b/admin-dashboard/components/messages.js
new file mode 100644
index 0000000..1234567
--- /dev/null
+++ b/admin-dashboard/components/messages.js
@@ -0,0 +1,400 @@
+class MessagesPanel extends HTMLElement {
+    constructor() {
+        super();
+        this.messages = [];
+        this.currentUser = {
+            id: 'alex',
+            name: '–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤', 
+            role: 'director',
+            specialization: ['management']
+        };
+        this.filters = {
+            type: 'all',
+            priority: 'all',
+            specialization: 'all',
+            search: ''
+        };
+        this.specializations = ['frontend', 'backend', 'design', 'devops', 'analytics', 'management'];
+    }
+
+    connectedCallback() {
+        this.render();
+        this.loadMessages();
+    }
+
+    render() {
+        this.innerHTML = `
+            <div class="card">
+                <div class="messages-header">
+                    <h2>üí¨ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è</h2>
+                    <button class="btn btn-primary" id="new-message-btn">
+                        ‚úâÔ∏è –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
+                    </button>
+                </div>
+                <p>–û–±—â–µ–Ω–∏–µ –º–µ–∂–¥—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã</p>
+
+                <div class="messages-controls">
+                    <div class="filters-grid">
+                        <div class="form-group">
+                            <label>–¢–∏–ø:</label>
+                            <select class="form-control" id="type-filter">
+                                <option value="all">–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è</option>
+                                <option value="incoming">–í—Ö–æ–¥—è—â–∏–µ</option>
+                                <option value="outgoing">–ò—Å—Ö–æ–¥—è—â–∏–µ</option>
+                                <option value="unread">–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ</option>
+                            </select>
+                        </div>
+                        <div class="form-group">
+                            <label>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</label>
+                            <select class="form-control" id="priority-filter">
+                                <option value="all">–í—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã</option>
+                                <option value="urgent">–°—Ä–æ—á–Ω—ã–π</option>
+                                <option value="high">–í—ã—Å–æ–∫–∏–π</option>
+                                <option value="normal">–û–±—ã—á–Ω—ã–π</option>
+                                <option value="low">–ù–∏–∑–∫–∏–π</option>
+                            </select>
+                        </div>
+                        <div class="form-group">
+                            <label>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</label>
+                            <select class="form-control" id="specialization-filter">
+                                <option value="all">–í—Å–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è</option>
+                                ${this.specializations.map(spec => 
+                                    `<option value="${spec}">${this.getSpecializationLabel(spec)}</option>`
+                                ).join('')}
+                            </select>
+                        </div>
+                    </div>
+                    <div class="search-box">
+                        <input type="text" id="search-messages" class="form-control" placeholder="üîç –ü–æ–∏—Å–∫ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º...">
+                    </div>
+                </div>
+
+                <div class="messages-stats">
+                    <div class="stat-card">
+                        <span class="stat-number">${this.getStats().total}</span>
+                        <span class="stat-label">–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π</span>
+                    </div>
+                    <div class="stat-card">
+                        <span class="stat-number">${this.getStats().unread}</span>
+                        <span class="stat-label">–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ</span>
+                    </div>
+                    <div class="stat-card">
+                        <span class="stat-number">${this.getStats().highPriority}</span>
+                        <span class="stat-label">–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç</span>
+                    </div>
+                    <div class="stat-card">
+                        <span class="stat-number">${this.getStats().toMe}</span>
+                        <span class="stat-label">–ê–¥—Ä–µ—Å–æ–≤–∞–Ω—ã –º–Ω–µ</span>
+                    </div>
+                </div>
+
+                <div class="messages-container">
+                    <div id="messages-list" class="messages-list">
+                        <div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...</div>
+                    </div>
+                </div>
+            </div>
+
+            <!-- New Message Modal -->
+            <div id="new-message-modal" class="modal" style="display: none;">
+                <div class="modal-content large">
+                    <div class="modal-header">
+                        <h3>‚úâÔ∏è –ù–æ–≤–æ–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</h3>
+                        <button class="close-modal">&times;</button>
+                    </div>
+                    <div class="modal-body">
+                        <form id="new-message-form">
+                            <div class="form-grid">
+                                <div class="form-group">
+                                    <label>–ö–æ–º—É (—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è):</label>
+                                    <select class="form-control" name="toSpecialization" required>
+                                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é</option>
+                                        ${this.specializations.map(spec => 
+                                            `<option value="${spec}">${this.getSpecializationLabel(spec)}</option>`
+                                        ).join('')}
+                                    </select>
+                                </div>
+                                <div class="form-group">
+                                    <label>–ò–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∞–¥–º–∏–Ω—É:</label>
+                                    <select class="form-control" name="toAdmin">
+                                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</option>
+                                        <option value="maria">–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞ (Frontend/Backend)</option>
+                                        <option value="ivan">–ò–≤–∞–Ω –°–∏–¥–æ—Ä–æ–≤ (Backend)</option>
+                                        <option value="olga">–û–ª—å–≥–∞ –ö—É–∑–Ω–µ—Ü–æ–≤–∞ (Design)</option>
+                                        <option value="dmitry">–î–º–∏—Ç—Ä–∏–π –°–º–∏—Ä–Ω–æ–≤ (Analytics)</option>
+                                        <option value="serg">–°–µ—Ä–≥–µ–π –í–∞—Å–∏–ª—å–µ–≤ (DevOps)</option>
+                                    </select>
+                                </div>
+                            </div>
+                            <div class="form-group">
+                                <label>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</label>
+                                <select class="form-control" name="priority" required>
+                                    <option value="low">–ù–∏–∑–∫–∏–π</option>
+                                    <option value="normal" selected>–û–±—ã—á–Ω—ã–π</option>
+                                    <option value="high">–í—ã—Å–æ–∫–∏–π</option>
+                                    <option value="urgent">–°—Ä–æ—á–Ω—ã–π</option>
+                                </select>
+                            </div>
+                            <div class="form-group">
+                                <label>–¢–µ–º–∞:</label>
+                                <input type="text" class="form-control" name="subject" required 
+                                       placeholder="–ö—Ä–∞—Ç–∫–∞—è —Ç–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏—è">
+                            </div>
+                            <div class="form-group">
+                                <label>–°–æ–æ–±—â–µ–Ω–∏–µ:</label>
+                                <textarea class="form-control" name="message" rows="6" 
+                                          placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è..." required></textarea>
+                            </div>
+                            <div class="form-group">
+                                <label>
+                                    <input type="checkbox" name="important">
+                                    ‚ùó –í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤—ã–¥–µ–ª–µ–Ω–∏–µ)
+                                </label>
+                            </div>
+                        </form>
+                    </div>
+                    <div class="modal-footer">
+                        <button class="btn btn-secondary" id="cancel-message">–û—Ç–º–µ–Ω–∞</button>
+                        <button class="btn btn-primary" id="send-message">üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</button>
+                    </div>
+                </div>
+            </div>
+        `;
+
+        this.setupEventListeners();
+    }
+
+    setupEventListeners() {
+        // Filters
+        this.querySelector('#type-filter').addEventListener('change', (e) => {
+            this.filters.type = e.target.value;
+            this.renderMessages();
+        });
+        
+        this.querySelector('#priority-filter').addEventListener('change', (e) => {
+            this.filters.priority = e.target.value;
+            this.renderMessages();
+        });
+        
+        this.querySelector('#specialization-filter').addEventListener('change', (e) => {
+            this.filters.specialization = e.target.value;
+            this.renderMessages();
+        });
+        
+        this.querySelector('#search-messages').addEventListener('input', (e) => {
+            this.filters.search = e.target.value;
+            this.renderMessages();
+        });
+
+        // New message modal
+        this.querySelector('#new-message-btn').addEventListener('click', () => this.showNewMessageModal());
+        this.querySelector('.close-modal').addEventListener('click', () => this.hideModal());
+        this.querySelector('#cancel-message').addEventListener('click', () => this.hideModal());
+        this.querySelector('#send-message').addEventListener('click', () => this.sendMessage());
+    }
+
+    async loadMessages() {
+        try {
+            const response = await fetch(`${window.adminDashboard.apiBase}/admin/messages/internal`);
+            const data = await response.json();
+            this.messages = data.messages;
+            this.renderMessages();
+        } catch (error) {
+            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: ' + error.message);
+        }
+    }
+
+    renderMessages() {
+        const filteredMessages = this.filterMessages();
+        const messagesList = this.querySelector('#messages-list');
+        
+        if (filteredMessages.length === 0) {
+            messagesList.innerHTML = '<div class="no-data">–°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
+            return;
+        }
+
+        messagesList.innerHTML = filteredMessages.map(msg => `
+            <div class="message-item ${!msg.read ? 'unread' : ''} ${msg.priority === 'urgent' ? 'urgent' : ''}" data-id="${msg.id}">
+                <div class="message-header">
+                    <div class="message-sender">
+                        <strong>${msg.from.name}</strong>
+                        <span class="message-role">${this.getRoleLabel(msg.from.role)}</span>
+                    </div>
+                    <div class="message-meta">
+                        <span class="badge priority-${msg.priority}">${this.getPriorityLabel(msg.priority)}</span>
+                        <span class="badge specialization-${msg.toSpecialization}">${this.getSpecializationLabel(msg.toSpecialization)}</span>
+                        ${msg.toAdmin ? `<span class="badge">üë§ ${msg.toAdmin.name}</span>` : ''}
+                        <span class="message-time">${new Date(msg.createdAt).toLocaleString()}</span>
+                    </div>
+                </div>
+                <div class="message-subject">
+                    <h4>${msg.subject}</h4>
+                    ${!msg.read ? '<span class="unread-indicator">‚óè</span>' : ''}
+                </div>
+                <div class="message-body">
+                    <p>${msg.message}</p>
+                    ${msg.attachments && msg.attachments.length > 0 ? `
+                        <div class="message-attachments">
+                            <strong>–í–ª–æ–∂–µ–Ω–∏—è:</strong>
+                            ${msg.attachments.map(att => 
+                                `<span class="attachment">üìé ${att.name} (${att.size})</span>`
+                            ).join('')}
+                        </div>
+                    ` : ''}
+                </div>
+                <div class="message-footer">
+                    <div class="message-actions">
+                        ${!msg.read ? `
+                            <button class="btn-link mark-read">–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º</button>
+                        ` : `
+                            <span class="read-info">üëÅÔ∏è –ü—Ä–æ—á–∏—Ç–∞–Ω–æ ${new Date(msg.readAt).toLocaleString()}</span>
+                        `}
+                        <button class="btn-link reply-btn">‚Ü©Ô∏è –û—Ç–≤–µ—Ç–∏—Ç—å</button>
+                        <button class="btn-link">üí¨ ${msg.replies} –æ—Ç–≤–µ—Ç–æ–≤</button>
+                    </div>
+                </div>
+            </div>
+        `).join('');
+
+        // Add event listeners
+        messagesList.querySelectorAll('.mark-read').forEach(btn => {
+            btn.addEventListener('click', (e) => {
+                e.stopPropagation();
+                const messageId = e.target.closest('.message-item').dataset.id;
+                this.markAsRead(messageId);
+            });
+        });
+
+        messagesList.querySelectorAll('.reply-btn').forEach(btn => {
+            btn.addEventListener('click', (e) => {
+                e.stopPropagation();
+                const messageId = e.target.closest('.message-item').dataset.id;
+                this.replyToMessage(messageId);
+            });
+        });
+    }
+
+    filterMessages() {
+        return this.messages.filter(msg => {
+            const matchesType = this.filters.type === 'all' || 
+                (this.filters.type === 'incoming' && msg.from.id !== this.currentUser.id) ||
+                (this.filters.type === 'outgoing' && msg.from.id === this.currentUser.id) ||
+                (this.filters.type === 'unread' && !msg.read);
+                
+            const matchesPriority = this.filters.priority === 'all' || msg.priority === this.filters.priority;
+            const matchesSpecialization = this.filters.specialization === 'all' || msg.toSpecialization === this.filters.specialization;
+            const matchesSearch = !this.filters.search || 
+                msg.subject.toLowerCase().includes(this.filters.search.toLowerCase()) ||
+                msg.message.toLowerCase().includes(this.filters.search.toLowerCase());
+            
+            // Check if user has access to this message based on role
+            const hasAccess = this.checkMessageAccess(msg);
+            
+            return matchesType && matchesPriority && matchesSpecialization && matchesSearch && hasAccess;
+        });
+    }
+
+    checkMessageAccess(message) {
+        const roleHierarchy = {
+            'director': ['frontend', 'backend', 'design', 'devops', 'analytics', 'management'],
+            'team-lead': ['frontend', 'backend', 'design'],
+            'developer': ['frontend', 'backend'],
+            'designer': ['design'],
+            'analyst': ['analytics'],
+            'devops': ['devops']
+        };
+
+        // Director can read everything
+        if (this.currentUser.role === 'director') return true;
+        
+        // Check if user's role has access to this specialization
+        const userSpecializations = roleHierarchy[this.currentUser.role] || [];
+        return userSpecializations.includes(message.toSpecialization) ||
+               message.from.id === this.currentUser.id;
+    }
+
+    getSpecializationLabel(spec) {
+        const labels = {
+            'frontend': 'Frontend',
+            'backend': 'Backend', 
+            'design': '–î–∏–∑–∞–π–Ω',
+            'devops': 'DevOps',
+            'analytics': '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
+            'management': '–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç'
+        };
+        return labels[spec] || spec;
+    }
+
+    getRoleLabel(role) {
+        const labels = {
+            'director': '–î–∏—Ä–µ–∫—Ç–æ—Ä',
+            'team-lead': '–¢–∏–º–ª–∏–¥',
+            'developer': '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
+            'designer': '–î–∏–∑–∞–π–Ω–µ—Ä',
+            'analyst': '–ê–Ω–∞–ª–∏—Ç–∏–∫',
+            'devops': 'DevOps'
+        };
+        return labels[role] || role;
+    }
+
+    getPriorityLabel(priority) {
+        const labels = {
+            'urgent': '–°—Ä–æ—á–Ω—ã–π',
+            'high': '–í—ã—Å–æ–∫–∏–π',
+            'normal': '–û–±—ã—á–Ω—ã–π',
+            'low': '–ù–∏–∑–∫–∏–π'
+        };
+        return labels[priority] || priority;
+    }
+
+    getStats() {
+        const accessibleMessages = this.messages.filter(msg => this.checkMessageAccess(msg));
+        return {
+            total: accessibleMessages.length,
+            unread: accessibleMessages.filter(msg => !msg.read).length,
+            highPriority: accessibleMessages.filter(msg => msg.priority === 'high' || msg.priority === 'urgent').length,
+            toMe: accessibleMessages.filter(msg => 
+                msg.toAdmin && msg.toAdmin.id === this.currentUser.id
+            ).length
+        };
+    }
+
+    showNewMessageModal() {
+        this.querySelector('#new-message-modal').style.display = 'block';
+    }
+
+    hideModal() {
+        this.querySelector('#new-message-modal').style.display = 'none';
+        this.querySelector('#new-message-form').reset();
+    }
+
+    async sendMessage() {
+        const form = this.querySelector('#new-message-form');
+        const formData = new FormData(form);
+        
+        const messageData = {
+            toSpecialization: formData.get('toSpecialization'),
+            toAdmin: formData.get('toAdmin') ? { id: formData.get('toAdmin') } : null,
+            priority: formData.get('priority'),
+            subject: formData.get('subject'),
+            message: formData.get('message'),
+            important: formData.get('important') === 'on'
+        };
+
+        try {
+            const response = await fetch(`${window.adminDashboard.apiBase}/admin/messages/internal`, {
+                method: 'POST',
+                headers: { 'Content-Type': 'application/json' },
+                body: JSON.stringify(messageData)
+            });
+            
+            if (response.ok) {
+                this.hideModal();
+                this.loadMessages(); // Reload messages
+                this.showSuccess('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
+            }
+        } catch (error) {
+            this.showError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ' + error.message);
+        }
+    }
+
+    markAsRead(messageId) {
+        const message = this.messages.find(m => m.id == messageId);
+        if (message) {
+            message.read = true;
+            message.readAt = new Date().toISOString();
+            this.renderMessages();
+            this.showSuccess('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ');
+        }
+    }
+
+    replyToMessage(messageId) {
+        const message = this.messages.find(m => m.id == messageId);
+        if (message) {
+            this.showNewMessageModal();
+            const form = this.querySelector('#new-message-form');
+            form.querySelector('[name="toSpecialization"]').value = message.from.specialization[0];
+            form.querySelector('[name="subject"]').value = `Re: ${message.subject}`;
+            form.querySelector('[name="message"]').value = `\n\n--- Original Message ---\n${message.message}`;
+        }
+    }
+
+    showSuccess(message) {
+        alert('‚úÖ ' + message);
+    }
+
+    showError(message) {
+        alert('‚ùå ' + message);
+    }
+}
+
+customElements.define('messages-panel', MessagesPanel);
diff --git a/admin-dashboard/style.css b/admin-dashboard/style.css
index 1234567..abcdefg 100644
--- a/admin-dashboard/style.css
+++ b/admin-dashboard/style.css
@@ -242,6 +242,252 @@
   border-radius: 4px;
 }
 
+.ideas-header,
+.tickets-header,
+.messages-header {
+  display: flex;
+  justify-content: space-between;
+  align-items: center;
+  margin-bottom: 1.5rem;
+}
+
+.header-actions {
+  display: flex;
+  gap: 1rem;
+}
+
+.filters-grid {
+  display: grid;
+  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
+  gap: 1rem;
+  margin-bottom: 1rem;
+}
+
+.search-box {
+  margin-bottom: 1rem;
+}
+
+.ideas-stats,
+.tickets-stats,
+.messages-stats {
+  display: grid;
+  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
+  gap: 1rem;
+  margin-bottom: 2rem;
+}
+
+.stat-card {
+  background: #1e293b;
+  padding: 1.5rem;
+  border-radius: 8px;
+  text-align: center;
+  border: 1px solid #334155;
+}
+
+.stat-number {
+  display: block;
+  font-size: 2rem;
+  font-weight: bold;
+  color: var(--primary);
+  margin-bottom: 0.5rem;
+}
+
+.stat-label {
+  color: var(--text-secondary);
+  font-size: 0.9rem;
+}
+
+/* Ideas Styles */
+.ideas-list,
+.tickets-list,
+.messages-list {
+  display: flex;
+  flex-direction: column;
+  gap: 1rem;
+}
+
+.idea-item,
+.ticket-item,
+.message-item {
+  background: #1e293b;
+  border: 1px solid #334155;
+  border-radius: 8px;
+  padding: 1.5rem;
+  transition: all 0.2s;
+}
+
+.idea-item:hover,
+.ticket-item:hover,
+.message-item:hover {
+  border-color: var(--primary);
+  transform: translateY(-1px);
+}
+
+.idea-item.unread,
+.ticket-item.unread,
+.message-item.unread {
+  border-left: 4px solid var(--primary);
+  background: #1e293b;
+}
+
+.message-item.urgent {
+  border-left: 4px solid var(--error);
+  background: #1e1b2e;
+}
+
+.idea-header,
+.ticket-header,
+.message-header {
+  display: flex;
+  justify-content: space-between;
+  align-items: flex-start;
+  margin-bottom: 1rem;
+}
+
+.idea-title h4,
+.ticket-title h4 {
+  margin: 0 0 0.5rem 0;
+  color: var(--text-primary);
+}
+
+.idea-meta,
+.ticket-meta,
+.message-meta {
+  display: flex;
+  gap: 0.5rem;
+  flex-wrap: wrap;
+}
+
+.badge {
+  padding: 0.25rem 0.5rem;
+  border-radius: 4px;
+  font-size: 0.8rem;
+  font-weight: 500;
+}
+
+.badge.priority-critical { background: #dc2626; color: white; }
+.badge.priority-high { background: #ea580c; color: white; }
+.badge.priority-medium { background: #d97706; color: white; }
+.badge.priority-low { background: #65a30d; color: white; }
+.badge.priority-urgent { background: #dc2626; color: white; }
+
+.badge.status-new { background: #3b82f6; color: white; }
+.badge.status-in-progress { background: #d97706; color: white; }
+.badge.status-completed { background: #059669; color: white; }
+.badge.status-rejected { background: #6b7280; color: white; }
+.badge.status-open { background: #3b82f6; color: white; }
+.badge.status-resolved { background: #059669; color: white; }
+.badge.status-closed { background: #6b7280; color: white; }
+
+.badge.type-system { background: #8b5cf6; color: white; }
+.badge.type-user { background: #06b6d4; color: white; }
+
+.category-feature { background: #3b82f6; color: white; }
+.category-improvement { background: #10b981; color: white; }
+.category-bugfix { background: #ef4444; color: white; }
+.category-ui-ux { background: #8b5cf6; color: white; }
+.category-performance { background: #f59e0b; color: white; }
+
+.specialization-frontend { background: #3b82f6; color: white; }
+.specialization-backend { background: #10b981; color: white; }
+.specialization-design { background: #8b5cf6; color: white; }
+.specialization-devops { background: #f59e0b; color: white; }
+.specialization-analytics { background: #06b6d4; color: white; }
+.specialization-management { background: #64748b; color: white; }
+
+.idea-actions,
+.ticket-actions {
+  display: flex;
+  gap: 0.5rem;
+}
+
+.btn-icon {
+  background: none;
+  border: 1px solid #334155;
+  padding: 0.5rem;
+  border-radius: 4px;
+  cursor: pointer;
+  color: var(--text-secondary);
+  transition: all 0.2s;
+}
+
+.btn-icon:hover {
+  background: #334155;
+  color: var(--text-primary);
+}
+
+.idea-body,
+.ticket-body,
+.message-body {
+  margin-bottom: 1rem;
+}
+
+.idea-details,
+.ticket-details {
+  display: flex;
+  gap: 1rem;
+  color: var(--text-secondary);
+  font-size: 0.9rem;
+  margin-top: 1rem;
+  flex-wrap: wrap;
+}
+
+.idea-tags {
+  display: flex;
+  gap: 0.5rem;
+  margin-top: 1rem;
+  flex-wrap: wrap;
+}
+
+.tag {
+  background: #374151;
+  color: var(--text-secondary);
+  padding: 0.25rem 0.5rem;
+  border-radius: 4px;
+  font-size: 0.8rem;
+}
+
+/* Messages Styles */
+.message-sender {
+  display: flex;
+  align-items: center;
+  gap: 0.5rem;
+}
+
+.message-role {
+  color: var(--text-secondary);
+  font-size: 0.8rem;
+}
+
+.message-subject {
+  display: flex;
+  align-items: center;
+  gap: 0.5rem;
+  margin-bottom: 1rem;
+}
+
+.message-subject h4 {
+  margin: 0;
+  color: var(--text-primary);
+}
+
+.unread-indicator {
+  color: var(--primary);
+  font-size: 1.2rem;
+}
+
+.message-footer {
+  border-top: 1px solid #334155;
+  padding-top: 1rem;
+}
+
+.message-actions {
+  display: flex;
+  gap: 1rem;
+  align-items: center;
+}
+
+.btn-link {
+  background: none;
+  border: none;
+  color: var(--primary);
+  cursor: pointer;
+  text-decoration: underline;
+}
+
+.btn-link:hover {
+  color: #1d4ed8;
+}
+
+.read-info {
+  color: var(--text-secondary);
+  font-size: 0.9rem;
+}
+
+/* Categories Management */
+.categories-list {
+  display: flex;
+  flex-direction: column;
+  gap: 1rem;
+  margin-bottom: 1.5rem;
+}
+
+.category-item {
+  display: flex;
+  justify-content: space-between;
+  align-items: center;
+  padding: 1rem;
+  background: #1e293b;
+  border: 1px solid #334155;
+  border-radius: 8px;
+}
+
+.category-info {
+  display: flex;
+  align-items: center;
+  gap: 1rem;
+}
+
+.category-color {
+  width: 20px;
+  height: 20px;
+  border-radius: 4px;
+  border: 2px solid #334155;
+}
+
+.category-details strong {
+  display: block;
+  margin-bottom: 0.25rem;
+  color: var(--text-primary);
+}
+
+.category-details p {
+  margin: 0;
+  color: var(--text-secondary);
+  font-size: 0.9rem;
+}
+
+.category-actions {
+  display: flex;
+  gap: 0.5rem;
+  align-items: center;
+}
+
+/* Toggle Switch */
+.toggle {
+  position: relative;
+  display: inline-block;
+  width: 50px;
+  height: 24px;
+}
+
+.toggle input {
+  opacity: 0;
+  width: 0;
+  height: 0;
+}
+
+.slider {
+  position: absolute;
+  cursor: pointer;
+  top: 0;
+  left: 0;
+  right: 0;
+  bottom: 0;
+  background-color: #6b7280;
+  transition: .4s;
+  border-radius: 24px;
+}
+
+.slider:before {
+  position: absolute;
+  content: "";
+  height: 16px;
+  width: 16px;
+  left: 4px;
+  bottom: 4px;
+  background-color: white;
+  transition: .4s;
+  border-radius: 50%;
+}
+
+input:checked + .slider {
+  background-color: var(--success);
+}
+
+input:checked + .slider:before {
+  transform: translateX(26px);
+}
+
+/* Attachments */
+.ticket-attachments,
+.message-attachments {
+  margin-top: 1rem;
+  padding-top: 1rem;
+  border-top: 1px solid #334155;
+}
+
+.attachment {
+  display: inline-block;
+  background: #374151;
+  padding: 0.5rem;
+  border-radius: 4px;
+  margin-right: 0.5rem;
+  margin-bottom: 0.5rem;
+  font-size: 0.9rem;
+  color: var(--text-secondary);
+}
+
 .no-data {
   text-align: center;
   padding: 3rem;
@@ -249,7 +495,7 @@
 }
 
 .no-data h3 {
-  margin-bottom: 1rem;
+  margin-bottom: 1rem;
   color: var(--warning);
 }
 
-- 
2.34.1