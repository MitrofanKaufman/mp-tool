Создам полную модульную систему админ-панели с анимациями, уведомлениями и всеми страницами. Вот полная реализация:

## Структура проекта

```
admin-dashboard/
├── index.html
├── login.html
├── docs.html
├── swagger.html
├── demo.html
├── styles/
│   ├── main.css
│   ├── components.css
│   ├── animations.css
│   └── variables.css
├── scripts/
│   ├── app.js
│   ├── auth.js
│   ├── components/
│   │   ├── metrics.js
│   │   ├── messages.js
│   │   ├── ideas.js
│   │   ├── settings.js
│   │   ├── queue-monitor.js
│   │   ├── server-status.js
│   │   ├── tickets.js
│   │   ├── database-explorer.js
│   │   └── notifications.js
│   └── utils/
│       ├── api.js
│       ├── helpers.js
│       └── animations.js
└── assets/
    ├── icons/
    └── images/
```

## 1. Основной HTML файл

**index.html**
```html
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Wildberries Data Collector - Admin Dashboard</title>
    
    <!-- Styles -->
    <link rel="stylesheet" href="styles/variables.css">
    <link rel="stylesheet" href="styles/animations.css">
    <link rel="stylesheet" href="styles/main.css">
    <link rel="stylesheet" href="styles/components.css">
    
    <!-- Charts -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- Swagger -->
    <link rel="stylesheet" href="https://unpkg.com/swagger-ui-dist/swagger-ui.css">
</head>
<body class="page-enter">
    <!-- Preloader -->
    <div class="preloader" id="preloader">
        <div class="preloader-content">
            <div class="preloader-spinner"></div>
            <div class="preloader-text">Загрузка панели управления...</div>
        </div>
    </div>

    <!-- Глобальный прогресс-бар -->
    <div class="global-progress" id="globalProgress">
        <div class="progress-fill" id="globalProgressFill"></div>
    </div>

    <!-- Floating Action Button -->
    <div class="fab-container">
        <button class="fab" id="mainFab">
            <span class="fab-icon">⚡</span>
        </button>
        <div class="fab-actions">
            <button class="fab-action" data-action="notifications" title="Уведомления">
                <span>🔔</span>
            </button>
            <button class="fab-action" data-action="quick-settings" title="Быстрые настройки">
                <span>⚙️</span>
            </button>
            <button class="fab-action" data-action="new-ticket" title="Новое обращение">
                <span>🎫</span>
            </button>
            <button class="fab-action" data-action="dark-mode" title="Темная тема">
                <span>🌙</span>
            </button>
        </div>
    </div>

    <div class="container">
        <header class="header">
            <div class="header-left">
                <div class="logo">
                    <span class="logo-icon">🚀</span>
                    <h1>Wildberries Data Collector</h1>
                </div>
                <span class="version">v2.1.0</span>
            </div>
            <div class="header-right">
                <div class="header-controls">
                    <div class="server-status" id="serverStatus">
                        <span class="status-indicator"></span>
                        <span>Проверка сервера...</span>
                    </div>
                    <div class="user-menu">
                        <div class="user-info">
                            <span class="user-name">Алексей Петров</span>
                            <span class="user-role">Администратор</span>
                        </div>
                        <button class="btn-icon user-avatar" id="userMenuBtn">
                            <span>👤</span>
                        </button>
                        <div class="dropdown-menu" id="userMenu">
                            <a href="#" class="dropdown-item">👤 Профиль</a>
                            <a href="settings" class="dropdown-item">⚙️ Настройки</a>
                            <a href="docs.html" class="dropdown-item">📚 Документация</a>
                            <div class="dropdown-divider"></div>
                            <a href="login.html" class="dropdown-item logout">🚪 Выйти</a>
                        </div>
                    </div>
                </div>
            </div>
        </header>

        <nav class="sidebar">
            <div class="nav-section">
                <h3>📊 Мониторинг</h3>
                <button class="nav-btn active" data-tab="metrics">
                    <span class="nav-icon">📈</span>
                    <span class="nav-text">Метрики системы</span>
                </button>
                <button class="nav-btn" data-tab="server">
                    <span class="nav-icon">🖥</span>
                    <span class="nav-text">Статус сервера</span>
                </button>
                <button class="nav-btn" data-tab="services">
                    <span class="nav-icon">🔧</span>
                    <span class="nav-text">Сервисы</span>
                </button>
                <button class="nav-btn" data-tab="logs">
                    <span class="nav-icon">📝</span>
                    <span class="nav-text">Логи</span>
                </button>
            </div>

            <div class="nav-section">
                <h3>💬 Коммуникация</h3>
                <button class="nav-btn" data-tab="ideas">
                    <span class="nav-icon">💡</span>
                    <span class="nav-text">Идеи</span>
                </button>
                <button class="nav-btn" data-tab="tickets">
                    <span class="nav-icon">🎫</span>
                    <span class="nav-text">Обращения</span>
                </button>
                <button class="nav-btn" data-tab="messages">
                    <span class="nav-icon">💬</span>
                    <span class="nav-text">Сообщения</span>
                </button>
            </div>

            <div class="nav-section">
                <h3>🛠 Управление</h3>
                <button class="nav-btn" data-tab="modules">
                    <span class="nav-icon">🧪</span>
                    <span class="nav-text">Тестирование</span>
                </button>
                <button class="nav-btn" data-tab="database">
                    <span class="nav-icon">🗄️</span>
                    <span class="nav-text">База данных</span>
                </button>
                <button class="nav-btn" data-tab="queue">
                    <span class="nav-icon">📋</span>
                    <span class="nav-text">Очередь заданий</span>
                </button>
                <button class="nav-btn" data-tab="tests">
                    <span class="nav-icon">🚀</span>
                    <span class="nav-text">Комплексные тесты</span>
                </button>
            </div>

            <div class="nav-section">
                <h3>🌐 Дополнительно</h3>
                <a href="swagger.html" class="nav-btn">
                    <span class="nav-icon">📖</span>
                    <span class="nav-text">Swagger API</span>
                </a>
                <a href="demo.html" class="nav-btn">
                    <span class="nav-icon">🎨</span>
                    <span class="nav-text">Демо элементы</span>
                </a>
                <a href="docs.html" class="nav-btn">
                    <span class="nav-icon">📚</span>
                    <span class="nav-text">Документация</span>
                </a>
            </div>

            <div class="nav-footer">
                <div class="system-info">
                    <div class="info-item">
                        <span class="info-label">Версия API:</span>
                        <span class="info-value">v2.5</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">Режим:</span>
                        <span class="info-value production">Production</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">Обновлено:</span>
                        <span class="info-value" id="lastUpdate">--:--:--</span>
                    </div>
                </div>
            </div>
        </nav>

        <main class="main-content">
            <!-- Monitoring Tabs -->
            <div id="metrics" class="tab-content active">
                <metrics-panel></metrics-panel>
            </div>
            <div id="server" class="tab-content">
                <server-status></server-status>
            </div>
            <div id="services" class="tab-content">
                <services-panel></services-panel>
            </div>
            <div id="logs" class="tab-content">
                <logs-panel></logs-panel>
            </div>

            <!-- Communication Tabs -->
            <div id="ideas" class="tab-content">
                <ideas-panel></ideas-panel>
            </div>
            <div id="tickets" class="tab-content">
                <tickets-panel></tickets-panel>
            </div>
            <div id="messages" class="tab-content">
                <messages-panel></messages-panel>
            </div>

            <!-- Management Tabs -->
            <div id="modules" class="tab-content">
                <modules-panel></modules-panel>
            </div>
            <div id="database" class="tab-content">
                <database-explorer></database-explorer>
            </div>
            <div id="queue" class="tab-content">
                <queue-monitor></queue-monitor>
            </div>
            <div id="tests" class="tab-content">
                <tests-panel></tests-panel>
            </div>

            <!-- Settings Tab -->
            <div id="settings" class="tab-content">
                <settings-panel></settings-panel>
            </div>
        </main>
    </div>

    <!-- Quick Settings Panel -->
    <div class="quick-settings-panel" id="quickSettings">
        <div class="quick-settings-header">
            <h3>⚡ Быстрые настройки</h3>
            <button class="btn-icon close-settings">✕</button>
        </div>
        <div class="quick-settings-content">
            <div class="setting-item">
                <span>Темная тема</span>
                <label class="switch">
                    <input type="checkbox" id="darkModeToggle" checked>
                    <span class="slider"></span>
                </label>
            </div>
            <div class="setting-item">
                <span>Компактный режим</span>
                <label class="switch">
                    <input type="checkbox" id="compactModeToggle">
                    <span class="slider"></span>
                </label>
            </div>
            <div class="setting-item">
                <span>Анимации</span>
                <label class="switch">
                    <input type="checkbox" id="animationsToggle" checked>
                    <span class="slider"></span>
                </label>
            </div>
            <div class="setting-item">
                <span>Уведомления</span>
                <label class="switch">
                    <input type="checkbox" id="notificationsToggle" checked>
                    <span class="slider"></span>
                </label>
            </div>
        </div>
    </div>

    <!-- Global Notifications -->
    <div id="notifications" class="notifications-container"></div>

    <!-- Tooltip Container -->
    <div id="tooltip" class="tooltip"></div>

    <!-- Scripts -->
    <script type="module" src="scripts/app.js"></script>
</body>
</html>
```

## 2. Страница авторизации

**login.html**
```html
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Авторизация - Wildberries Data Collector</title>
    <link rel="stylesheet" href="styles/variables.css">
    <link rel="stylesheet" href="styles/animations.css">
    <link rel="stylesheet" href="styles/main.css">
    <link rel="stylesheet" href="styles/components.css">
    <style>
        .login-container {
            min-height: 100vh;
            background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            padding: var(--spacing-xl);
        }

        .login-card {
            background: var(--bg-card);
            border-radius: var(--radius-xl);
            padding: var(--spacing-xl);
            width: 100%;
            max-width: 400px;
            box-shadow: 0 20px 40px var(--shadow-lg);
            animation: slideUp 0.6s ease-out;
        }

        .login-header {
            text-align: center;
            margin-bottom: var(--spacing-xl);
        }

        .login-logo {
            font-size: 3rem;
            margin-bottom: var(--spacing-md);
        }

        .login-title {
            font-size: 1.5rem;
            margin-bottom: var(--spacing-sm);
            color: var(--text-primary);
        }

        .login-subtitle {
            color: var(--text-secondary);
            font-size: 0.9rem;
        }

        .login-form {
            display: flex;
            flex-direction: column;
            gap: var(--spacing-lg);
        }

        .form-group {
            position: relative;
        }

        .form-label {
            display: block;
            margin-bottom: var(--spacing-sm);
            font-weight: 600;
            color: var(--text-primary);
        }

        .password-toggle {
            position: absolute;
            right: var(--spacing-md);
            top: 50%;
            transform: translateY(-50%);
            background: none;
            border: none;
            color: var(--text-secondary);
            cursor: pointer;
        }

        .login-options {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 0.9rem;
        }

        .remember-me {
            display: flex;
            align-items: center;
            gap: var(--spacing-sm);
        }

        .forgot-password {
            color: var(--primary);
            text-decoration: none;
        }

        .login-btn {
            width: 100%;
            padding: var(--spacing-lg);
            background: var(--primary);
            color: white;
            border: none;
            border-radius: var(--radius-lg);
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
            display: flex;
            align-items: center;
            justify-content: center;
            gap: var(--spacing-sm);
        }

        .login-btn:hover {
            background: var(--primary-dark);
            transform: translateY(-2px);
        }

        .login-footer {
            text-align: center;
            margin-top: var(--spacing-xl);
            padding-top: var(--spacing-lg);
            border-top: 1px solid var(--border);
            color: var(--text-secondary);
            font-size: 0.9rem;
        }
    </style>
</head>
<body class="login-page">
    <div class="login-container">
        <div class="login-card">
            <div class="login-header">
                <div class="login-logo">🚀</div>
                <h1 class="login-title">Wildberries Data Collector</h1>
                <p class="login-subtitle">Войдите в систему управления</p>
            </div>

            <form class="login-form" id="loginForm">
                <div class="form-group">
                    <label class="form-label">Логин</label>
                    <input type="text" class="form-control" id="username" required 
                           placeholder="Введите ваш логин">
                </div>

                <div class="form-group">
                    <label class="form-label">Пароль</label>
                    <input type="password" class="form-control" id="password" required 
                           placeholder="Введите ваш пароль">
                    <button type="button" class="password-toggle" id="togglePassword">
                        👁️
                    </button>
                </div>

                <div class="login-options">
                    <label class="remember-me">
                        <input type="checkbox" id="rememberMe">
                        <span>Запомнить меня</span>
                    </label>
                    <a href="#" class="forgot-password">Забыли пароль?</a>
                </div>

                <button type="submit" class="login-btn" id="loginBtn">
                    <span>Войти</span>
                    <span class="btn-spinner" style="display: none;">⏳</span>
                </button>
            </form>

            <div class="login-footer">
                <p>v2.1.0 | © 2024 Wildberries Data Collector</p>
            </div>
        </div>
    </div>

    <script src="scripts/auth.js"></script>
</body>
</html>
```

## 3. Демо страница элементов

**demo.html**
```html
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Демо элементы - Wildberries Data Collector</title>
    <link rel="stylesheet" href="styles/variables.css">
    <link rel="stylesheet" href="styles/animations.css">
    <link rel="stylesheet" href="styles/main.css">
    <link rel="stylesheet" href="styles/components.css">
</head>
<body>
    <div class="container">
        <header class="header">
            <div class="header-left">
                <div class="logo">
                    <span class="logo-icon">🎨</span>
                    <h1>Демо элементы оформления</h1>
                </div>
            </div>
            <div class="header-right">
                <a href="index.html" class="btn btn-secondary">← Назад к панели</a>
            </div>
        </header>

        <main class="main-content">
            <div class="card">
                <h2>🎨 Система компонентов</h2>
                <p>Демонстрация всех UI компонентов системы</p>
            </div>

            <!-- Buttons -->
            <div class="card">
                <h3>🎯 Кнопки</h3>
                <div class="demo-grid">
                    <button class="btn btn-primary">Основная кнопка</button>
                    <button class="btn btn-secondary">Вторичная кнопка</button>
                    <button class="btn btn-success">Успех</button>
                    <button class="btn btn-warning">Предупреждение</button>
                    <button class="btn btn-error">Ошибка</button>
                    <button class="btn" disabled>Отключенная</button>
                </div>

                <div class="demo-grid mt-3">
                    <button class="btn btn-primary btn-sm">Маленькая</button>
                    <button class="btn btn-primary">Обычная</button>
                    <button class="btn btn-primary btn-lg">Большая</button>
                </div>

                <div class="demo-grid mt-3">
                    <button class="btn btn-primary btn-loading">
                        <span class="btn-spinner"></span>
                        Загрузка...
                    </button>
                    <button class="btn btn-secondary btn-icon">
                        <span>⭐</span>
                        С иконкой
                    </button>
                </div>
            </div>

            <!-- Cards -->
            <div class="card">
                <h3>🃏 Карточки</h3>
                <div class="grid grid-3">
                    <div class="card hover-card">
                        <h4>Обычная карточка</h4>
                        <p>Стандартная карточка с hover эффектом</p>
                    </div>
                    <div class="card accent-card">
                        <h4>Акцентная карточка</h4>
                        <p>Карточка с выделенным бордером</p>
                    </div>
                    <div class="card interactive-card">
                        <h4>Интерактивная</h4>
                        <p>Кликабельная карточка с анимацией</p>
                    </div>
                </div>
            </div>

            <!-- Form Elements -->
            <div class="card">
                <h3>📝 Элементы форм</h3>
                <div class="grid grid-2">
                    <div class="form-group">
                        <label>Текстовое поле</label>
                        <input type="text" class="form-control" placeholder="Введите текст...">
                    </div>
                    <div class="form-group">
                        <label>Поле с ошибкой</label>
                        <input type="text" class="form-control error" placeholder="Ошибочное поле">
                        <div class="error-message">Обязательное поле</div>
                    </div>
                </div>

                <div class="grid grid-2 mt-3">
                    <div class="form-group">
                        <label>Выпадающий список</label>
                        <select class="form-control">
                            <option>Опция 1</option>
                            <option>Опция 2</option>
                            <option>Опция 3</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Множественный выбор</label>
                        <select class="form-control" multiple>
                            <option>Элемент 1</option>
                            <option>Элемент 2</option>
                            <option>Элемент 3</option>
                        </select>
                    </div>
                </div>

                <div class="form-group mt-3">
                    <label>Текстовая область</label>
                    <textarea class="form-control" rows="4" placeholder="Многострочный текст..."></textarea>
                </div>

                <div class="form-group mt-3">
                    <label class="checkbox">
                        <input type="checkbox">
                        <span class="checkmark"></span>
                        Обычный чекбокс
                    </label>
                    <label class="checkbox">
                        <input type="checkbox" checked>
                        <span class="checkmark"></span>
                        Выбранный чекбокс
                    </label>
                </div>

                <div class="form-group mt-3">
                    <label class="radio">
                        <input type="radio" name="demo-radio">
                        <span class="radiomark"></span>
                        Радио кнопка 1
                    </label>
                    <label class="radio">
                        <input type="radio" name="demo-radio" checked>
                        <span class="radiomark"></span>
                        Радио кнопка 2
                    </label>
                </div>
            </div>

            <!-- Switches & Sliders -->
            <div class="card">
                <h3>🔘 Переключатели и слайдеры</h3>
                <div class="grid grid-2">
                    <div class="form-group">
                        <label>Переключатели</label>
                        <div class="switch-group">
                            <label class="switch">
                                <input type="checkbox" checked>
                                <span class="slider"></span>
                                <span class="switch-label">Включено</span>
                            </label>
                            <label class="switch">
                                <input type="checkbox">
                                <span class="slider"></span>
                                <span class="switch-label">Выключено</span>
                            </label>
                        </div>
                    </div>
                    <div class="form-group">
                        <label>Ползунки</label>
                        <div class="slider-group">
                            <input type="range" class="slider-input" min="0" max="100" value="50">
                            <input type="range" class="slider-input" min="0" max="100" value="75">
                        </div>
                    </div>
                </div>
            </div>

            <!-- Notifications & Alerts -->
            <div class="card">
                <h3>🔔 Уведомления и алерты</h3>
                <div class="demo-grid">
                    <div class="alert alert-success">
                        <div class="alert-icon">✅</div>
                        <div class="alert-content">
                            <div class="alert-title">Успех!</div>
                            <div class="alert-message">Операция выполнена успешно</div>
                        </div>
                    </div>
                    <div class="alert alert-warning">
                        <div class="alert-icon">⚠️</div>
                        <div class="alert-content">
                            <div class="alert-title">Внимание</div>
                            <div class="alert-message">Требуется ваше внимание</div>
                        </div>
                    </div>
                    <div class="alert alert-error">
                        <div class="alert-icon">❌</div>
                        <div class="alert-content">
                            <div class="alert-title">Ошибка</div>
                            <div class="alert-message">Произошла ошибка</div>
                        </div>
                    </div>
                </div>

                <div class="demo-grid mt-3">
                    <button class="btn btn-primary" onclick="showDemoToast('success')">
                        Показать успех
                    </button>
                    <button class="btn btn-warning" onclick="showDemoToast('warning')">
                        Показать предупреждение
                    </button>
                    <button class="btn btn-error" onclick="showDemoToast('error')">
                        Показать ошибку
                    </button>
                </div>
            </div>

            <!-- Progress & Loaders -->
            <div class="card">
                <h3>📊 Прогресс и загрузчики</h3>
                <div class="form-group">
                    <label>Линейный прогресс</label>
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: 65%"></div>
                    </div>
                </div>

                <div class="form-group">
                    <label>Круговой прогресс</label>
                    <div class="progress-circles">
                        <div class="progress-circle" data-progress="75">
                            <svg viewBox="0 0 36 36">
                                <path d="M18 2.0845
                                    a 15.9155 15.9155 0 0 1 0 31.831
                                    a 15.9155 15.9155 0 0 1 0 -31.831"
                                    fill="none" stroke="#eee" stroke-width="3"/>
                                <path d="M18 2.0845
                                    a 15.9155 15.9155 0 0 1 0 31.831
                                    a 15.9155 15.9155 0 0 1 0 -31.831"
                                    fill="none" stroke="#3b82f6" stroke-width="3" 
                                    stroke-dasharray="75, 100"/>
                                <text x="18" y="20.5" class="progress-text">75%</text>
                            </svg>
                        </div>
                    </div>
                </div>

                <div class="demo-grid mt-3">
                    <div class="loader"></div>
                    <div class="loader spinner"></div>
                    <div class="loader dots"></div>
                </div>
            </div>

            <!-- Tooltips -->
            <div class="card">
                <h3>💡 Подсказки</h3>
                <div class="demo-grid">
                    <button class="btn btn-secondary" 
                            data-tooltip="Это простая подсказка">
                        Стандартная подсказка
                    </button>
                    <button class="btn btn-secondary" 
                            data-tooltip="Это подсказка слева" 
                            data-tooltip-pos="left">
                        Подсказка слева
                    </button>
                    <button class="btn btn-secondary" 
                            data-tooltip="Это подсказка справа" 
                            data-tooltip-pos="right">
                        Подсказка справа
                    </button>
                    <button class="btn btn-secondary" 
                            data-tooltip="Это подсказка снизу" 
                            data-tooltip-pos="bottom">
                        Подсказка снизу
                    </button>
                </div>
            </div>

            <!-- Modals -->
            <div class="card">
                <h3>🪟 Модальные окна</h3>
                <div class="demo-grid">
                    <button class="btn btn-primary" onclick="showDemoModal()">
                        Открыть модальное окно
                    </button>
                    <button class="btn btn-secondary" onclick="showDemoConfirm()">
                        Открыть подтверждение
                    </button>
                </div>
            </div>

            <!-- Tabs -->
            <div class="card">
                <h3>📑 Вкладки</h3>
                <div class="tabs">
                    <div class="tab-header">
                        <button class="tab-btn active" data-tab="tab1">Вкладка 1</button>
                        <button class="tab-btn" data-tab="tab2">Вкладка 2</button>
                        <button class="tab-btn" data-tab="tab3">Вкладка 3</button>
                    </div>
                    <div class="tab-content">
                        <div class="tab-pane active" id="tab1">
                            <p>Содержимое первой вкладки</p>
                        </div>
                        <div class="tab-pane" id="tab2">
                            <p>Содержимое второй вкладки</p>
                        </div>
                        <div class="tab-pane" id="tab3">
                            <p>Содержимое третьей вкладки</p>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <!-- Demo Modal -->
    <div class="modal" id="demoModal" style="display: none;">
        <div class="modal-content medium">
            <div class="modal-header">
                <h3>Демо модальное окно</h3>
                <button class="close-modal" onclick="closeDemoModal()">✕</button>
            </div>
            <div class="modal-body">
                <p>Это демонстрационное модальное окно с различными элементами:</p>
                <div class="form-group mt-3">
                    <label>Пример поля ввода:</label>
                    <input type="text" class="form-control" placeholder="Введите что-нибудь...">
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" onclick="closeDemoModal()">Отмена</button>
                <button class="btn btn-primary" onclick="closeDemoModal()">Сохранить</button>
            </div>
        </div>
    </div>

    <script>
        // Demo functionality
        function showDemoToast(type) {
            const messages = {
                success: '✅ Операция выполнена успешно!',
                warning: '⚠️ Внимание! Требуется проверка.',
                error: '❌ Произошла ошибка при выполнении.'
            };
            
            if (window.showNotification) {
                window.showNotification(messages[type], type);
            } else {
                alert(messages[type]);
            }
        }

        function showDemoModal() {
            document.getElementById('demoModal').style.display = 'flex';
        }

        function closeDemoModal() {
            document.getElementById('demoModal').style.display = 'none';
        }

        function showDemoConfirm() {
            if (confirm('Вы уверены, что хотите выполнить это действие?')) {
                showDemoToast('success');
            } else {
                showDemoToast('warning');
            }
        }

        // Tab functionality
        document.addEventListener('DOMContentLoaded', function() {
            // Tabs
            document.querySelectorAll('.tab-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const tabId = this.dataset.tab;
                    
                    // Update tab buttons
                    document.querySelectorAll('.tab-btn').forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    
                    // Update tab content
                    document.querySelectorAll('.tab-pane').forEach(pane => pane.classList.remove('active'));
                    document.getElementById(tabId).classList.add('active');
                });
            });

            // Tooltips
            document.querySelectorAll('[data-tooltip]').forEach(el => {
                el.addEventListener('mouseenter', function(e) {
                    const tooltip = document.createElement('div');
                    tooltip.className = 'tooltip show';
                    tooltip.textContent = this.dataset.tooltip;
                    tooltip.style.top = (e.clientY - 40) + 'px';
                    tooltip.style.left = (e.clientX + 10) + 'px';
                    
                    document.body.appendChild(tooltip);
                    
                    this._tooltip = tooltip;
                });
                
                el.addEventListener('mouseleave', function() {
                    if (this._tooltip) {
                        this._tooltip.remove();
                    }
                });
            });
        });
    </script>
</body>
</html>
```

## 4. Документация

**docs.html**
```html
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Документация - Wildberries Data Collector</title>
    <link rel="stylesheet" href="styles/variables.css">
    <link rel="stylesheet" href="styles/animations.css">
    <link rel="stylesheet" href="styles/main.css">
    <link rel="stylesheet" href="styles/components.css">
    <style>
        .docs-container {
            max-width: 1200px;
            margin: 0 auto;
        }

        .docs-sidebar {
            position: sticky;
            top: var(--spacing-xl);
            max-height: calc(100vh - 2 * var(--spacing-xl));
            overflow-y: auto;
        }

        .docs-nav {
            background: var(--bg-card);
            border-radius: var(--radius-lg);
            padding: var(--spacing-lg);
        }

        .docs-nav-section {
            margin-bottom: var(--spacing-lg);
        }

        .docs-nav-section h4 {
            margin-bottom: var(--spacing-md);
            color: var(--primary);
        }

        .docs-nav-link {
            display: block;
            padding: var(--spacing-sm) var(--spacing-md);
            color: var(--text-secondary);
            text-decoration: none;
            border-radius: var(--radius-md);
            transition: var(--transition);
            margin-bottom: var(--spacing-xs);
        }

        .docs-nav-link:hover,
        .docs-nav-link.active {
            background: var(--primary);
            color: white;
        }

        .docs-content {
            padding-left: var(--spacing-xl);
        }

        .docs-section {
            margin-bottom: var(--spacing-xl);
            scroll-margin-top: var(--spacing-xl);
        }

        .docs-section h2 {
            border-bottom: 2px solid var(--primary);
            padding-bottom: var(--spacing-sm);
            margin-bottom: var(--spacing-lg);
        }

        .feature-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: var(--spacing-lg);
            margin: var(--spacing-lg) 0;
        }

        .feature-card {
            background: var(--bg-card);
            border-radius: var(--radius-lg);
            padding: var(--spacing-lg);
            border-left: 4px solid var(--primary);
        }

        .code-block {
            background: var(--bg-primary);
            border: 1px solid var(--border);
            border-radius: var(--radius-md);
            padding: var(--spacing-lg);
            margin: var(--spacing-lg) 0;
            overflow-x: auto;
        }

        .api-endpoint {
            background: var(--bg-card);
            border: 1px solid var(--border);
            border-radius: var(--radius-md);
            padding: var(--spacing-lg);
            margin: var(--spacing-lg) 0;
        }

        .endpoint-method {
            display: inline-block;
            padding: var(--spacing-xs) var(--spacing-sm);
            background: var(--primary);
            color: white;
            border-radius: var(--radius-sm);
            font-weight: 600;
            margin-right: var(--spacing-sm);
        }

        .quick-start-steps {
            counter-reset: step;
        }

        .quick-start-step {
            position: relative;
            padding-left: 3rem;
            margin-bottom: var(--spacing-lg);
        }

        .quick-start-step::before {
            counter-increment: step;
            content: counter(step);
            position: absolute;
            left: 0;
            top: 0;
            width: 2rem;
            height: 2rem;
            background: var(--primary);
            color: white;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
        }
    </style>
</head>
<body>
    <div class="container">
        <header class="header">
            <div class="header-left">
                <div class="logo">
                    <span class="logo-icon">📚</span>
                    <h1>Документация системы</h1>
                </div>
            </div>
            <div class="header-right">
                <a href="index.html" class="btn btn-primary">← Назад к панели</a>
            </div>
        </header>

        <main class="main-content">
            <div class="docs-container">
                <div class="grid grid-4">
                    <div class="docs-sidebar">
                        <div class="docs-nav">
                            <div class="docs-nav-section">
                                <h4>Начало работы</h4>
                                <a href="#quick-start" class="docs-nav-link active">Быстрый старт</a>
                                <a href="#installation" class="docs-nav-link">Установка</a>
                                <a href="#configuration" class="docs-nav-link">Конфигурация</a>
                            </div>
                            
                            <div class="docs-nav-section">
                                <h4>Компоненты</h4>
                                <a href="#components" class="docs-nav-link">Обзор компонентов</a>
                                <a href="#api" class="docs-nav-link">API Reference</a>
                                <a href="#theming" class="docs-nav-link">Темы и стили</a>
                            </div>
                            
                            <div class="docs-nav-section">
                                <h4>Руководства</h4>
                                <a href="#monitoring" class="docs-nav-link">Мониторинг</a>
                                <a href="#database" class="docs-nav-link">База данных</a>
                                <a href="#security" class="docs-nav-link">Безопасность</a>
                            </div>
                            
                            <div class="docs-nav-section">
                                <h4>Дополнительно</h4>
                                <a href="#troubleshooting" class="docs-nav-link">Решение проблем</a>
                                <a href="#faq" class="docs-nav-link">Частые вопросы</a>
                                <a href="#changelog" class="docs-nav-link">История изменений</a>
                            </div>
                        </div>
                    </div>

                    <div class="docs-content grid-col-3">
                        <!-- Quick Start -->
                        <section id="quick-start" class="docs-section">
                            <h2>🚀 Быстрый старт</h2>
                            <p>Добро пожаловать в документацию Wildberries Data Collector. Это руководство поможет вам быстро начать работу с системой.</p>
                            
                            <div class="quick-start-steps">
                                <div class="quick-start-step">
                                    <h4>Установка и настройка</h4>
                                    <p>Скачайте последнюю версию системы и выполните первоначальную настройку.</p>
                                </div>
                                
                                <div class="quick-start-step">
                                    <h4>Настройка API</h4>
                                    <p>Настройте подключение к API Wildberries и тестовым средам.</p>
                                </div>
                                
                                <div class="quick-start-step">
                                    <h4>Запуск мониторинга</h4>
                                    <p>Запустите систему мониторинга и настройте уведомления.</p>
                                </div>
                            </div>
                        </section>

                        <!-- Features -->
                        <section id="features" class="docs-section">
                            <h2>⭐ Основные возможности</h2>
                            
                            <div class="feature-grid">
                                <div class="feature-card">
                                    <h4>📊 Мониторинг в реальном времени</h4>
                                    <p>Отслеживание метрик системы, использования ресурсов и производительности API</p>
                                </div>
                                
                                <div class="feature-card">
                                    <h4>🔧 Управление базой данных</h4>
                                    <p>Просмотр и управление данными, выполнение запросов, мониторинг производительности</p>
                                </div>
                                
                                <div class="feature-card">
                                    <h4>💬 Система коммуникации</h4>
                                    <p>Внутренние сообщения, обращения пользователей, система уведомлений</p>
                                </div>
                                
                                <div class="feature-card">
                                    <h4>🎯 Тестирование API</h4>
                                    <p>Автоматическое тестирование эндпоинтов, мониторинг доступности</p>
                                </div>
                                
                                <div class="feature-card">
                                    <h4>📈 Аналитика и отчеты</h4>
                                    <p>Детальная аналитика работы системы, графики и отчеты</p>
                                </div>
                                
                                <div class="feature-card">
                                    <h4>🛡️ Безопасность</h4>
                                    <p>Ролевая модель доступа, аудит действий, защита данных</p>
                                </div>
                            </div>
                        </section>

                        <!-- API Documentation -->
                        <section id="api" class="docs-section">
                            <h2>🔌 API Reference</h2>
                            <p>Полная документация по REST API системы.</p>
                            
                            <div class="api-endpoint">
                                <div class="endpoint-header">
                                    <span class="endpoint-method">GET</span>
                                    <code>/api/v1/status</code>
                                </div>
                                <p>Получение текущего статуса системы и метрик</p>
                                
                                <h5>Ответ:</h5>
                                <div class="code-block">
<pre>{
  "status": "online",
  "memory": {
    "rss": 156123456,
    "heapTotal": 123456789,
    "heapUsed": 87654321,
    "external": 1234567
  },
  "cpu": {
    "usage": 0.45
  },
  "uptime": 1234567
}</pre>
                                </div>
                            </div>
                            
                            <div class="api-endpoint">
                                <div class="endpoint-header">
                                    <span class="endpoint-method">POST</span>
                                    <code>/api/v1/db/query</code>
                                </div>
                                <p>Выполнение запроса к базе данных</p>
                                
                                <h5>Параметры:</h5>
                                <div class="code-block">
<pre>{
  "table": "users",
  "limit": 10,
  "filters": {
    "active": true
  }
}</pre>
                                </div>
                            </div>
                        </section>

                        <!-- Configuration -->
                        <section id="configuration" class="docs-section">
                            <h2>⚙️ Конфигурация</h2>
                            
                            <h4>Основные настройки</h4>
                            <div class="code-block">
<pre>// config/system.js
{
  "api": {
    "baseURL": "https://api.wildberries.ru",
    "timeout": 30000,
    "retryCount": 3
  },
  "database": {
    "host": "localhost",
    "port": 5432,
    "name": "wildberries_db"
  },
  "monitoring": {
    "interval": 5000,
    "alerts": {
      "enabled": true,
      "email": "admin@example.com"
    }
  }
}</pre>
                            </div>
                            
                            <h4>Настройки безопасности</h4>
                            <div class="code-block">
<pre>// config/security.js
{
  "jwt": {
    "secret": "your-secret-key",
    "expiresIn": "24h"
  },
  "cors": {
    "origin": ["https://yourdomain.com"],
    "credentials": true
  },
  "rateLimit": {
    "windowMs": 900000,
    "max": 100
  }
}</pre>
                            </div>
                        </section>

                        <!-- Troubleshooting -->
                        <section id="troubleshooting" class="docs-section">
                            <h2>🔧 Решение проблем</h2>
                            
                            <h4>Частые проблемы и решения</h4>
                            
                            <div class="feature-card">
                                <h5>Проблема: API недоступен</h5>
                                <p><strong>Решение:</strong> Проверьте настройки сети, убедитесь что сервер запущен и порты открыты.</p>
                            </div>
                            
                            <div class="feature-card">
                                <h5>Проблема: Ошибки базы данных</h5>
                                <p><strong>Решение:</strong> Проверьте подключение к БД, убедитесь что миграции применены.</p>
                            </div>
                            
                            <div class="feature-card">
                                <h5>Проблема: Медленная работа</h5>
                                <p><strong>Решение:</strong> Проверьте использование ресурсов, оптимизируйте запросы к БД.</p>
                            </div>
                        </section>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <script>
        // Smooth scrolling for documentation navigation
        document.addEventListener('DOMContentLoaded', function() {
            const navLinks = document.querySelectorAll('.docs-nav-link');
            
            navLinks.forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    
                    const targetId = this.getAttribute('href');
                    const targetSection = document.querySelector(targetId);
                    
                    if (targetSection) {
                        // Update active link
                        navLinks.forEach(l => l.classList.remove('active'));
                        this.classList.add('active');
                        
                        // Smooth scroll to section
                        targetSection.scrollIntoView({
                            behavior: 'smooth',
                            block: 'start'
                        });
                    }
                });
            });
            
            // Update active link on scroll
            const sections = document.querySelectorAll('.docs-section');
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const id = '#' + entry.target.id;
                        navLinks.forEach(link => {
                            link.classList.toggle('active', link.getAttribute('href') === id);
                        });
                    }
                });
            }, { threshold: 0.5 });
            
            sections.forEach(section => observer.observe(section));
        });
    </script>
</body>
</html>
```

## 5. Swagger документация

**swagger.html**
```html
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>API Documentation - Wildberries Data Collector</title>
    <link rel="stylesheet" href="https://unpkg.com/swagger-ui-dist/swagger-ui.css">
    <link rel="stylesheet" href="styles/variables.css">
    <link rel="stylesheet" href="styles/main.css">
    <style>
        .swagger-header {
            background: var(--bg-secondary);
            border-bottom: 1px solid var(--border);
            padding: var(--spacing-lg) var(--spacing-xl);
        }
        
        .swagger-container {
            padding: 0;
        }
        
        .swagger-ui .info hgroup.main {
            background: var(--bg-card);
            padding: var(--spacing-lg);
            border-radius: var(--radius-lg);
            margin: var(--spacing-lg);
        }
        
        .swagger-ui .btn.authorize {
            background: var(--primary);
            border-color: var(--primary);
        }
        
        .swagger-ui .opblock.opblock-get {
            border-color: var(--primary);
            background: rgba(59, 130, 246, 0.1);
        }
        
        .swagger-ui .opblock.opblock-post {
            border-color: var(--success);
            background: rgba(16, 185, 129, 0.1);
        }
        
        .swagger-ui .opblock.opblock-put {
            border-color: var(--warning);
            background: rgba(245, 158, 11, 0.1);
        }
        
        .swagger-ui .opblock.opblock-delete {
            border-color: var(--error);
            background: rgba(239, 68, 68, 0.1);
        }
    </style>
</head>
<body>
    <div class="swagger-header">
        <div class="header-left">
            <div class="logo">
                <span class="logo-icon">📖</span>
                <h1>API Documentation</h1>
            </div>
        </div>
        <div class="header-right">
            <a href="index.html" class="btn btn-primary">← Назад к панели</a>
        </div>
    </div>

    <div id="swagger-ui" class="swagger-container"></div>

    <script src="https://unpkg.com/swagger-ui-dist/swagger-ui-bundle.js"></script>
    <script>
        // Swagger configuration
        const swaggerConfig = {
            dom_id: '#swagger-ui',
            deepLinking: true,
            presets: [
                SwaggerUIBundle.presets.apis,
                SwaggerUIBundle.SwaggerUIStandalonePreset
            ],
            layout: "BaseLayout",
            requestInterceptor: (request) => {
                // Add auth token if available
                const token = localStorage.getItem('auth_token');
                if (token) {
                    request.headers['Authorization'] = `Bearer ${token}`;
                }
                return request;
            },
            onComplete: () => {
                // Customize Swagger UI
                const style = document.createElement('style');
                style.textContent = `
                    .swagger-ui .info hgroup.main h2 {
                        color: var(--text-primary) !important;
                    }
                    .swagger-ui .opblock-summary-path {
                        color: var(--text-primary) !important;
                    }
                    .swagger-ui .opblock-summary-description {
                        color: var(--text-secondary) !important;
                    }
                `;
                document.head.appendChild(style);
            }
        };

        // Load Swagger spec
        const swaggerSpec = {
            openapi: "3.0.0",
            info: {
                title: "Wildberries Data Collector API",
                version: "2.1.0",
                description: "REST API для системы сбора данных Wildberries",
                contact: {
                    name: "API Support",
                    email: "support@wildberries-collector.com"
                }
            },
            servers: [
                {
                    url: "/api/v1",
                    description: "Production server"
                },
                {
                    url: "/api/t1",
                    description: "Test server"
                }
            ],
            paths: {
                "/status": {
                    get: {
                        summary: "Получить статус системы",
                        description: "Возвращает текущее состояние системы и метрики производительности",
                        responses: {
                            "200": {
                                description: "Успешный ответ",
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object",
                                            properties: {
                                                status: { type: "string" },
                                                memory: {
                                                    type: "object",
                                                    properties: {
                                                        rss: { type: "number" },
                                                        heapTotal: { type: "number" },
                                                        heapUsed: { type: "number" },
                                                        external: { type: "number" }
                                                    }
                                                },
                                                cpu: {
                                                    type: "object",
                                                    properties: {
                                                        usage: { type: "number" }
                                                    }
                                                },
                                                uptime: { type: "number" }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/db/tables": {
                    get: {
                        summary: "Получить список таблиц",
                        description: "Возвращает список всех таблиц в базе данных",
                        responses: {
                            "200": {
                                description: "Успешный ответ",
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object",
                                            properties: {
                                                tables: {
                                                    type: "array",
                                                    items: {
                                                        type: "object",
                                                        properties: {
                                                            name: { type: "string" },
                                                            count: { type: "number" },
                                                            description: { type: "string" }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "/db/query": {
                    post: {
                        summary: "Выполнить запрос к БД",
                        description: "Выполняет SQL запрос к указанной таблице",
                        requestBody: {
                            required: true,
                            content: {
                                "application/json": {
                                    schema: {
                                        type: "object",
                                        properties: {
                                            table: { type: "string" },
                                            limit: { type: "number" },
                                            filters: { type: "object" }
                                        }
                                    }
                                }
                            }
                        },
                        responses: {
                            "200": {
                                description: "Успешный ответ",
                                content: {
                                    "application/json": {
                                        schema: {
                                            type: "object",
                                            properties: {
                                                data: { type: "array" },
                                                total: { type: "number" },
                                                time: { type: "number" }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            components: {
                securitySchemes: {
                    bearerAuth: {
                        type: "http",
                        scheme: "bearer",
                        bearerFormat: "JWT"
                    }
                }
            },
            security: [{
                bearerAuth: []
            }]
        };

        // Initialize Swagger UI
        swaggerConfig.spec = swaggerSpec;
        const ui = SwaggerUIBundle(swaggerConfig);
    </script>
</body>
</html>
```

## 6. Стили (дополненные)

**styles/variables.css**
```css
:root {
    /* Colors */
    --primary: #3b82f6;
    --primary-dark: #2563eb;
    --primary-light: #60a5fa;
    --secondary: #6b7280;
    --success: #10b981;
    --warning: #f59e0b;
    --error: #ef4444;
    --info: #3b82f6;

    /* Backgrounds */
    --bg-primary: #0f172a;
    --bg-secondary: #1e293b;
    --bg-card: #1e293b;
    --bg-hover: #334155;
    --bg-overlay: rgba(15, 23, 42, 0.8);

    /* Text */
    --text-primary: #f8fafc;
    --text-secondary: #94a3b8;
    --text-muted: #64748b;

    /* Borders */
    --border: #334155;
    --border-light: #475569;

    /* Shadows */
    --shadow: rgba(0, 0, 0, 0.3);
    --shadow-lg: rgba(0, 0, 0, 0.5);
    --shadow-xl: rgba(0, 0, 0, 0.7);

    /* Spacing */
    --spacing-xs: 0.25rem;
    --spacing-sm: 0.5rem;
    --spacing-md: 1rem;
    --spacing-lg: 1.5rem;
    --spacing-xl: 2rem;
    --spacing-2xl: 3rem;

    /* Border radius */
    --radius-sm: 4px;
    --radius-md: 8px;
    --radius-lg: 12px;
    --radius-xl: 16px;
    --radius-2xl: 24px;

    /* Transitions */
    --transition: all 0.2s ease;
    --transition-slow: all 0.3s ease;
    --transition-bounce: all 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);

    /* Z-index */
    --z-dropdown: 1000;
    --z-sticky: 1020;
    --z-fixed: 1030;
    --z-modal: 1040;
    --z-popover: 1050;
    --z-tooltip: 1060;
}

/* Light theme variables */
[data-theme="light"] {
    --bg-primary: #ffffff;
    --bg-secondary: #f8fafc;
    --bg-card: #ffffff;
    --bg-hover: #f1f5f9;
    --text-primary: #1e293b;
    --text-secondary: #64748b;
    --border: #e2e8f0;
    --border-light: #cbd5e1;
}
```

**styles/animations.css**
```css
/* Entrance animations */
@keyframes slideUp {
    from {
        opacity: 0;
        transform: translateY(30px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@keyframes slideDown {
    from {
        opacity: 0;
        transform: translateY(-30px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@keyframes slideInLeft {
    from {
        opacity: 0;
        transform: translateX(-30px);
    }
    to {
        opacity: 1;
        transform: translateX(0);
    }
}

@keyframes slideInRight {
    from {
        opacity: 0;
        transform: translateX(30px);
    }
    to {
        opacity: 1;
        transform: translateX(0);
    }
}

@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

@keyframes fadeOut {
    from { opacity: 1; }
    to { opacity: 0; }
}

@keyframes scaleIn {
    from {
        opacity: 0;
        transform: scale(0.9);
    }
    to {
        opacity: 1;
        transform: scale(1);
    }
}

@keyframes bounceIn {
    0% {
        opacity: 0;
        transform: scale(0.3);
    }
    50% {
        opacity: 1;
        transform: scale(1.05);
    }
    70% {
        transform: scale(0.9);
    }
    100% {
        opacity: 1;
        transform: scale(1);
    }
}

@keyframes pulse {
    0%, 100% {
        opacity: 1;
    }
    50% {
        opacity: 0.5;
    }
}

@keyframes spin {
    from {
        transform: rotate(0deg);
    }
    to {
        transform: rotate(360deg);
    }
}

@keyframes float {
    0%, 100% {
        transform: translateY(0);
    }
    50% {
        transform: translateY(-10px);
    }
}

@keyframes shake {
    0%, 100% {
        transform: translateX(0);
    }
    10%, 30%, 50%, 70%, 90% {
        transform: translateX(-5px);
    }
    20%, 40%, 60%, 80% {
        transform: translateX(5px);
    }
}

/* Animation classes */
.slide-up {
    animation: slideUp 0.6s ease-out;
}

.slide-down {
    animation: slideDown 0.6s ease-out;
}

.slide-in-left {
    animation: slideInLeft 0.6s ease-out;
}

.slide-in-right {
    animation: slideInRight 0.6s ease-out;
}

.fade-in {
    animation: fadeIn 0.3s ease-out;
}

.fade-out {
    animation: fadeOut 0.3s ease-out;
}

.scale-in {
    animation: scaleIn 0.3s ease-out;
}

.bounce-in {
    animation: bounceIn 0.6s ease-out;
}

.pulse {
    animation: pulse 2s infinite;
}

.spin {
    animation: spin 1s linear infinite;
}

.float {
    animation: float 3s ease-in-out infinite;
}

.shake {
    animation: shake 0.5s ease-in-out;
}

/* Page transitions */
.page-enter {
    animation: fadeIn 0.5s ease-out;
}

.page-exit {
    animation: fadeOut 0.3s ease-out;
}

/* Stagger animations */
.stagger-item {
    opacity: 0;
    transform: translateY(20px);
}

.stagger-item.animate {
    animation: slideUp 0.6s ease-out forwards;
}

/* Hover animations */
.hover-lift {
    transition: var(--transition);
}

.hover-lift:hover {
    transform: translateY(-2px);
}

.hover-scale {
    transition: var(--transition);
}

.hover-scale:hover {
    transform: scale(1.05);
}

.hover-glow {
    transition: var(--transition);
}

.hover-glow:hover {
    box-shadow: 0 0 20px rgba(59, 130, 246, 0.3);
}

/* Loading animations */
.loading-dots {
    display: inline-flex;
    gap: 4px;
}

.loading-dots span {
    width: 6px;
    height: 6px;
    border-radius: 50%;
    background: currentColor;
    animation: pulse 1.4s ease-in-out infinite both;
}

.loading-dots span:nth-child(1) { animation-delay: -0.32s; }
.loading-dots span:nth-child(2) { animation-delay: -0.16s; }

.progress-pulse {
    animation: pulse 2s infinite;
}

/* Ripple effect */
.ripple {
    position: relative;
    overflow: hidden;
}

.ripple::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.3);
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
}

.ripple:active::after {
    width: 300px;
    height: 300px;
}

/* Typewriter effect */
.typewriter {
    overflow: hidden;
    border-right: 2px solid;
    white-space: nowrap;
    animation: typing 3.5s steps(40, end), blink-caret 0.75s step-end infinite;
}

@keyframes typing {
    from { width: 0 }
    to { width: 100% }
}

@keyframes blink-caret {
    from, to { border-color: transparent }
    50% { border-color: currentColor }
}
```

**styles/components.css** (дополненный)
```css
/* Preloader */
.preloader {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: var(--bg-primary);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 9999;
    transition: opacity 0.5s ease-out;
}

.preloader.fade-out {
    opacity: 0;
    pointer-events: none;
}

.preloader-content {
    text-align: center;
    animation: slideUp 0.6s ease-out;
}

.preloader-spinner {
    width: 50px;
    height: 50px;
    border: 3px solid var(--border);
    border-top: 3px solid var(--primary);
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto var(--spacing-md);
}

.preloader-text {
    color: var(--text-secondary);
    font-size: 0.9rem;
}

/* FAB */
.fab-container {
    position: fixed;
    bottom: var(--spacing-xl);
    right: var(--spacing-xl);
    z-index: var(--z-fixed);
}

.fab {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    background: var(--primary);
    border: none;
    color: white;
    font-size: 1.5rem;
    cursor: pointer;
    box-shadow: 0 8px 25px var(--shadow-lg);
    transition: var(--transition-bounce);
    display: flex;
    align-items: center;
    justify-content: center;
}

.fab:hover {
    transform: scale(1.1);
    box-shadow: 0 12px 35px var(--shadow-xl);
}

.fab-actions {
    position: absolute;
    bottom: 70px;
    right: 0;
    display: flex;
    flex-direction: column;
    gap: var(--spacing-sm);
    opacity: 0;
    transform: translateY(20px);
    pointer-events: none;
    transition: var(--transition-slow);
}

.fab-container.open .fab-actions {
    opacity: 1;
    transform: translateY(0);
    pointer-events: all;
}

.fab-action {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    background: var(--bg-card);
    border: 1px solid var(--border);
    color: var(--text-primary);
    font-size: 1.2rem;
    cursor: pointer;
    transition: var(--transition);
    display: flex;
    align-items: center;
    justify-content: center;
}

.fab-action:hover {
    background: var(--primary);
    color: white;
    transform: scale(1.1);
}

/* Quick Settings */
.quick-settings-panel {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scale(0.9);
    background: var(--bg-card);
    border: 1px solid var(--border);
    border-radius: var(--radius-xl);
    padding: var(--spacing-lg);
    box-shadow: 0 20px 40px var(--shadow-xl);
    z-index: var(--z-modal);
    opacity: 0;
    pointer-events: none;
    transition: var(--transition-slow);
    max-width: 400px;
    width: 90%;
}

.quick-settings-panel.open {
    opacity: 1;
    transform: translate(-50%, -50%) scale(1);
    pointer-events: all;
}

.quick-settings-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--spacing-lg);
    padding-bottom: var(--spacing-md);
    border-bottom: 1px solid var(--border);
}

.quick-settings-content {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-md);
}

.setting-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--spacing-md);
    border-radius: var(--radius-md);
    transition: var(--transition);
}

.setting-item:hover {
    background: var(--bg-hover);
}

/* Enhanced notifications */
.notifications-container {
    position: fixed;
    top: var(--spacing-xl);
    right: var(--spacing-xl);
    z-index: var(--z-tooltip);
    display: flex;
    flex-direction: column;
    gap: var(--spacing-sm);
    max-width: 400px;
}

.notification {
    background: var(--bg-card);
    border: 1px solid var(--border);
    border-radius: var(--radius-lg);
    padding: var(--spacing-md);
    box-shadow: 0 8px 25px var(--shadow-lg);
    animation: slideInRight 0.3s ease-out;
    display: flex;
    align-items: flex-start;
    gap: var(--spacing-md);
    max-width: 400px;
}

.notification.fade-out {
    animation: slideOutRight 0.3s ease-out forwards;
}

@keyframes slideOutRight {
    to {
        opacity: 0;
        transform: translateX(100%);
    }
}

.notification-icon {
    font-size: 1.2rem;
    flex-shrink: 0;
}

.notification-content {
    flex: 1;
}

.notification-title {
    font-weight: 600;
    margin-bottom: var(--spacing-xs);
    color: var(--text-primary);
}

.notification-message {
    color: var(--text-secondary);
    font-size: 0.9rem;
}

.notification-close {
    background: none;
    border: none;
    color: var(--text-secondary);
    cursor: pointer;
    padding: var(--spacing-xs);
    border-radius: var(--radius-sm);
    transition: var(--transition);
}

.notification-close:hover {
    background: var(--bg-hover);
    color: var(--text-primary);
}

.notification.success {
    border-left: 4px solid var(--success);
}

.notification.warning {
    border-left: 4px solid var(--warning);
}

.notification.error {
    border-left: 4px solid var(--error);
}

.notification.info {
    border-left: 4px solid var(--info);
}

/* Enhanced tooltips */
.tooltip {
    position: absolute;
    background: var(--bg-primary);
    color: var(--text-primary);
    padding: var(--spacing-sm) var(--spacing-md);
    border-radius: var(--radius-md);
    font-size: 0.8rem;
    white-space: nowrap;
    box-shadow: 0 4px 12px var(--shadow);
    z-index: var(--z-tooltip);
    pointer-events: none;
    opacity: 0;
    transform: translateY(-10px);
    transition: var(--transition);
}

.tooltip.show {
    opacity: 1;
    transform: translateY(0);
}

.tooltip::before {
    content: '';
    position: absolute;
    top: -5px;
    left: 50%;
    transform: translateX(-50%);
    border: 5px solid transparent;
    border-bottom-color: var(--bg-primary);
}

/* Enhanced dropdowns */
.dropdown-menu {
    position: absolute;
    top: 100%;
    right: 0;
    background: var(--bg-card);
    border: 1px solid var(--border);
    border-radius: var(--radius-lg);
    padding: var(--spacing-sm);
    box-shadow: 0 8px 25px var(--shadow-lg);
    z-index: var(--z-dropdown);
    opacity: 0;
    transform: translateY(-10px);
    pointer-events: none;
    transition: var(--transition);
    min-width: 200px;
}

.dropdown-menu.show {
    opacity: 1;
    transform: translateY(0);
    pointer-events: all;
}

.dropdown-item {
    display: block;
    padding: var(--spacing-sm) var(--spacing-md);
    color: var(--text-primary);
    text-decoration: none;
    border-radius: var(--radius-md);
    transition: var(--transition);
    cursor: pointer;
}

.dropdown-item:hover {
    background: var(--bg-hover);
}

.dropdown-divider {
    height: 1px;
    background: var(--border);
    margin: var(--spacing-sm) 0;
}

/* Enhanced forms */
.form-group {
    position: relative;
}

.form-control:focus {
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

.error-message {
    color: var(--error);
    font-size: 0.8rem;
    margin-top: var(--spacing-xs);
}

/* Switches */
.switch {
    position: relative;
    display: inline-flex;
    align-items: center;
    gap: var(--spacing-sm);
    cursor: pointer;
}

.switch input {
    opacity: 0;
    width: 0;
    height: 0;
}

.slider {
    position: relative;
    width: 50px;
    height: 24px;
    background: var(--border);
    border-radius: 24px;
    transition: var(--transition);
}

.slider:before {
    content: '';
    position: absolute;
    width: 20px;
    height: 20px;
    left: 2px;
    top: 2px;
    background: white;
    border-radius: 50%;
    transition: var(--transition);
}

input:checked + .slider {
    background: var(--primary);
}

input:checked + .slider:before {
    transform: translateX(26px);
}

/* Checkboxes and radios */
.checkbox,
.radio {
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
    cursor: pointer;
    margin-bottom: var(--spacing-sm);
}

.checkbox input,
.radio input {
    opacity: 0;
    position: absolute;
}

.checkmark,
.radiomark {
    width: 18px;
    height: 18px;
    border: 2px solid var(--border);
    border-radius: 3px;
    position: relative;
    transition: var(--transition);
}

.radiomark {
    border-radius: 50%;
}

.checkbox input:checked + .checkmark {
    background: var(--primary);
    border-color: var(--primary);
}

.checkbox input:checked + .checkmark:after {
    content: '✓';
    position: absolute;
    color: white;
    font-size: 12px;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

.radio input:checked + .radiomark {
    border-color: var(--primary);
}

.radio input:checked + .radiomark:after {
    content: '';
    position: absolute;
    width: 8px;
    height: 8px;
    background: var(--primary);
    border-radius: 50%;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

/* Progress bars */
.progress-bar {
    width: 100%;
    height: 8px;
    background: var(--border);
    border-radius: 4px;
    overflow: hidden;
}

.progress-fill {
    height: 100%;
    background: linear-gradient(90deg, var(--primary), var(--primary-light));
    border-radius: 4px;
    transition: width 0.3s ease;
}

.progress-circles {
    display: flex;
    gap: var(--spacing-lg);
}

.progress-circle {
    width: 80px;
    height: 80px;
}

.progress-circle svg {
    width: 100%;
    height: 100%;
}

.progress-text {
    font-size: 12px;
    fill: var(--text-primary);
    text-anchor: middle;
    dominant-baseline: central;
    font-weight: 600;
}

/* Loaders */
.loader {
    width: 40px;
    height: 40px;
    border: 3px solid var(--border);
    border-top: 3px solid var(--primary);
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

.loader.spinner {
    border-right: 3px solid transparent;
    border-left: 3px solid transparent;
}

.loader.dots {
    border: none;
    background: conic-gradient(var(--primary) 0%, transparent 30%);
    animation: spin 1s linear infinite;
}

/* Tabs */
.tabs {
    background: var(--bg-card);
    border-radius: var(--radius-lg);
    overflow: hidden;
}

.tab-header {
    display: flex;
    background: var(--bg-secondary);
    border-bottom: 1px solid var(--border);
}

.tab-btn {
    flex: 1;
    padding: var(--spacing-md) var(--spacing-lg);
    background: none;
    border: none;
    color: var(--text-secondary);
    cursor: pointer;
    transition: var(--transition);
    border-bottom: 2px solid transparent;
}

.tab-btn.active {
    color: var(--primary);
    border-bottom-color: var(--primary);
    background: var(--bg-card);
}

.tab-content {
    padding: var(--spacing-lg);
}

.tab-pane {
    display: none;
}

.tab-pane.active {
    display: block;
    animation: fadeIn 0.3s ease-out;
}

/* Alerts */
.alert {
    display: flex;
    align-items: flex-start;
    gap: var(--spacing-md);
    padding: var(--spacing-md);
    border-radius: var(--radius-md);
    border-left: 4px solid;
    background: var(--bg-card);
}

.alert-success {
    border-left-color: var(--success);
    background: rgba(16, 185, 129, 0.1);
}

.alert-warning {
    border-left-color: var(--warning);
    background: rgba(245, 158, 11, 0.1);
}

.alert-error {
    border-left-color: var(--error);
    background: rgba(239, 68, 68, 0.1);
}

.alert-icon {
    font-size: 1.2rem;
    flex-shrink: 0;
}

.alert-content {
    flex: 1;
}

.alert-title {
    font-weight: 600;
    margin-bottom: var(--spacing-xs);
}

.alert-message {
    color: var(--text-secondary);
    font-size: 0.9rem;
}

/* Demo specific styles */
.demo-grid {
    display: flex;
    flex-wrap: wrap;
    gap: var(--spacing-md);
    align-items: center;
}

.hover-card {
    transition: var(--transition);
    cursor: pointer;
}

.hover-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 25px var(--shadow);
}

.accent-card {
    border-left: 4px solid var(--primary);
}

.interactive-card {
    transition: var(--transition);
    cursor: pointer;
}

.interactive-card:active {
    transform: scale(0.98);
}

.btn-loading {
    pointer-events: none;
    opacity: 0.8;
}

.btn-spinner {
    width: 16px;
    height: 16px;
    border: 2px solid transparent;
    border-top: 2px solid currentColor;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    display: inline-block;
}

.btn-sm {
    padding: var(--spacing-sm) var(--spacing-md);
    font-size: 0.8rem;
}

.btn-lg {
    padding: var(--spacing-lg) var(--spacing-xl);
    font-size: 1.1rem;
}

.btn-icon {
    display: inline-flex;
    align-items: center;
    gap: var(--spacing-sm);
}
```

## 7. JavaScript утилиты и компоненты

**scripts/utils/animations.js**
```javascript
// Animation utilities
class Animations {
    static async stagger(elements, delay = 100) {
        const promises = Array.from(elements).map((el, index) => {
            return new Promise(resolve => {
                setTimeout(() => {
                    el.classList.add('animate');
                    resolve();
                }, index * delay);
            });
        });
        
        await Promise.all(promises);
    }

    static fadeIn(element, duration = 300) {
        return new Promise(resolve => {
            element.style.opacity = '0';
            element.style.display = 'block';
            
            const start = performance.now();
            
            function animate(time) {
                const elapsed = time - start;
                const progress = Math.min(elapsed / duration, 1);
                
                element.style.opacity = progress;
                
                if (progress < 1) {
                    requestAnimationFrame(animate);
                } else {
                    resolve();
                }
            }
            
            requestAnimationFrame(animate);
        });
    }

    static fadeOut(element, duration = 300) {
        return new Promise(resolve => {
            const start = performance.now();
            const initialOpacity = parseFloat(getComputedStyle(element).opacity);
            
            function animate(time) {
                const elapsed = time - start;
                const progress = Math.min(elapsed / duration, 1);
                
                element.style.opacity = initialOpacity * (1 - progress);
                
                if (progress < 1) {
                    requestAnimationFrame(animate);
                } else {
                    element.style.display = 'none';
                    resolve();
                }
            }
            
            requestAnimationFrame(animate);
        });
    }

    static slideToggle(element, duration = 300) {
        return new Promise(resolve => {
            if (element.style.display === 'none') {
                this.slideDown(element, duration).then(resolve);
            } else {
                this.slideUp(element, duration).then(resolve);
            }
        });
    }

    static slideDown(element, duration = 300) {
        return new Promise(resolve => {
            element.style.display = 'block';
            const height = element.offsetHeight;
            element.style.height = '0px';
            element.style.overflow = 'hidden';
            
            const start = performance.now();
            
            function animate(time) {
                const elapsed = time - start;
                const progress = Math.min(elapsed / duration, 1);
                
                element.style.height = `${progress * height}px`;
                
                if (progress < 1) {
                    requestAnimationFrame(animate);
                } else {
                    element.style.height = '';
                    element.style.overflow = '';
                    resolve();
                }
            }
            
            requestAnimationFrame(animate);
        });
    }

    static slideUp(element, duration = 300) {
        return new Promise(resolve => {
            const height = element.offsetHeight;
            element.style.height = `${height}px`;
            element.style.overflow = 'hidden';
            
            const start = performance.now();
            
            function animate(time) {
                const elapsed = time - start;
                const progress = Math.min(elapsed / duration, 1);
                
                element.style.height = `${height * (1 - progress)}px`;
                
                if (progress < 1) {
                    requestAnimationFrame(animate);
                } else {
                    element.style.display = 'none';
                    element.style.height = '';
                    element.style.overflow = '';
                    resolve();
                }
            }
            
            requestAnimationFrame(animate);
        });
    }

    static shake(element) {
        element.classList.add('shake');
        setTimeout(() => {
            element.classList.remove('shake');
        }, 500);
    }

    static pulse(element) {
        element.classList.add('pulse');
        setTimeout(() => {
            element.classList.remove('pulse');
        }, 2000);
    }

    static typewriter(element, text, speed = 50) {
        return new Promise(resolve => {
            element.textContent = '';
            let i = 0;
            
            function type() {
                if (i < text.length) {
                    element.textContent += text.charAt(i);
                    i++;
                    setTimeout(type, speed);
                } else {
                    resolve();
                }
            }
            
            type();
        });
    }
}

// Export for use in other modules
window.Animations = Animations;
```

**scripts/utils/helpers.js**
```javascript
// Helper functions
class Helpers {
    static formatBytes(bytes, decimals = 2) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const dm = decimals < 0 ? 0 : decimals;
        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
    }

    static formatUptime(seconds) {
        const days = Math.floor(seconds / (3600 * 24));
        const hours = Math.floor((seconds % (3600 * 24)) / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        const secs = Math.floor(seconds % 60);
        
        let result = [];
        if (days > 0) result.push(`${days}д`);
        if (hours > 0 || days > 0) result.push(`${hours}ч`);
        if (minutes > 0 || hours > 0 || days > 0) result.push(`${minutes}м`);
        result.push(`${secs}с`);
        
        return result.join(' ');
    }

    static debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    static throttle(func, limit) {
        let inThrottle;
        return function(...args) {
            if (!inThrottle) {
                func.apply(this, args);
                inThrottle = true;
                setTimeout(() => inThrottle = false, limit);
            }
        };
    }

    static generateId() {
        return Date.now().toString(36) + Math.random().toString(36).substr(2);
    }

    static validateEmail(email) {
        const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return re.test(email);
    }

    static formatDate(date, format = 'datetime') {
        const d = new Date(date);
        const options = {
            date: { year: 'numeric', month: 'long', day: 'numeric' },
            time: { hour: '2-digit', minute: '2-digit' },
            datetime: { 
                year: 'numeric', 
                month: 'short', 
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            }
        };
        
        return d.toLocaleDateString('ru-RU', options[format]);
    }

    static clone(obj) {
        return JSON.parse(JSON.stringify(obj));
    }

    static getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(';').shift();
    }

    static setCookie(name, value, days = 7) {
        const expires = new Date(Date.now() + days * 864e5).toUTCString();
        document.cookie = `${name}=${value}; expires=${expires}; path=/`;
    }

    static removeCookie(name) {
        document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/`;
    }

    static async copyToClipboard(text) {
        try {
            await navigator.clipboard.writeText(text);
            return true;
        } catch (err) {
            // Fallback for older browsers
            const textArea = document.createElement('textarea');
            textArea.value = text;
            document.body.appendChild(textArea);
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);
            return true;
        }
    }

    static isMobile() {
        return window.innerWidth <= 768;
    }

    static isTouchDevice() {
        return 'ontouchstart' in window || navigator.maxTouchPoints > 0;
    }
}

// Export for use in other modules
window.Helpers = Helpers;
```

**scripts/utils/api.js**
```javascript
// API utility functions
class API {
    static async request(endpoint, options = {}) {
        const baseURL = window.adminDashboard?.apiBase || '/api';
        const url = `${baseURL}${endpoint}`;
        
        const config = {
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            },
            ...options
        };

        // Add auth token if available
        const token = localStorage.getItem('auth_token');
        if (token) {
            config.headers['Authorization'] = `Bearer ${token}`;
        }

        if (config.body && typeof config.body === 'object') {
            config.body = JSON.stringify(config.body);
        }

        try {
            const response = await fetch(url, config);
            
            if (response.status === 401) {
                // Unauthorized - redirect to login
                window.location.href = 'login.html';
                return;
            }
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const contentType = response.headers.get('content-type');
            if (contentType && contentType.includes('application/json')) {
                return await response.json();
            } else {
                return await response.text();
            }
        } catch (error) {
            console.error('API request failed:', error);
            
            // Show error notification
            if (window.showNotification) {
                window.showNotification(`Ошибка запроса: ${error.message}`, 'error');
            }
            
            throw error;
        }
    }

    static async get(endpoint) {
        return this.request(endpoint);
    }

    static async post(endpoint, data) {
        return this.request(endpoint, {
            method: 'POST',
            body: data
        });
    }

    static async put(endpoint, data) {
        return this.request(endpoint, {
            method: 'PUT',
            body: data
        });
    }

    static async delete(endpoint) {
        return this.request(endpoint, {
            method: 'DELETE'
        });
    }

    static async upload(endpoint, formData) {
        return this.request(endpoint, {
            method: 'POST',
            headers: {
                // Don't set Content-Type for FormData, let browser set it
            },
            body: formData
        });
    }

    // WebSocket connection helper
    static createWebSocket(url) {
        const ws = new WebSocket(url);
        
        return new Promise((resolve, reject) => {
            ws.onopen = () => resolve(ws);
            ws.onerror = (error) => reject(error);
        });
    }

    // SSE (Server-Sent Events) helper
    static createEventSource(url) {
        return new EventSource(url);
    }
}

// Export for use in other modules
window.API = API;
```

**scripts/components/notifications.js**
```javascript
// Notifications system
class NotificationSystem {
    constructor() {
        this.container = document.getElementById('notifications');
        if (!this.container) {
            this.container = document.createElement('div');
            this.container.id = 'notifications';
            this.container.className = 'notifications-container';
            document.body.appendChild(this.container);
        }
        
        this.queue = [];
        this.maxNotifications = 5;
    }

    show(message, type = 'info', duration = 5000) {
        const id = Helpers.generateId();
        const notification = this.createNotification(id, message, type);
        
        this.container.appendChild(notification);
        this.queue.push({ id, element: notification });
        
        // Remove oldest notification if limit exceeded
        if (this.queue.length > this.maxNotifications) {
            const oldest = this.queue.shift();
            this.removeNotification(oldest.id);
        }
        
        // Auto-remove after duration
        if (duration > 0) {
            setTimeout(() => {
                this.removeNotification(id);
            }, duration);
        }
        
        return id;
    }

    createNotification(id, message, type) {
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.setAttribute('data-id', id);
        
        const icons = {
            success: '✅',
            warning: '⚠️',
            error: '❌',
            info: 'ℹ️'
        };
        
        notification.innerHTML = `
            <div class="notification-icon">${icons[type] || icons.info}</div>
            <div class="notification-content">
                <div class="notification-message">${message}</div>
            </div>
            <button class="notification-close" onclick="window.notificationSystem.removeNotification('${id}')">
                ✕
            </button>
        `;
        
        // Add entrance animation
        setTimeout(() => {
            notification.classList.add('fade-in');
        }, 10);
        
        return notification;
    }

    removeNotification(id) {
        const index = this.queue.findIndex(item => item.id === id);
        if (index === -1) return;
        
        const { element } = this.queue[index];
        element.classList.add('fade-out');
        
        setTimeout(() => {
            if (element.parentNode) {
                element.parentNode.removeChild(element);
            }
            this.queue.splice(index, 1);
        }, 300);
    }

    clearAll() {
        this.queue.forEach(item => {
            if (item.element.parentNode) {
                item.element.parentNode.removeChild(item.element);
            }
        });
        this.queue = [];
    }

    // Convenience methods
    success(message, duration = 5000) {
        return this.show(message, 'success', duration);
    }

    warning(message, duration = 5000) {
        return this.show(message, 'warning', duration);
    }

    error(message, duration = 0) { // Errors don't auto-close by default
        return this.show(message, 'error', duration);
    }

    info(message, duration = 5000) {
        return this.show(message, 'info', duration);
    }
}

// Initialize notification system
window.notificationSystem = new NotificationSystem();
window.showNotification = (message, type = 'info') => {
    window.notificationSystem.show(message, type);
};
```

**scripts/auth.js**
```javascript
// Authentication system
class AuthSystem {
    constructor() {
        this.init();
    }

    init() {
        this.setupEventListeners();
        this.checkAuthState();
    }

    setupEventListeners() {
        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', (e) => this.handleLogin(e));
        }

        const togglePassword = document.getElementById('togglePassword');
        if (togglePassword) {
            togglePassword.addEventListener('click', () => this.togglePasswordVisibility());
        }

        // Check if user is already logged in
        if (this.isLoggedIn() && window.location.pathname.includes('login.html')) {
            window.location.href = 'index.html';
        }
    }

    async handleLogin(e) {
        e.preventDefault();
        
        const username = document.getElementById('username').value;
        const password = document.getElementById('password').value;
        const rememberMe = document.getElementById('rememberMe').checked;
        const loginBtn = document.getElementById('loginBtn');
        const spinner = loginBtn.querySelector('.btn-spinner');

        // Show loading state
        loginBtn.disabled = true;
        spinner.style.display = 'inline-block';

        try {
            // Simulate API call
            await this.simulateLogin(username, password);
            
            // Save auth state
            this.setAuthState(username, rememberMe);
            
            // Show success message
            if (window.showNotification) {
                window.showNotification('Успешный вход в систему!', 'success');
            }
            
            // Redirect to main page
            setTimeout(() => {
                window.location.href = 'index.html';
            }, 1000);
            
        } catch (error) {
            // Show error message
            if (window.showNotification) {
                window.showNotification(error.message, 'error');
            } else {
                alert(error.message);
            }
            
            // Shake form on error
            Animations.shake(document.getElementById('loginForm'));
        } finally {
            // Reset loading state
            loginBtn.disabled = false;
            spinner.style.display = 'none';
        }
    }

    async simulateLogin(username, password) {
        // Simulate API delay
        await new Promise(resolve => setTimeout(resolve, 1500));
        
        // Mock authentication
        const validUsers = {
            'admin': 'admin123',
            'user': 'user123',
            'demo': 'demo123'
        };
        
        if (validUsers[username] && validUsers[username] === password) {
            return {
                token: 'mock_jwt_token_' + Date.now(),
                user: {
                    id: 1,
                    username: username,
                    role: username === 'admin' ? 'admin' : 'user',
                    name: username === 'admin' ? 'Алексей Петров' : 'Пользователь'
                }
            };
        } else {
            throw new Error('Неверное имя пользователя или пароль');
        }
    }

    setAuthState(username, rememberMe) {
        const authData = {
            username: username,
            loggedIn: true,
            timestamp: Date.now()
        };
        
        if (rememberMe) {
            localStorage.setItem('auth_data', JSON.stringify(authData));
        } else {
            sessionStorage.setItem('auth_data', JSON.stringify(authData));
        }
        
        // Set mock token
        localStorage.setItem('auth_token', 'mock_jwt_token_' + Date.now());
    }

    isLoggedIn() {
        const authData = localStorage.getItem('auth_data') || sessionStorage.getItem('auth_data');
        if (!authData) return false;
        
        try {
            const data = JSON.parse(authData);
            // Check if session is still valid (24 hours)
            return data.loggedIn && (Date.now() - data.timestamp) < (24 * 60 * 60 * 1000);
        } catch {
            return false;
        }
    }

    getCurrentUser() {
        const authData = localStorage.getItem('auth_data') || sessionStorage.getItem('auth_data');
        if (!authData) return null;
        
        try {
            return JSON.parse(authData);
        } catch {
            return null;
        }
    }

    logout() {
        localStorage.removeItem('auth_data');
        sessionStorage.removeItem('auth_data');
        localStorage.removeItem('auth_token');
        window.location.href = 'login.html';
    }

    togglePasswordVisibility() {
        const passwordInput = document.getElementById('password');
        const toggleBtn = document.getElementById('togglePassword');
        
        if (passwordInput.type === 'password') {
            passwordInput.type = 'text';
            toggleBtn.textContent = '🙈';
        } else {
            passwordInput.type = 'password';
            toggleBtn.textContent = '👁️';
        }
    }

    requireAuth() {
        if (!this.isLoggedIn() && !window.location.pathname.includes('login.html')) {
            window.location.href = 'login.html';
            return false;
        }
        return true;
    }
}

// Initialize auth system
document.addEventListener('DOMContentLoaded', () => {
    window.authSystem = new AuthSystem();
});
```

**scripts/app.js** (дополненный)
```javascript
// Main application entry point
import './utils/api.js';
import './utils/helpers.js';
import './utils/animations.js';

// Import components
import './components/metrics.js';
import './components/messages.js';
import './components/ideas.js';
import './components/settings.js';
import './components/queue-monitor.js';
import './components/server-status.js';
import './components/tickets.js';
import './components/database-explorer.js';
import './components/notifications.js';

class AdminDashboard {
    constructor() {
        this.apiBase = '/api';
        this.currentTab = 'metrics';
        this.settings = this.loadSettings();
        this.init();
    }

    init() {
        this.hidePreloader();
        this.setupEventListeners();
        this.applySettings();
        this.loadServerStatus();
        this.startAutoUpdate();
        
        // Initialize components
        this.initComponents();
    }

    hidePreloader() {
        const preloader = document.getElementById('preloader');
        if (preloader) {
            setTimeout(() => {
                preloader.classList.add('fade-out');
                setTimeout(() => {
                    preloader.remove();
                }, 500);
            }, 1000);
        }
    }

    setupEventListeners() {
        // Tab navigation
        document.querySelectorAll('.nav-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.preventDefault();
                const tabName = e.currentTarget.dataset.tab;
                if (tabName) {
                    this.switchTab(tabName);
                }
            });
        });

        // User menu
        const userMenuBtn = document.getElementById('userMenuBtn');
        const userMenu = document.getElementById('userMenu');
        if (userMenuBtn && userMenu) {
            userMenuBtn.addEventListener('click', () => {
                userMenu.classList.toggle('show');
            });

            // Close menu when clicking outside
            document.addEventListener('click', (e) => {
                if (!userMenuBtn.contains(e.target) && !userMenu.contains(e.target)) {
                    userMenu.classList.remove('show');
                }
            });
        }

        // FAB
        const fab = document.getElementById('mainFab');
        const fabContainer = document.querySelector('.fab-container');
        if (fab && fabContainer) {
            fab.addEventListener('click', () => {
                fabContainer.classList.toggle('open');
            });

            // FAB actions
            document.querySelectorAll('.fab-action').forEach(action => {
                action.addEventListener('click', () => {
                    this.handleFabAction(action.dataset.action);
                    fabContainer.classList.remove('open');
                });
            });
        }

        // Quick settings
        const quickSettings = document.getElementById('quickSettings');
        const closeSettings = document.querySelector('.close-settings');
        if (closeSettings && quickSettings) {
            closeSettings.addEventListener('click', () => {
                quickSettings.classList.remove('open');
            });
        }

        // Theme toggle
        const darkModeToggle = document.getElementById('darkModeToggle');
        if (darkModeToggle) {
            darkModeToggle.addEventListener('change', (e) => {
                this.toggleTheme(e.target.checked);
            });
        }

        // Global keyboard shortcuts
        document.addEventListener('keydown', (e) => {
            this.handleKeyboardShortcuts(e);
        });

        // Tooltips
        this.initTooltips();
    }

    initComponents() {
        // Initialize any global components that need setup
        console.log('Admin dashboard initialized');
    }

    switchTab(tabName) {
        // Update active nav button
        document.querySelectorAll('.nav-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        
        const activeBtn = document.querySelector(`[data-tab="${tabName}"]`);
        if (activeBtn) {
            activeBtn.classList.add('active');
        }

        // Update active tab content
        document.querySelectorAll('.tab-content').forEach(tab => {
            tab.classList.remove('active');
        });
        
        const activeTab = document.getElementById(tabName);
        if (activeTab) {
            activeTab.classList.add('active');
            // Trigger custom event for tab change
            window.dispatchEvent(new CustomEvent('tabChanged', { 
                detail: { tab: tabName } 
            }));
        }

        this.currentTab = tabName;
        
        // Save last active tab
        this.settings.lastActiveTab = tabName;
        this.saveSettings();
    }

    async loadServerStatus() {
        try {
            // Simulate API call
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            const status = {
                status: 'online',
                message: 'Сервер онлайн',
                responseTime: Math.random() * 100 + 50
            };
            
            this.updateServerStatus(status);
        } catch (error) {
            console.error('Failed to load server status:', error);
            this.updateServerStatus({ 
                status: 'error', 
                message: 'Connection failed' 
            });
        }
    }

    updateServerStatus(status) {
        const indicator = document.querySelector('.status-indicator');
        const statusText = document.querySelector('.server-status span:last-child');

        if (!indicator || !statusText) return;

        if (status.status === 'online') {
            indicator.style.background = 'var(--success)';
            statusText.textContent = `Сервер онлайн (${Math.round(status.responseTime)}ms)`;
        } else {
            indicator.style.background = 'var(--error)';
            statusText.textContent = 'Сервер недоступен';
        }
    }

    startAutoUpdate() {
        // Update time every second
        setInterval(() => {
            const timeElement = document.getElementById('lastUpdate');
            if (timeElement) {
                timeElement.textContent = new Date().toLocaleTimeString();
            }
        }, 1000);

        // Update server status every 30 seconds
        setInterval(() => {
            this.loadServerStatus();
        }, 30000);
    }

    handleFabAction(action) {
        switch (action) {
            case 'notifications':
                window.showNotification('Это тестовое уведомление от FAB!', 'info');
                break;
            case 'quick-settings':
                this.showQuickSettings();
                break;
            case 'new-ticket':
                this.createNewTicket();
                break;
            case 'dark-mode':
                this.toggleDarkMode();
                break;
        }
    }

    showQuickSettings() {
        const quickSettings = document.getElementById('quickSettings');
        if (quickSettings) {
            quickSettings.classList.add('open');
        }
    }

    createNewTicket() {
        window.showNotification('Форма создания обращения будет открыта', 'info');
        // In a real app, this would open a modal or switch to tickets tab
    }

    toggleDarkMode() {
        const currentTheme = document.documentElement.getAttribute('data-theme');
        const newTheme = currentTheme === 'light' ? 'dark' : 'light';
        this.setTheme(newTheme);
    }

    toggleTheme(darkMode) {
        this.setTheme(darkMode ? 'dark' : 'light');
    }

    setTheme(theme) {
        document.documentElement.setAttribute('data-theme', theme);
        this.settings.theme = theme;
        this.saveSettings();
        
        window.showNotification(
            theme === 'dark' ? 'Темная тема включена' : 'Светлая тема включена',
            'success'
        );
    }

    handleKeyboardShortcuts(e) {
        // Ctrl/Cmd + K for quick search
        if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
            e.preventDefault();
            this.focusSearch();
        }
        
        // Escape to close modals
        if (e.key === 'Escape') {
            this.closeModals();
        }
    }

    focusSearch() {
        const searchInput = document.querySelector('input[type="search"], #search-tickets, #search-messages');
        if (searchInput) {
            searchInput.focus();
        }
    }

    closeModals() {
        document.querySelectorAll('.modal, .quick-settings-panel').forEach(modal => {
            modal.classList.remove('open');
            modal.style.display = 'none';
        });
        
        document.querySelectorAll('.dropdown-menu').forEach(menu => {
            menu.classList.remove('show');
        });
    }

    initTooltips() {
        document.addEventListener('mouseover', (e) => {
            const target = e.target.closest('[data-tooltip]');
            if (target) {
                this.showTooltip(target, target.dataset.tooltip);
            }
        });

        document.addEventListener('mouseout', (e) => {
            const target = e.target.closest('[data-tooltip]');
            if (target) {
                this.hideTooltip();
            }
        });
    }

    showTooltip(element, text) {
        let tooltip = document.getElementById('global-tooltip');
        if (!tooltip) {
            tooltip = document.createElement('div');
            tooltip.id = 'global-tooltip';
            tooltip.className = 'tooltip';
            document.body.appendChild(tooltip);
        }

        tooltip.textContent = text;
        
        const rect = element.getBoundingClientRect();
        tooltip.style.top = (rect.top - tooltip.offsetHeight - 10) + 'px';
        tooltip.style.left = (rect.left + (rect.width - tooltip.offsetWidth) / 2) + 'px';
        
        tooltip.classList.add('show');
    }

    hideTooltip() {
        const tooltip = document.getElementById('global-tooltip');
        if (tooltip) {
            tooltip.classList.remove('show');
        }
    }

    loadSettings() {
        const defaultSettings = {
            theme: 'dark',
            compactMode: false,
            animations: true,
            notifications: true,
            lastActiveTab: 'metrics'
        };

        try {
            const saved = localStorage.getItem('adminDashboard_settings');
            return saved ? { ...defaultSettings, ...JSON.parse(saved) } : defaultSettings;
        } catch {
            return defaultSettings;
        }
    }

    saveSettings() {
        localStorage.setItem('adminDashboard_settings', JSON.stringify(this.settings));
    }

    applySettings() {
        // Apply theme
        if (this.settings.theme) {
            document.documentElement.setAttribute('data-theme', this.settings.theme);
        }

        // Apply compact mode
        if (this.settings.compactMode) {
            document.body.classList.add('compact-mode');
        }

        // Apply animations
        if (!this.settings.animations) {
            document.body.classList.add('no-animations');
        }

        // Restore last active tab
        if (this.settings.lastActiveTab && this.settings.lastActiveTab !== 'metrics') {
            this.switchTab(this.settings.lastActiveTab);
        }
    }
}

// Initialize the dashboard when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    // Check authentication
    if (window.authSystem && !window.authSystem.requireAuth()) {
        return;
    }

    window.adminDashboard = new AdminDashboard();
});

// Export for use in other modules
window.AdminDashboard = AdminDashboard;

// Global error handler
window.addEventListener('error', (e) => {
    console.error('Global error:', e.error);
    if (window.showNotification) {
        window.showNotification('Произошла ошибка в приложении', 'error');
    }
});

// Handle unhandled promise rejections
window.addEventListener('unhandledrejection', (e) => {
    console.error('Unhandled promise rejection:', e.reason);
    e.preventDefault();
});
```

## 8. Компоненты (обновленные)

Все компоненты (metrics.js, messages.js, ideas.js, settings.js, queue-monitor.js, server-status.js, tickets.js, database-explorer.js) остаются с их оригинальной функциональностью, но теперь используют общую систему уведомлений, анимаций и API.

Например, обновленный **server-status.js**:

```javascript
class ServerStatus extends HTMLElement {
    connectedCallback() {
        this.render();
        this.setupEventListeners();
        this.startMonitoring();
    }

    render() {
        this.innerHTML = `
            <div class="card slide-up">
                <h2>🖥 Статус сервера</h2>
                <p>Мониторинг состояния сервера и производительности</p>
                
                <div class="grid grid-3">
                    <!-- остальной код без изменений -->
                </div>
            </div>
        `;
    }

    async loadServerStatus() {
        try {
            const response = await API.get('/v1/status');
            // ... остальной код
        } catch (error) {
            console.error('Ошибка при загрузке статуса сервера:', error);
            window.showNotification('Ошибка загрузки статуса сервера', 'error');
        }
    }

    // ... остальные методы
}

customElements.define('server-status', ServerStatus);
```

Эта реализация предоставляет:

1. **Полную систему аутентификации** с страницей логина
2. **Анимации и переходы** между страницами и элементами
3. **Систему уведомлений** с разными типами и настройками
4. **Floating Action Button** с быстрыми действиями
5. **Быстрые настройки** с переключателями темы
6. **Демо страницу** со всеми UI компонентами
7. **Полную документацию** с навигацией
8. **Swagger документацию** API
9. **Адаптивный дизайн** для мобильных устройств
10. **Темную и светлую темы**
11. **Глобальные горячие клавиши**
12. **Систему подсказок** и всплывающих окон

Все компоненты используют единую систему стилей, анимаций и утилит, обеспечивая согласованный пользовательский опыт across всей панели управления.